/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DDVenue } from '../models';
import { DDVenueCodes } from '../models';
import { ResultOfDDVenue } from '../models';
import { VenueReduced } from '../models';
/**
 * VenueApi - axios parameter creator
 * @export
 */
export const VenueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Venue Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGeVenueListReduced: async (language?: string, source?: string, capacityfilter?: string, roomcountfilter?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/VenueReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (capacityfilter !== undefined) {
                localVarQueryParameter['capacityfilter'] = capacityfilter;
            }

            if (roomcountfilter !== undefined) {
                localVarQueryParameter['roomcountfilter'] = roomcountfilter;
            }

            if (categoryfilter !== undefined) {
                localVarQueryParameter['categoryfilter'] = categoryfilter;
            }

            if (featurefilter !== undefined) {
                localVarQueryParameter['featurefilter'] = featurefilter;
            }

            if (setuptypefilter !== undefined) {
                localVarQueryParameter['setuptypefilter'] = setuptypefilter;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Venue List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
         * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGet: async (pagenumber?: number, pagesize?: number, source?: string, capacityfilter?: string, roomcountfilter?: string, idlist?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, fields?: string, language?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Venue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (capacityfilter !== undefined) {
                localVarQueryParameter['capacityfilter'] = capacityfilter;
            }

            if (roomcountfilter !== undefined) {
                localVarQueryParameter['roomcountfilter'] = roomcountfilter;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (categoryfilter !== undefined) {
                localVarQueryParameter['categoryfilter'] = categoryfilter;
            }

            if (featurefilter !== undefined) {
                localVarQueryParameter['featurefilter'] = featurefilter;
            }

            if (setuptypefilter !== undefined) {
                localVarQueryParameter['setuptypefilter'] = setuptypefilter;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Venue Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetAllVenueTypesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/VenueTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Venue Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetAllVenueTypesSingle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling venueGetAllVenueTypesSingle.');
            }
            const localVarPath = `/api/VenueTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Venue Single
         * @param {string} id ID of the Webcam
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetApiVenueById: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling venueGetApiVenueById.');
            }
            const localVarPath = `/api/Venue/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VenueApi - functional programming interface
 * @export
 */
export const VenueApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Venue Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueGeVenueListReduced(language?: string, source?: string, capacityfilter?: string, roomcountfilter?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VenueReduced>>> {
            const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Venue List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
         * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueGet(pagenumber?: number, pagesize?: number, source?: string, capacityfilter?: string, roomcountfilter?: string, idlist?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, fields?: string, language?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultOfDDVenue>> {
            const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Venue Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueGetAllVenueTypesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DDVenueCodes>>> {
            const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetAllVenueTypesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Venue Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueGetAllVenueTypesSingle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DDVenueCodes>> {
            const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetAllVenueTypesSingle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Venue Single
         * @param {string} id ID of the Webcam
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueGetApiVenueById(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DDVenue>> {
            const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetApiVenueById(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VenueApi - factory interface
 * @export
 */
export const VenueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Venue Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGeVenueListReduced(language?: string, source?: string, capacityfilter?: string, roomcountfilter?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, options?: any): AxiosPromise<Array<VenueReduced>> {
            return VenueApiFp(configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Venue List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
         * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
         * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
         * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
         * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
         * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
         * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
         * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGet(pagenumber?: number, pagesize?: number, source?: string, capacityfilter?: string, roomcountfilter?: string, idlist?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, fields?: string, language?: string, searchfilter?: string, options?: any): AxiosPromise<ResultOfDDVenue> {
            return VenueApiFp(configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Venue Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetAllVenueTypesList(options?: any): AxiosPromise<Array<DDVenueCodes>> {
            return VenueApiFp(configuration).venueGetAllVenueTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Venue Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetAllVenueTypesSingle(id: string, options?: any): AxiosPromise<DDVenueCodes> {
            return VenueApiFp(configuration).venueGetAllVenueTypesSingle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Venue Single
         * @param {string} id ID of the Webcam
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueGetApiVenueById(id: string, fields?: string, language?: string, options?: any): AxiosPromise<DDVenue> {
            return VenueApiFp(configuration).venueGetApiVenueById(id, fields, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VenueApi - object-oriented interface
 * @export
 * @class VenueApi
 * @extends {BaseAPI}
 */
export class VenueApi extends BaseAPI {
    /**
     * 
     * @summary GET Venue Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public venueGeVenueListReduced(language?: string, source?: string, capacityfilter?: string, roomcountfilter?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, options?: any) {
        return VenueApiFp(this.configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Venue List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
     * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public venueGet(pagenumber?: number, pagesize?: number, source?: string, capacityfilter?: string, roomcountfilter?: string, idlist?: string, categoryfilter?: string, featurefilter?: string, setuptypefilter?: string, locfilter?: string, active?: boolean, odhactive?: boolean, odhtagfilter?: string, seed?: string, latitude?: string, longitude?: string, radius?: string, updatefrom?: string, fields?: string, language?: string, searchfilter?: string, options?: any) {
        return VenueApiFp(this.configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Venue Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public venueGetAllVenueTypesList(options?: any) {
        return VenueApiFp(this.configuration).venueGetAllVenueTypesList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Venue Type Single
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public venueGetAllVenueTypesSingle(id: string, options?: any) {
        return VenueApiFp(this.configuration).venueGetAllVenueTypesSingle(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Venue Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VenueApi
     */
    public venueGetApiVenueById(id: string, fields?: string, language?: string, options?: any) {
        return VenueApiFp(this.configuration).venueGetApiVenueById(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
}
