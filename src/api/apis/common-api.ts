/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Area } from '../models';
import { BaseInfosLocalized } from '../models';
import { CommonReduced } from '../models';
import { District } from '../models';
import { DistrictLocalized } from '../models';
import { ExperienceArea } from '../models';
import { ExperienceAreaLocalized } from '../models';
import { ExperienceAreaName } from '../models';
import { MetaRegion } from '../models';
import { MetaRegionLocalized } from '../models';
import { Municipality } from '../models';
import { MunicipalityLocalized } from '../models';
import { Region } from '../models';
import { RegionLocalized } from '../models';
import { SkiArea } from '../models';
import { SkiAreaLocalized } from '../models';
import { SkiRegion } from '../models';
import { SkiRegionLocalized } from '../models';
import { Tourismverein } from '../models';
import { TourismvereinLocalized } from '../models';
import { Wine } from '../models';
/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Area Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetAreaSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetAreaSingle.');
            }
            const localVarPath = `/api/Area/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Area List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetAreas: async (elements?: number, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrict: async (elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/District`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictLocalized: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DistrictLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictReduced: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DistrictReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetDistrictSingle.');
            }
            const localVarPath = `/api/District/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetDistrictSingleLocalized.');
            }
            const localVarPath = `/api/DistrictLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreaSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetExperienceAreaSingle.');
            }
            const localVarPath = `/api/ExperienceArea/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreaSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetExperienceAreaSingleLocalized.');
            }
            const localVarPath = `/api/ExperienceAreaLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Experiencearea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreas: async (elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ExperienceArea`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreasLocalized: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ExperienceAreaLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreasReduced: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ExperienceAreaReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET MetaRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetMetaRegionSingle.');
            }
            const localVarPath = `/api/MetaRegion/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET MetaRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetMetaRegionSingleLocalized.');
            }
            const localVarPath = `/api/MetaRegionLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET MetaRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegions: async (elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MetaRegion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET MetaRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionsLocalized: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MetaRegionLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET MetaRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionsReduced: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MetaRegionReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Municipality List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipality: async (elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Municipality`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Municipality Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalityLocalized: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MunicipalityLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Municipality Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalityReduced: async (language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MunicipalityReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (visibleinsearch !== undefined) {
                localVarQueryParameter['visibleinsearch'] = visibleinsearch;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Municipality Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalitySingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetMunicipalitySingle.');
            }
            const localVarPath = `/api/Municipality/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Municipality Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalitySingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetMunicipalitySingleLocalized.');
            }
            const localVarPath = `/api/MunicipalityLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Region Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetRegionSingle.');
            }
            const localVarPath = `/api/Region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Region Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetRegionSingleLocalized.');
            }
            const localVarPath = `/api/RegionLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Region List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegions: async (elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Region Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionsLocalized: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RegionLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Region Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionsReduced: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RegionReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiArea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiArea: async (elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiArea`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaLocalized: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiAreaLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaReduced: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiAreaReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetSkiAreaSingle.');
            }
            const localVarPath = `/api/SkiArea/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetSkiAreaSingleLocalized.');
            }
            const localVarPath = `/api/SkiAreaLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegion: async (elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiRegion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionLocalized: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiRegionLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionReduced: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkiRegionReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetSkiRegionSingle.');
            }
            const localVarPath = `/api/SkiRegion/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET SkiRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetSkiRegionSingleLocalized.');
            }
            const localVarPath = `/api/SkiRegionLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET TourismAssociation List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismverein: async (elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TourismAssociation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinLocalized: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TourismAssociationLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinReduced: async (language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TourismAssociationReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetTourismvereinSingle.');
            }
            const localVarPath = `/api/TourismAssociation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinSingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetTourismvereinSingleLocalized.');
            }
            const localVarPath = `/api/TourismAssociationLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Wine Awards List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [wineid] WineId
         * @param {string} [companyid] Company Id
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetWineAwardsList: async (elements?: number, wineid?: string, companyid?: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WineAward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (elements !== undefined) {
                localVarQueryParameter['elements'] = elements;
            }

            if (wineid !== undefined) {
                localVarQueryParameter['wineid'] = wineid;
            }

            if (companyid !== undefined) {
                localVarQueryParameter['companyid'] = companyid;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Wine Award Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetWineAwardsSingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commonGetWineAwardsSingle.');
            }
            const localVarPath = `/api/WineAward/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Area Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetAreaSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Area>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetAreaSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Area List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetAreas(elements?: number, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Area>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetAreas(elements, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetDistrict(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<District>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetDistrictLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistrictLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetDistrictReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetDistrictSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<District>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetDistrictSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetExperienceAreaSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceArea>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreaSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetExperienceAreaSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseInfosLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreaSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Experiencearea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetExperienceAreas(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceArea>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetExperienceAreasLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceAreaLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ExperienceArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetExperienceAreasReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceAreaName>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET MetaRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMetaRegionSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaRegion>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET MetaRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMetaRegionSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaRegionLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET MetaRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMetaRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetaRegion>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET MetaRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMetaRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetaRegionLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET MetaRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMetaRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Municipality List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMunicipality(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Municipality>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Municipality Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMunicipalityLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MunicipalityLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Municipality Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMunicipalityReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Municipality Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMunicipalitySingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Municipality>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalitySingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Municipality Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetMunicipalitySingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MunicipalityLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalitySingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Region Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetRegionSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Region Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetRegionSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Region List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Region>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Region Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegionLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Region Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiArea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiArea(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkiArea>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiAreaLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkiAreaLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiAreaReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiAreaSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkiArea>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiAreaSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkiAreaLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiRegion(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkiRegion>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiRegionLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkiRegionLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiRegionReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiRegionSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkiRegion>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET SkiRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetSkiRegionSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkiRegionLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET TourismAssociation List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetTourismverein(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tourismverein>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetTourismvereinLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TourismvereinLocalized>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetTourismvereinReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonReduced>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetTourismvereinSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tourismverein>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET TourismAssociation Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetTourismvereinSingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourismvereinLocalized>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinSingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Wine Awards List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [wineid] WineId
         * @param {string} [companyid] Company Id
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetWineAwardsList(elements?: number, wineid?: string, companyid?: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wine>>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Wine Award Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonGetWineAwardsSingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wine>> {
            const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetWineAwardsSingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Area Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetAreaSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Area> {
            return CommonApiFp(configuration).commonGetAreaSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Area List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetAreas(elements?: number, fields?: string, language?: string, options?: any): AxiosPromise<Array<Area>> {
            return CommonApiFp(configuration).commonGetAreas(elements, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrict(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<District>> {
            return CommonApiFp(configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<DistrictLocalized>> {
            return CommonApiFp(configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<District> {
            return CommonApiFp(configuration).commonGetDistrictSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetDistrictSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<DistrictLocalized> {
            return CommonApiFp(configuration).commonGetDistrictSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ExperienceArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreaSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<ExperienceArea> {
            return CommonApiFp(configuration).commonGetExperienceAreaSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ExperienceArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreaSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<BaseInfosLocalized> {
            return CommonApiFp(configuration).commonGetExperienceAreaSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Experiencearea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreas(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<ExperienceArea>> {
            return CommonApiFp(configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ExperienceArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreasLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<ExperienceAreaLocalized>> {
            return CommonApiFp(configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ExperienceArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetExperienceAreasReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<ExperienceAreaName>> {
            return CommonApiFp(configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET MetaRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<MetaRegion> {
            return CommonApiFp(configuration).commonGetMetaRegionSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET MetaRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<MetaRegionLocalized> {
            return CommonApiFp(configuration).commonGetMetaRegionSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET MetaRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<MetaRegion>> {
            return CommonApiFp(configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET MetaRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<MetaRegionLocalized>> {
            return CommonApiFp(configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET MetaRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMetaRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Municipality List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipality(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<Municipality>> {
            return CommonApiFp(configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Municipality Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalityLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<MunicipalityLocalized>> {
            return CommonApiFp(configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Municipality Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalityReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Municipality Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalitySingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Municipality> {
            return CommonApiFp(configuration).commonGetMunicipalitySingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Municipality Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetMunicipalitySingleLocalized(id: string, language?: string, options?: any): AxiosPromise<MunicipalityLocalized> {
            return CommonApiFp(configuration).commonGetMunicipalitySingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Region Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Region> {
            return CommonApiFp(configuration).commonGetRegionSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Region Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<RegionLocalized> {
            return CommonApiFp(configuration).commonGetRegionSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Region List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<Region>> {
            return CommonApiFp(configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Region Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<RegionLocalized>> {
            return CommonApiFp(configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Region Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiArea List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiArea(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<SkiArea>> {
            return CommonApiFp(configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiArea Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<SkiAreaLocalized>> {
            return CommonApiFp(configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiArea Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiArea Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<SkiArea> {
            return CommonApiFp(configuration).commonGetSkiAreaSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiArea Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiAreaSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<SkiAreaLocalized> {
            return CommonApiFp(configuration).commonGetSkiAreaSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiRegion List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegion(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<SkiRegion>> {
            return CommonApiFp(configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiRegion Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<SkiRegionLocalized>> {
            return CommonApiFp(configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiRegion Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiRegion Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<SkiRegion> {
            return CommonApiFp(configuration).commonGetSkiRegionSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET SkiRegion Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetSkiRegionSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<SkiRegionLocalized> {
            return CommonApiFp(configuration).commonGetSkiRegionSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET TourismAssociation List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismverein(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<Tourismverein>> {
            return CommonApiFp(configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET TourismAssociation Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<TourismvereinLocalized>> {
            return CommonApiFp(configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET TourismAssociation Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<CommonReduced>> {
            return CommonApiFp(configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET TourismAssociation Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Tourismverein> {
            return CommonApiFp(configuration).commonGetTourismvereinSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET TourismAssociation Localized Single
         * @param {string} id ID of the requested data
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetTourismvereinSingleLocalized(id: string, language?: string, options?: any): AxiosPromise<TourismvereinLocalized> {
            return CommonApiFp(configuration).commonGetTourismvereinSingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Wine Awards List
         * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
         * @param {string} [wineid] WineId
         * @param {string} [companyid] Company Id
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetWineAwardsList(elements?: number, wineid?: string, companyid?: string, fields?: string, language?: string, options?: any): AxiosPromise<Array<Wine>> {
            return CommonApiFp(configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Wine Award Single
         * @param {string} id ID of the requested data
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonGetWineAwardsSingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Wine> {
            return CommonApiFp(configuration).commonGetWineAwardsSingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * 
     * @summary GET Area Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetAreaSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetAreaSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Area List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetAreas(elements?: number, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetAreas(elements, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetDistrict(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetDistrictLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetDistrictReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetDistrictSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetDistrictSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetDistrictSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetDistrictSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ExperienceArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetExperienceAreaSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetExperienceAreaSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ExperienceArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetExperienceAreaSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetExperienceAreaSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Experiencearea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetExperienceAreas(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ExperienceArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetExperienceAreasLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ExperienceArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetExperienceAreasReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET MetaRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMetaRegionSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMetaRegionSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET MetaRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMetaRegionSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMetaRegionSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET MetaRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMetaRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET MetaRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMetaRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET MetaRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMetaRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Municipality List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMunicipality(elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Municipality Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMunicipalityLocalized(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Municipality Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMunicipalityReduced(language?: string, elements?: number, visibleinsearch?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Municipality Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMunicipalitySingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMunicipalitySingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Municipality Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetMunicipalitySingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetMunicipalitySingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Region Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetRegionSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetRegionSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Region Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetRegionSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetRegionSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Region List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetRegions(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Region Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetRegionsLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Region Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetRegionsReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiArea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiArea(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiAreaLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiAreaReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiAreaSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiAreaSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiAreaSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiAreaSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiRegion(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiRegionLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiRegionReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiRegionSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiRegionSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET SkiRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetSkiRegionSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetSkiRegionSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET TourismAssociation List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetTourismverein(elements?: number, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET TourismAssociation Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetTourismvereinLocalized(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET TourismAssociation Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetTourismvereinReduced(language?: string, elements?: number, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET TourismAssociation Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetTourismvereinSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetTourismvereinSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET TourismAssociation Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetTourismvereinSingleLocalized(id: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetTourismvereinSingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Wine Awards List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [wineid] WineId
     * @param {string} [companyid] Company Id
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetWineAwardsList(elements?: number, wineid?: string, companyid?: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Wine Award Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonGetWineAwardsSingle(id: string, fields?: string, language?: string, options?: any) {
        return CommonApiFp(this.configuration).commonGetWineAwardsSingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
}
