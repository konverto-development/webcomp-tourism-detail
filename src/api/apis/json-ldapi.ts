/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * JsonLDApi - axios parameter creator
 * @export
 */
export const JsonLDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
         * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
         * @param {string} id ID of the data to transform, required
         * @param {string} [language] Output Language, standard EN
         * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
         * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
         * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
         * @param {boolean} [showid] Show the @id property in Json LD default value true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jsonLDGetDetailInLD: async (type: string, id: string, language?: string, idtoshow?: string, urltoshow?: string, imageurltoshow?: string, showid?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling jsonLDGetDetailInLD.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling jsonLDGetDetailInLD.');
            }
            const localVarPath = `/api/JsonLD/DetailInLD`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (idtoshow !== undefined) {
                localVarQueryParameter['idtoshow'] = idtoshow;
            }

            if (urltoshow !== undefined) {
                localVarQueryParameter['urltoshow'] = urltoshow;
            }

            if (imageurltoshow !== undefined) {
                localVarQueryParameter['imageurltoshow'] = imageurltoshow;
            }

            if (showid !== undefined) {
                localVarQueryParameter['showid'] = showid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JsonLDApi - functional programming interface
 * @export
 */
export const JsonLDApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
         * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
         * @param {string} id ID of the data to transform, required
         * @param {string} [language] Output Language, standard EN
         * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
         * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
         * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
         * @param {boolean} [showid] Show the @id property in Json LD default value true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jsonLDGetDetailInLD(type: string, id: string, language?: string, idtoshow?: string, urltoshow?: string, imageurltoshow?: string, showid?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await JsonLDApiAxiosParamCreator(configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JsonLDApi - factory interface
 * @export
 */
export const JsonLDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
         * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
         * @param {string} id ID of the data to transform, required
         * @param {string} [language] Output Language, standard EN
         * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
         * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
         * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
         * @param {boolean} [showid] Show the @id property in Json LD default value true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jsonLDGetDetailInLD(type: string, id: string, language?: string, idtoshow?: string, urltoshow?: string, imageurltoshow?: string, showid?: boolean, options?: any): AxiosPromise<any> {
            return JsonLDApiFp(configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JsonLDApi - object-oriented interface
 * @export
 * @class JsonLDApi
 * @extends {BaseAPI}
 */
export class JsonLDApi extends BaseAPI {
    /**
     * 
     * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
     * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
     * @param {string} id ID of the data to transform, required
     * @param {string} [language] Output Language, standard EN
     * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
     * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
     * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
     * @param {boolean} [showid] Show the @id property in Json LD default value true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JsonLDApi
     */
    public jsonLDGetDetailInLD(type: string, id: string, language?: string, idtoshow?: string, urltoshow?: string, imageurltoshow?: string, showid?: boolean, options?: any) {
        return JsonLDApiFp(this.configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options).then((request) => request(this.axios, this.basePath));
    }
}
