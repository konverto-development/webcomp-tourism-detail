/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccoFeatures } from '../models';
import { AccoRoom } from '../models';
import { AccoTypes } from '../models';
import { Accommodation } from '../models';
import { AccommodationLocalized } from '../models';
import { AccommodationReduced } from '../models';
import { MssResponseShort } from '../models';
/**
 * AccommodationApi - axios parameter creator
 * @export
 */
export const AccommodationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Accommodation Room Info by AccoID
         * @param {string} accoid Accommodation ID
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccoRoomInfos: async (accoid: string, idsource?: string, getall?: boolean, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accoid' is not null or undefined
            if (accoid === null || accoid === undefined) {
                throw new RequiredError('accoid','Required parameter accoid was null or undefined when calling accommodationGetAccoRoomInfos.');
            }
            const localVarPath = `/api/AccommodationRoom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (accoid !== undefined) {
                localVarQueryParameter['accoid'] = accoid;
            }

            if (idsource !== undefined) {
                localVarQueryParameter['idsource'] = idsource;
            }

            if (getall !== undefined) {
                localVarQueryParameter['getall'] = getall;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Room Info Single
         * @param {string} id AccommodationRoom ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccoRoomInfosById: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accommodationGetAccoRoomInfosById.');
            }
            const localVarPath = `/api/AccommodationRoom/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Single
         * @param {string} id ID of the Accommodation
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodation: async (id: string, idsource?: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accommodationGetAccommodation.');
            }
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (idsource !== undefined) {
                localVarQueryParameter['idsource'] = idsource;
            }

            if (availabilitychecklanguage !== undefined) {
                localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (arrival !== undefined) {
                localVarQueryParameter['arrival'] = arrival;
            }

            if (departure !== undefined) {
                localVarQueryParameter['departure'] = departure;
            }

            if (roominfo !== undefined) {
                localVarQueryParameter['roominfo'] = roominfo;
            }

            if (bokfilter !== undefined) {
                localVarQueryParameter['bokfilter'] = bokfilter;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (availabilitycheck !== undefined) {
                localVarQueryParameter['availabilitycheck'] = availabilitycheck;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Single Localized
         * @param {string} id ID of the Accommodation
         * @param {string} [language] Localization Language
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodationLocalized: async (id: string, language?: string, idsource?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accommodationGetAccommodationLocalized.');
            }
            const localVarPath = `/api/AccommodationLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (idsource !== undefined) {
                localVarQueryParameter['idsource'] = idsource;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (arrival !== undefined) {
                localVarQueryParameter['arrival'] = arrival;
            }

            if (departure !== undefined) {
                localVarQueryParameter['departure'] = departure;
            }

            if (roominfo !== undefined) {
                localVarQueryParameter['roominfo'] = roominfo;
            }

            if (bokfilter !== undefined) {
                localVarQueryParameter['bokfilter'] = bokfilter;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (availabilitycheck !== undefined) {
                localVarQueryParameter['availabilitycheck'] = availabilitycheck;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodations: async (pagenumber?: number, pagesize?: number, seed?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitychecklanguage?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accommodation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (categoryfilter !== undefined) {
                localVarQueryParameter['categoryfilter'] = categoryfilter;
            }

            if (typefilter !== undefined) {
                localVarQueryParameter['typefilter'] = typefilter;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (featurefilter !== undefined) {
                localVarQueryParameter['featurefilter'] = featurefilter;
            }

            if (featureidfilter !== undefined) {
                localVarQueryParameter['featureidfilter'] = featureidfilter;
            }

            if (themefilter !== undefined) {
                localVarQueryParameter['themefilter'] = themefilter;
            }

            if (badgefilter !== undefined) {
                localVarQueryParameter['badgefilter'] = badgefilter;
            }

            if (idfilter !== undefined) {
                localVarQueryParameter['idfilter'] = idfilter;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (arrival !== undefined) {
                localVarQueryParameter['arrival'] = arrival;
            }

            if (departure !== undefined) {
                localVarQueryParameter['departure'] = departure;
            }

            if (roominfo !== undefined) {
                localVarQueryParameter['roominfo'] = roominfo;
            }

            if (bokfilter !== undefined) {
                localVarQueryParameter['bokfilter'] = bokfilter;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (availabilitychecklanguage !== undefined) {
                localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
            }

            if (availabilitycheck !== undefined) {
                localVarQueryParameter['availabilitycheck'] = availabilitycheck;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation List Localized
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodationsLocalized: async (pagenumber?: number, pagesize?: number, seed?: string, language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AccommodationLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (categoryfilter !== undefined) {
                localVarQueryParameter['categoryfilter'] = categoryfilter;
            }

            if (typefilter !== undefined) {
                localVarQueryParameter['typefilter'] = typefilter;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (featurefilter !== undefined) {
                localVarQueryParameter['featurefilter'] = featurefilter;
            }

            if (themefilter !== undefined) {
                localVarQueryParameter['themefilter'] = themefilter;
            }

            if (badgefilter !== undefined) {
                localVarQueryParameter['badgefilter'] = badgefilter;
            }

            if (idfilter !== undefined) {
                localVarQueryParameter['idfilter'] = idfilter;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (arrival !== undefined) {
                localVarQueryParameter['arrival'] = arrival;
            }

            if (departure !== undefined) {
                localVarQueryParameter['departure'] = departure;
            }

            if (roominfo !== undefined) {
                localVarQueryParameter['roominfo'] = roominfo;
            }

            if (bokfilter !== undefined) {
                localVarQueryParameter['bokfilter'] = bokfilter;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (availabilitycheck !== undefined) {
                localVarQueryParameter['availabilitycheck'] = availabilitycheck;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Feature List (LTS Features)
         * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationFeaturesList: async (source?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AccommodationFeatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Feature Single (LTS Features)
         * @param {string} id ID of the AccommodationFeature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationFeaturesSingle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accommodationGetAllAccommodationFeaturesSingle.');
            }
            const localVarPath = `/api/AccommodationFeatures/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationTypesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AccommodationTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Types Single
         * @param {string} id ID of the AccommodationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationTypessingle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accommodationGetAllAccommodationTypessingle.');
            }
            const localVarPath = `/api/AccommodationTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Accommodation Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationsChanged: async (pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AccommodationChanged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Reduced Accommodation List
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {boolean} [suedtirolmobil] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetReducedAccosAsync: async (language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, suedtirolmobil?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/AccommodationReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (categoryfilter !== undefined) {
                localVarQueryParameter['categoryfilter'] = categoryfilter;
            }

            if (typefilter !== undefined) {
                localVarQueryParameter['typefilter'] = typefilter;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (featurefilter !== undefined) {
                localVarQueryParameter['featurefilter'] = featurefilter;
            }

            if (featureidfilter !== undefined) {
                localVarQueryParameter['featureidfilter'] = featureidfilter;
            }

            if (themefilter !== undefined) {
                localVarQueryParameter['themefilter'] = themefilter;
            }

            if (badgefilter !== undefined) {
                localVarQueryParameter['badgefilter'] = badgefilter;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (suedtirolmobil !== undefined) {
                localVarQueryParameter['suedtirolmobil'] = suedtirolmobil;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
         * @param {string} body Posted Accommodation IDs (Separated by ,)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
         * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; SÃ¼dtirol Balance) REQUIRED
         * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
         * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
         * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationPostAvailableMSSResponseonlyAccommodations: async (body: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, detail?: string, withoutmssids?: boolean, withoutlcsids?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accommodationPostAvailableMSSResponseonlyAccommodations.');
            }
            const localVarPath = `/api/AvailabilityCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (availabilitychecklanguage !== undefined) {
                localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
            }

            if (boardfilter !== undefined) {
                localVarQueryParameter['boardfilter'] = boardfilter;
            }

            if (arrival !== undefined) {
                localVarQueryParameter['arrival'] = arrival;
            }

            if (departure !== undefined) {
                localVarQueryParameter['departure'] = departure;
            }

            if (roominfo !== undefined) {
                localVarQueryParameter['roominfo'] = roominfo;
            }

            if (bokfilter !== undefined) {
                localVarQueryParameter['bokfilter'] = bokfilter;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (detail !== undefined) {
                localVarQueryParameter['detail'] = detail;
            }

            if (withoutmssids !== undefined) {
                localVarQueryParameter['withoutmssids'] = withoutmssids;
            }

            if (withoutlcsids !== undefined) {
                localVarQueryParameter['withoutlcsids'] = withoutlcsids;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccommodationApi - functional programming interface
 * @export
 */
export const AccommodationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Accommodation Room Info by AccoID
         * @param {string} accoid Accommodation ID
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccoRoomInfos(accoid: string, idsource?: string, getall?: boolean, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccoRoom>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Room Info Single
         * @param {string} id AccommodationRoom ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccoRoomInfosById(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccoRoom>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccoRoomInfosById(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Single
         * @param {string} id ID of the Accommodation
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccommodation(id: string, idsource?: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accommodation>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Single Localized
         * @param {string} id ID of the Accommodation
         * @param {string} [language] Localization Language
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccommodationLocalized(id: string, language?: string, idsource?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationLocalized>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccommodations(pagenumber?: number, pagesize?: number, seed?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitychecklanguage?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Accommodation>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation List Localized
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAccommodationsLocalized(pagenumber?: number, pagesize?: number, seed?: string, language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccommodationLocalized>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Feature List (LTS Features)
         * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAllAccommodationFeaturesList(source?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccoFeatures>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationFeaturesList(source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Feature Single (LTS Features)
         * @param {string} id ID of the AccommodationFeature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAllAccommodationFeaturesSingle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccoFeatures>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationFeaturesSingle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAllAccommodationTypesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccoTypes>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationTypesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Types Single
         * @param {string} id ID of the AccommodationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAllAccommodationTypessingle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccoTypes>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationTypessingle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Accommodation Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetAllAccommodationsChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Accommodation>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Reduced Accommodation List
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {boolean} [suedtirolmobil] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationGetReducedAccosAsync(language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, suedtirolmobil?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccommodationReduced>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
         * @param {string} body Posted Accommodation IDs (Separated by ,)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
         * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; SÃ¼dtirol Balance) REQUIRED
         * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
         * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
         * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accommodationPostAvailableMSSResponseonlyAccommodations(body: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, detail?: string, withoutmssids?: boolean, withoutlcsids?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MssResponseShort>>> {
            const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccommodationApi - factory interface
 * @export
 */
export const AccommodationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Accommodation Room Info by AccoID
         * @param {string} accoid Accommodation ID
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccoRoomInfos(accoid: string, idsource?: string, getall?: boolean, fields?: string, language?: string, options?: any): AxiosPromise<Array<AccoRoom>> {
            return AccommodationApiFp(configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Room Info Single
         * @param {string} id AccommodationRoom ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccoRoomInfosById(id: string, fields?: string, language?: string, options?: any): AxiosPromise<AccoRoom> {
            return AccommodationApiFp(configuration).accommodationGetAccoRoomInfosById(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Single
         * @param {string} id ID of the Accommodation
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodation(id: string, idsource?: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, fields?: string, language?: string, options?: any): AxiosPromise<Accommodation> {
            return AccommodationApiFp(configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Single Localized
         * @param {string} id ID of the Accommodation
         * @param {string} [language] Localization Language
         * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodationLocalized(id: string, language?: string, idsource?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, options?: any): AxiosPromise<AccommodationLocalized> {
            return AccommodationApiFp(configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodations(pagenumber?: number, pagesize?: number, seed?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitychecklanguage?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): AxiosPromise<Array<Accommodation>> {
            return AccommodationApiFp(configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation List Localized
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
         * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
         * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAccommodationsLocalized(pagenumber?: number, pagesize?: number, seed?: string, language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<AccommodationLocalized>> {
            return AccommodationApiFp(configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Feature List (LTS Features)
         * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationFeaturesList(source?: string, options?: any): AxiosPromise<Array<AccoFeatures>> {
            return AccommodationApiFp(configuration).accommodationGetAllAccommodationFeaturesList(source, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Feature Single (LTS Features)
         * @param {string} id ID of the AccommodationFeature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationFeaturesSingle(id: string, options?: any): AxiosPromise<AccoFeatures> {
            return AccommodationApiFp(configuration).accommodationGetAllAccommodationFeaturesSingle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationTypesList(options?: any): AxiosPromise<Array<AccoTypes>> {
            return AccommodationApiFp(configuration).accommodationGetAllAccommodationTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Types Single
         * @param {string} id ID of the AccommodationType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationTypessingle(id: string, options?: any): AxiosPromise<AccoTypes> {
            return AccommodationApiFp(configuration).accommodationGetAllAccommodationTypessingle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Accommodation Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetAllAccommodationsChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): AxiosPromise<Array<Accommodation>> {
            return AccommodationApiFp(configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Reduced Accommodation List
         * @param {string} [language] Localization Language
         * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
         * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {boolean} [suedtirolmobil] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationGetReducedAccosAsync(language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, suedtirolmobil?: boolean, options?: any): AxiosPromise<Array<AccommodationReduced>> {
            return AccommodationApiFp(configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
         * @param {string} body Posted Accommodation IDs (Separated by ,)
         * @param {string} [availabilitychecklanguage] Language of the Availability Response
         * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
         * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
         * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
         * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
         * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; SÃ¼dtirol Balance) REQUIRED
         * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
         * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
         * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accommodationPostAvailableMSSResponseonlyAccommodations(body: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, detail?: string, withoutmssids?: boolean, withoutlcsids?: boolean, options?: any): AxiosPromise<Array<MssResponseShort>> {
            return AccommodationApiFp(configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccommodationApi - object-oriented interface
 * @export
 * @class AccommodationApi
 * @extends {BaseAPI}
 */
export class AccommodationApi extends BaseAPI {
    /**
     * 
     * @summary GET Accommodation Room Info by AccoID
     * @param {string} accoid Accommodation ID
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccoRoomInfos(accoid: string, idsource?: string, getall?: boolean, fields?: string, language?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Room Info Single
     * @param {string} id AccommodationRoom ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccoRoomInfosById(id: string, fields?: string, language?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccoRoomInfosById(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Single
     * @param {string} id ID of the Accommodation
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccommodation(id: string, idsource?: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, fields?: string, language?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Single Localized
     * @param {string} id ID of the Accommodation
     * @param {string} [language] Localization Language
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccommodationLocalized(id: string, language?: string, idsource?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccommodations(pagenumber?: number, pagesize?: number, seed?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitychecklanguage?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation List Localized
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAccommodationsLocalized(pagenumber?: number, pagesize?: number, seed?: string, language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, themefilter?: string, badgefilter?: string, idfilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, availabilitycheck?: boolean, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Feature List (LTS Features)
     * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAllAccommodationFeaturesList(source?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationFeaturesList(source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Feature Single (LTS Features)
     * @param {string} id ID of the AccommodationFeature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAllAccommodationFeaturesSingle(id: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationFeaturesSingle(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAllAccommodationTypesList(options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationTypesList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Types Single
     * @param {string} id ID of the AccommodationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAllAccommodationTypessingle(id: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationTypessingle(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Accommodation Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetAllAccommodationsChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Reduced Accommodation List
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationGetReducedAccosAsync(language?: string, categoryfilter?: string, typefilter?: string, boardfilter?: string, featurefilter?: string, featureidfilter?: string, themefilter?: string, badgefilter?: string, locfilter?: string, odhtagfilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, suedtirolmobil?: boolean, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
     * @param {string} body Posted Accommodation IDs (Separated by ,)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking SÃ¼dtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
     * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; SÃ¼dtirol Balance) REQUIRED
     * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
     * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
     * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public accommodationPostAvailableMSSResponseonlyAccommodations(body: string, availabilitychecklanguage?: string, boardfilter?: string, arrival?: string, departure?: string, roominfo?: string, bokfilter?: string, source?: string, detail?: string, withoutmssids?: boolean, withoutlcsids?: boolean, options?: any) {
        return AccommodationApiFp(this.configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options).then((request) => request(this.axios, this.basePath));
    }
}
