/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BezirksWeather } from '../models';
import { Measuringpoint } from '../models';
import { SnowReportBaseData } from '../models';
import { Weather } from '../models';
import { WeatherRealTime } from '../models';
/**
 * WeatherApi - axios parameter creator
 * @export
 */
export const WeatherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetApiWeatherSnowReport: async (lang?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Weather/SnowReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE (Opendata)
         * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetDistrictWeather: async (locfilter: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locfilter' is not null or undefined
            if (locfilter === null || locfilter === undefined) {
                throw new RequiredError('locfilter','Required parameter locfilter was null or undefined when calling weatherGetDistrictWeather.');
            }
            const localVarPath = `/api/Weather/District`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [table] 
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetMeasuringPoint: async (id: string, fields?: string, table?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling weatherGetMeasuringPoint.');
            }
            const localVarPath = `/api/Weather/Measuringpoint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (table !== undefined) {
                localVarQueryParameter['table'] = table;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Measuringpoint LIST (Opendata)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetMeasuringPoints: async (idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Weather/Measuringpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (areafilter !== undefined) {
                localVarQueryParameter['areafilter'] = areafilter;
            }

            if (skiareafilter !== undefined) {
                localVarQueryParameter['skiareafilter'] = skiareafilter;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetRealtimeWeather: async (language?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Weather/Realtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE by Skiarea
         * @param {string} skiareaid Skiarea ID
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetSnowReportBase: async (skiareaid: string, lang?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'skiareaid' is not null or undefined
            if (skiareaid === null || skiareaid === undefined) {
                throw new RequiredError('skiareaid','Required parameter skiareaid was null or undefined when calling weatherGetSnowReportBase.');
            }
            const localVarPath = `/api/Weather/SnowReport/{skiareaid}`
                .replace(`{${"skiareaid"}}`, encodeURIComponent(String(skiareaid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE (Opendata)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetWeather: async (language?: string, locfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Weather`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherApi - functional programming interface
 * @export
 */
export const WeatherApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetApiWeatherSnowReport(lang?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SnowReportBaseData>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetApiWeatherSnowReport(lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET District Weather LIVE (Opendata)
         * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetDistrictWeather(locfilter: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BezirksWeather>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetDistrictWeather(locfilter, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [table] 
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetMeasuringPoint(id: string, fields?: string, table?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Measuringpoint>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetMeasuringPoint(id, fields, table, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Measuringpoint LIST (Opendata)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetMeasuringPoints(idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Measuringpoint>>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetRealtimeWeather(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherRealTime>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetRealtimeWeather(language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE by Skiarea
         * @param {string} skiareaid Skiarea ID
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetSnowReportBase(skiareaid: string, lang?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnowReportBaseData>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetSnowReportBase(skiareaid, lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE (Opendata)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherGetWeather(language?: string, locfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Weather>> {
            const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetWeather(language, locfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WeatherApi - factory interface
 * @export
 */
export const WeatherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Snowreport Data LIVE
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetApiWeatherSnowReport(lang?: string, options?: any): AxiosPromise<Array<SnowReportBaseData>> {
            return WeatherApiFp(configuration).weatherGetApiWeatherSnowReport(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET District Weather LIVE (Opendata)
         * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetDistrictWeather(locfilter: string, language?: string, options?: any): AxiosPromise<BezirksWeather> {
            return WeatherApiFp(configuration).weatherGetDistrictWeather(locfilter, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Measuringpoint SINGLE
         * @param {string} id Measuringpoint ID
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [table] 
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetMeasuringPoint(id: string, fields?: string, table?: string, language?: string, options?: any): AxiosPromise<Measuringpoint> {
            return WeatherApiFp(configuration).weatherGetMeasuringPoint(id, fields, table, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Measuringpoint LIST (Opendata)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [skiareafilter] Skiarea ID
         * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetMeasuringPoints(idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): AxiosPromise<Array<Measuringpoint>> {
            return WeatherApiFp(configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Realtime Weather LIVE
         * @param {string} [language] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetRealtimeWeather(language?: string, options?: any): AxiosPromise<WeatherRealTime> {
            return WeatherApiFp(configuration).weatherGetRealtimeWeather(language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Snowreport Data LIVE by Skiarea
         * @param {string} skiareaid Skiarea ID
         * @param {string} [lang] Language available de,it,en, default: en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetSnowReportBase(skiareaid: string, lang?: string, options?: any): AxiosPromise<SnowReportBaseData> {
            return WeatherApiFp(configuration).weatherGetSnowReportBase(skiareaid, lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Current Suedtirol Weather LIVE (Opendata)
         * @param {string} [language] Language available de,it,en, default: en
         * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherGetWeather(language?: string, locfilter?: string, options?: any): AxiosPromise<Weather> {
            return WeatherApiFp(configuration).weatherGetWeather(language, locfilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherApi - object-oriented interface
 * @export
 * @class WeatherApi
 * @extends {BaseAPI}
 */
export class WeatherApi extends BaseAPI {
    /**
     * 
     * @summary GET Snowreport Data LIVE
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetApiWeatherSnowReport(lang?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetApiWeatherSnowReport(lang, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET District Weather LIVE (Opendata)
     * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetDistrictWeather(locfilter: string, language?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetDistrictWeather(locfilter, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Measuringpoint SINGLE
     * @param {string} id Measuringpoint ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [table] 
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetMeasuringPoint(id: string, fields?: string, table?: string, language?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetMeasuringPoint(id, fields, table, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Measuringpoint LIST (Opendata)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [skiareafilter] Skiarea ID
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetMeasuringPoints(idlist?: string, locfilter?: string, areafilter?: string, skiareafilter?: string, odhactive?: boolean, active?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Realtime Weather LIVE
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetRealtimeWeather(language?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetRealtimeWeather(language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Snowreport Data LIVE by Skiarea
     * @param {string} skiareaid Skiarea ID
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetSnowReportBase(skiareaid: string, lang?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetSnowReportBase(skiareaid, lang, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Current Suedtirol Weather LIVE (Opendata)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherApi
     */
    public weatherGetWeather(language?: string, locfilter?: string, options?: any) {
        return WeatherApiFp(this.configuration).weatherGetWeather(language, locfilter, options).then((request) => request(this.axios, this.basePath));
    }
}
