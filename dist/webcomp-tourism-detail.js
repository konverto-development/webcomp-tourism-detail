/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "5a74");
/******/ })
/************************************************************************/
/******/ ({

/***/ "00ee":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "0366":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("1c0b");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "06cf":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createPropertyDescriptor = __webpack_require__("5c6c");
var toIndexedObject = __webpack_require__("fc6a");
var toPrimitive = __webpack_require__("c04e");
var has = __webpack_require__("5135");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "06d0":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/gastro-placeholder.bfc14787.svg";

/***/ }),

/***/ "084f":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".modal[data-v-530dccbf]{display:flex;position:fixed;z-index:1;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:#000;background-color:rgba(0,0,0,.9)}.modal-content[data-v-530dccbf]{margin:auto;display:block;width:80%;max-width:1200px;height:100%}.img-content[data-v-530dccbf]{max-width:80%}.modal-content[data-v-530dccbf]{-webkit-animation-name:zoom-data-v-530dccbf;-webkit-animation-duration:.6s;animation-name:zoom-data-v-530dccbf;animation-duration:.6s}@-webkit-keyframes zoom-data-v-530dccbf{0%{-webkit-transform:scale(0)}to{-webkit-transform:scale(1)}}@keyframes zoom-data-v-530dccbf{0%{transform:scale(0)}to{transform:scale(1)}}.close[data-v-530dccbf]{position:absolute;top:15px;right:35px;color:#f1f1f1;font-size:40px;font-weight:700;transition:.3s}.close[data-v-530dccbf]:focus,.close[data-v-530dccbf]:hover{color:#bbb;text-decoration:none;cursor:pointer}@media only screen and (max-width:700px){.modal-content[data-v-530dccbf]{width:100%}.img-content[data-v-530dccbf]{max-width:100%}}.img-button[data-v-530dccbf]{width:50px;text-align:center;background-color:rgba(0,0,0,.3);height:50px;border-radius:25px;margin:8px}.img-button[data-v-530dccbf]:hover{background-color:rgba(0,0,0,.7)}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "0a06":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var buildURL = __webpack_require__("30b5");
var InterceptorManager = __webpack_require__("f6b4");
var dispatchRequest = __webpack_require__("5270");
var mergeConfig = __webpack_require__("4a7b");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "0cfb":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var createElement = __webpack_require__("cc12");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "0d3b":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "0df6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "0e09":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_phone.3f26b1f3.svg";

/***/ }),

/***/ "0e40":
/***/ (function(module) {

module.exports = JSON.parse("{}");

/***/ }),

/***/ "14c3":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");
var regexpExec = __webpack_require__("9263");

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),

/***/ "1649":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_calendar.5723461a.svg";

/***/ }),

/***/ "1717":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_altitudehighestpoint.75c06886.svg";

/***/ }),

/***/ "19aa":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};


/***/ }),

/***/ "1be4":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "1c0b":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "1d2b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "1d80":
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "2083":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f457");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "23cb":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "23e7":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var setGlobal = __webpack_require__("ce4e");
var copyConstructorProperties = __webpack_require__("e893");
var isForced = __webpack_require__("94ca");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "241c":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "2444":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__("c532");
var normalizeHeaderName = __webpack_require__("c8af");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__("b50d");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__("b50d");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "24fb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "2570":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Paging_vue_vue_type_style_index_0_id_356619ac_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("5903");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Paging_vue_vue_type_style_index_0_id_356619ac_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Paging_vue_vue_type_style_index_0_id_356619ac_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Paging_vue_vue_type_style_index_0_id_356619ac_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Paging_vue_vue_type_style_index_0_id_356619ac_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "274c":
/***/ (function(module) {

module.exports = JSON.parse("{}");

/***/ }),

/***/ "2876":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageDetail_vue_vue_type_style_index_0_id_530dccbf_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("494f");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageDetail_vue_vue_type_style_index_0_id_530dccbf_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageDetail_vue_vue_type_style_index_0_id_530dccbf_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageDetail_vue_vue_type_style_index_0_id_530dccbf_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageDetail_vue_vue_type_style_index_0_id_530dccbf_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "2a62":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");

module.exports = function (iterator) {
  var returnMethod = iterator['return'];
  if (returnMethod !== undefined) {
    return anObject(returnMethod.call(iterator)).value;
  }
};


/***/ }),

/***/ "2b3d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("3ca3");
var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var global = __webpack_require__("da84");
var defineProperties = __webpack_require__("37e8");
var redefine = __webpack_require__("6eeb");
var anInstance = __webpack_require__("19aa");
var has = __webpack_require__("5135");
var assign = __webpack_require__("60da");
var arrayFrom = __webpack_require__("4df4");
var codeAt = __webpack_require__("6547").codeAt;
var toASCII = __webpack_require__("5fb2");
var setToStringTag = __webpack_require__("d44e");
var URLSearchParamsModule = __webpack_require__("9861");
var InternalStateModule = __webpack_require__("69f3");

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "2d83":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__("387f");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "2e67":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "30b5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "35a1":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("f5df");
var Iterators = __webpack_require__("3f8c");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "35d6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* binding */ addStylesToShadowDOM; });

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js
/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesShadow.js


function addStylesToShadowDOM (parentId, list, shadowRoot) {
  var styles = listToStyles(parentId, list)
  addStyles(styles, shadowRoot)
}

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

function addStyles (styles /* Array<StyleObject> */, shadowRoot) {
  const injectedStyles =
    shadowRoot._injectedStyles ||
    (shadowRoot._injectedStyles = {})
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var style = injectedStyles[item.id]
    if (!style) {
      for (var j = 0; j < item.parts.length; j++) {
        addStyle(item.parts[j], shadowRoot)
      }
      injectedStyles[item.id] = true
    }
  }
}

function createStyleElement (shadowRoot) {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  shadowRoot.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */, shadowRoot) {
  var styleElement = createStyleElement(shadowRoot)
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),

/***/ "37e8":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var anObject = __webpack_require__("825a");
var objectKeys = __webpack_require__("df75");

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),

/***/ "387f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "3934":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "3bbe":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),

/***/ "3ca3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "3f8c":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "428f":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = global;


/***/ }),

/***/ "42c6":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_altitudelowestpoint.a6de25d4.svg";

/***/ }),

/***/ "4362":
/***/ (function(module, exports, __webpack_require__) {

exports.nextTick = function nextTick(fn) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    setTimeout(function () {
        fn.apply(null, args);
    }, 0);
};

exports.platform = exports.arch = 
exports.execPath = exports.title = 'browser';
exports.pid = 1;
exports.browser = true;
exports.env = {};
exports.argv = [];

exports.binding = function (name) {
	throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    exports.cwd = function () { return cwd };
    exports.chdir = function (dir) {
        if (!path) path = __webpack_require__("df7c");
        cwd = path.resolve(dir, cwd);
    };
})();

exports.exit = exports.kill = 
exports.umask = exports.dlopen = 
exports.uptime = exports.memoryUsage = 
exports.uvCounters = function() {};
exports.features = {};


/***/ }),

/***/ "44ad":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "44d2":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var create = __webpack_require__("7c73");
var definePropertyModule = __webpack_require__("9bf2");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "467f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__("2d83");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "4930":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "494f":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("084f");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("7542ea52", content, shadowRoot)
};

/***/ }),

/***/ "4a7b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "4c48":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_difficulty.3a0cafcc.svg";

/***/ }),

/***/ "4d64":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var toLength = __webpack_require__("50c4");
var toAbsoluteIndex = __webpack_require__("23cb");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "4df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bind = __webpack_require__("0366");
var toObject = __webpack_require__("7b0b");
var callWithSafeIterationClosing = __webpack_require__("9bdd");
var isArrayIteratorMethod = __webpack_require__("e95a");
var toLength = __webpack_require__("50c4");
var createProperty = __webpack_require__("8418");
var getIteratorMethod = __webpack_require__("35a1");

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "50c4":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "5135":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "5270":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var transformData = __webpack_require__("c401");
var isCancel = __webpack_require__("2e67");
var defaults = __webpack_require__("2444");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "5319":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");
var advanceStringIndex = __webpack_require__("8aa5");
var regExpExec = __webpack_require__("14c3");

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (
        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
      ) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "5692":
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__("c430");
var store = __webpack_require__("c6cd");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.8.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "56ef":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var anObject = __webpack_require__("825a");

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "5903":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("7fd6");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("11cb508a", content, shadowRoot)
};

/***/ }),

/***/ "5a74":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
// This file is imported into lib/wc client bundles.

if (typeof window !== 'undefined') {
  var currentScript = window.document.currentScript
  if (Object({"NODE_ENV":"production","BASE_URL":"/"}).NEED_CURRENTSCRIPT_POLYFILL) {
    var getCurrentScript = __webpack_require__("8875")
    currentScript = getCurrentScript()

    // for backward compatibility, because previously we directly included the polyfill
    if (!('currentScript' in document)) {
      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })
    }
  }

  var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)
  if (src) {
    __webpack_require__.p = src[1] // eslint-disable-line
  }
}

// Indicate to webpack that this file can be concatenated
/* harmony default export */ var setPublicPath = (null);

// EXTERNAL MODULE: external "Vue"
var external_Vue_ = __webpack_require__("8bbf");
var external_Vue_default = /*#__PURE__*/__webpack_require__.n(external_Vue_);

// CONCATENATED MODULE: ./node_modules/@vue/web-component-wrapper/dist/vue-wc-wrapper.js
const camelizeRE = /-(\w)/g;
const camelize = str => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')
};

const hyphenateRE = /\B([A-Z])/g;
const hyphenate = str => {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
};

function getInitialProps (propsList) {
  const res = {};
  propsList.forEach(key => {
    res[key] = undefined;
  });
  return res
}

function injectHook (options, key, hook) {
  options[key] = [].concat(options[key] || []);
  options[key].unshift(hook);
}

function callHooks (vm, hook) {
  if (vm) {
    const hooks = vm.$options[hook] || [];
    hooks.forEach(hook => {
      hook.call(vm);
    });
  }
}

function createCustomEvent (name, args) {
  return new CustomEvent(name, {
    bubbles: false,
    cancelable: false,
    detail: args
  })
}

const isBoolean = val => /function Boolean/.test(String(val));
const isNumber = val => /function Number/.test(String(val));

function convertAttributeValue (value, name, { type } = {}) {
  if (isBoolean(type)) {
    if (value === 'true' || value === 'false') {
      return value === 'true'
    }
    if (value === '' || value === name) {
      return true
    }
    return value != null
  } else if (isNumber(type)) {
    const parsed = parseFloat(value, 10);
    return isNaN(parsed) ? value : parsed
  } else {
    return value
  }
}

function toVNodes (h, children) {
  const res = [];
  for (let i = 0, l = children.length; i < l; i++) {
    res.push(toVNode(h, children[i]));
  }
  return res
}

function toVNode (h, node) {
  if (node.nodeType === 3) {
    return node.data.trim() ? node.data : null
  } else if (node.nodeType === 1) {
    const data = {
      attrs: getAttributes(node),
      domProps: {
        innerHTML: node.innerHTML
      }
    };
    if (data.attrs.slot) {
      data.slot = data.attrs.slot;
      delete data.attrs.slot;
    }
    return h(node.tagName, data)
  } else {
    return null
  }
}

function getAttributes (node) {
  const res = {};
  for (let i = 0, l = node.attributes.length; i < l; i++) {
    const attr = node.attributes[i];
    res[attr.nodeName] = attr.nodeValue;
  }
  return res
}

function wrap (Vue, Component) {
  const isAsync = typeof Component === 'function' && !Component.cid;
  let isInitialized = false;
  let hyphenatedPropsList;
  let camelizedPropsList;
  let camelizedPropsMap;

  function initialize (Component) {
    if (isInitialized) return

    const options = typeof Component === 'function'
      ? Component.options
      : Component;

    // extract props info
    const propsList = Array.isArray(options.props)
      ? options.props
      : Object.keys(options.props || {});
    hyphenatedPropsList = propsList.map(hyphenate);
    camelizedPropsList = propsList.map(camelize);
    const originalPropsAsObject = Array.isArray(options.props) ? {} : options.props || {};
    camelizedPropsMap = camelizedPropsList.reduce((map, key, i) => {
      map[key] = originalPropsAsObject[propsList[i]];
      return map
    }, {});

    // proxy $emit to native DOM events
    injectHook(options, 'beforeCreate', function () {
      const emit = this.$emit;
      this.$emit = (name, ...args) => {
        this.$root.$options.customElement.dispatchEvent(createCustomEvent(name, args));
        return emit.call(this, name, ...args)
      };
    });

    injectHook(options, 'created', function () {
      // sync default props values to wrapper on created
      camelizedPropsList.forEach(key => {
        this.$root.props[key] = this[key];
      });
    });

    // proxy props as Element properties
    camelizedPropsList.forEach(key => {
      Object.defineProperty(CustomElement.prototype, key, {
        get () {
          return this._wrapper.props[key]
        },
        set (newVal) {
          this._wrapper.props[key] = newVal;
        },
        enumerable: false,
        configurable: true
      });
    });

    isInitialized = true;
  }

  function syncAttribute (el, key) {
    const camelized = camelize(key);
    const value = el.hasAttribute(key) ? el.getAttribute(key) : undefined;
    el._wrapper.props[camelized] = convertAttributeValue(
      value,
      key,
      camelizedPropsMap[camelized]
    );
  }

  class CustomElement extends HTMLElement {
    constructor () {
      super();
      this.attachShadow({ mode: 'open' });

      const wrapper = this._wrapper = new Vue({
        name: 'shadow-root',
        customElement: this,
        shadowRoot: this.shadowRoot,
        data () {
          return {
            props: {},
            slotChildren: []
          }
        },
        render (h) {
          return h(Component, {
            ref: 'inner',
            props: this.props
          }, this.slotChildren)
        }
      });

      // Use MutationObserver to react to future attribute & slot content change
      const observer = new MutationObserver(mutations => {
        let hasChildrenChange = false;
        for (let i = 0; i < mutations.length; i++) {
          const m = mutations[i];
          if (isInitialized && m.type === 'attributes' && m.target === this) {
            syncAttribute(this, m.attributeName);
          } else {
            hasChildrenChange = true;
          }
        }
        if (hasChildrenChange) {
          wrapper.slotChildren = Object.freeze(toVNodes(
            wrapper.$createElement,
            this.childNodes
          ));
        }
      });
      observer.observe(this, {
        childList: true,
        subtree: true,
        characterData: true,
        attributes: true
      });
    }

    get vueComponent () {
      return this._wrapper.$refs.inner
    }

    connectedCallback () {
      const wrapper = this._wrapper;
      if (!wrapper._isMounted) {
        // initialize attributes
        const syncInitialAttributes = () => {
          wrapper.props = getInitialProps(camelizedPropsList);
          hyphenatedPropsList.forEach(key => {
            syncAttribute(this, key);
          });
        };

        if (isInitialized) {
          syncInitialAttributes();
        } else {
          // async & unresolved
          Component().then(resolved => {
            if (resolved.__esModule || resolved[Symbol.toStringTag] === 'Module') {
              resolved = resolved.default;
            }
            initialize(resolved);
            syncInitialAttributes();
          });
        }
        // initialize children
        wrapper.slotChildren = Object.freeze(toVNodes(
          wrapper.$createElement,
          this.childNodes
        ));
        wrapper.$mount();
        this.shadowRoot.appendChild(wrapper.$el);
      } else {
        callHooks(this.vueComponent, 'activated');
      }
    }

    disconnectedCallback () {
      callHooks(this.vueComponent, 'deactivated');
    }
  }

  if (!isAsync) {
    initialize(Component);
  }

  return CustomElement
}

/* harmony default export */ var vue_wc_wrapper = (wrap);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/runtime/api.js
var api = __webpack_require__("24fb");

// EXTERNAL MODULE: ./node_modules/vue-style-loader/lib/addStylesShadow.js + 1 modules
var addStylesShadow = __webpack_require__("35d6");

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0eb59858-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=4a9ec026&shadow
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"app"}},[(_vm.detailContentId)?_c('item-detail',{attrs:{"content-id":_vm.detailContentId,"is-list-available":_vm.islistAvailable,"content-type":_vm.contentType,"language":_vm.language},on:{"close":_vm.closeDetail}}):_c('items-list',{attrs:{"language":_vm.language,"contentType":_vm.contentType,"contentIdList":_vm.contentIdList,"pageSize":_vm.pageSize,"category":_vm.category,"currentPage":_vm.currentPage},on:{"show-detail":_vm.showDetail,"change-current-page":_vm.changeCurrentPage}})],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/App.vue?vue&type=template&id=4a9ec026&shadow

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0eb59858-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ItemsList.vue?vue&type=template&id=91f8f1ca&scoped=true&
var ItemsListvue_type_template_id_91f8f1ca_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"list"},[_c('h2',{staticClass:"page-title"},[_vm._v(_vm._s(_vm.$t(_vm.contentType)))]),_c('paging',{attrs:{"current-page":_vm.currentPage,"total-pages":_vm.totalPages},on:{"next-page":_vm.nextPage,"last-page":_vm.lastPage,"go-to-page":_vm.goToPage}}),(_vm.items.length > 0)?_vm._l((_vm.items),function(item){return _c('div',{key:item.id,staticClass:"item-container",on:{"click":function($event){$event.preventDefault();return _vm.showDetail(item.Id)}}},[_c('hr',{staticClass:"solid"}),_c('div',{staticClass:"list-item"},[(item.ImageGallery === null || item.ImageGallery.length === 0)?_c('div',[_c('img',{staticClass:"thumbnail",attrs:{"src":_vm.placeholderImage}})]):_c('div',[_c('img',{staticClass:"thumbnail",attrs:{"src":item.ImageGallery[0].ImageUrl}})]),_c('div',{staticClass:"info"},[_c('div',{staticClass:"title"},[_vm._v(_vm._s(_vm.getTitle(item, _vm.language)))]),(_vm.contentType === 'Gastronomy')?_c('div',{staticClass:"short-info"},[_vm._v(" "+_vm._s(_vm.getGastronomyShortInfo(item))+" ")]):(_vm.contentType === 'Activity')?_c('div',{staticClass:"short-info"},[_vm._v(" "+_vm._s(_vm.getActivityShortInfo(item))+" ")]):(_vm.contentType === 'POI')?_c('div',{staticClass:"short-info"},[_vm._v(" "+_vm._s(_vm.getPoiShortInfo(item))+" ")]):_vm._e()]),_c('img',{attrs:{"src":__webpack_require__("ac9e"),"width":"28","height":"28"}})])])}):(_vm.isLoading)?_c('div',{staticClass:"loading-spinner"},[_c('img',{attrs:{"src":__webpack_require__("f8b2")}})]):_c('div',{staticClass:"noResult"},[_vm._v(_vm._s(_vm.$t('noResults')))]),(_vm.items.length === 1)?_c('div',{staticClass:"item-container"}):_vm._e(),(_vm.items.length > 0)?_c('div',{staticClass:"bottom-divider"},[_c('hr',{staticClass:"solid"})]):_vm._e(),(_vm.items.length > 1)?_c('div',{staticClass:"bottom-divider bottom-divider2"},[_c('hr',{staticClass:"solid"})]):_vm._e(),_c('paging',{attrs:{"current-page":_vm.currentPage,"total-pages":_vm.totalPages},on:{"next-page":_vm.nextPage,"last-page":_vm.lastPage,"go-to-page":_vm.goToPage}})],2)}
var ItemsListvue_type_template_id_91f8f1ca_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/ItemsList.vue?vue&type=template&id=91f8f1ca&scoped=true&

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
var web_dom_collections_iterator = __webpack_require__("ddb0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
var es_string_replace = __webpack_require__("5319");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js
var web_url = __webpack_require__("2b3d");

// EXTERNAL MODULE: ./node_modules/axios/index.js
var node_modules_axios = __webpack_require__("bc3a");
var axios_default = /*#__PURE__*/__webpack_require__.n(node_modules_axios);

// CONCATENATED MODULE: ./src/api/base.ts

// Some imports not used depending on template conditions
// @ts-ignore

const BASE_PATH = "http://tourism.opendatahub.bz.it/".replace(/\/+$/, "");
/**
 *
 * @export
 */

const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|"
};
/**
 *
 * @export
 * @class BaseAPI
 */

class base_BaseAPI {
  constructor(configuration, basePath = BASE_PATH, axios = axios_default.a) {
    this.basePath = basePath;
    this.axios = axios;

    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }

}
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */

class RequiredError extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }

}
// CONCATENATED MODULE: ./src/api/apis/accommodation-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * AccommodationApi - axios parameter creator
 * @export
 */

const AccommodationApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Accommodation Room Info by AccoID
     * @param {string} accoid Accommodation ID
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccoRoomInfos: async (accoid, idsource, getall, fields, language, options = {}) => {
      // verify required parameter 'accoid' is not null or undefined
      if (accoid === null || accoid === undefined) {
        throw new RequiredError('accoid', 'Required parameter accoid was null or undefined when calling accommodationGetAccoRoomInfos.');
      }

      const localVarPath = `/api/AccommodationRoom`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (accoid !== undefined) {
        localVarQueryParameter['accoid'] = accoid;
      }

      if (idsource !== undefined) {
        localVarQueryParameter['idsource'] = idsource;
      }

      if (getall !== undefined) {
        localVarQueryParameter['getall'] = getall;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Room Info Single
     * @param {string} id AccommodationRoom ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccoRoomInfosById: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling accommodationGetAccoRoomInfosById.');
      }

      const localVarPath = `/api/AccommodationRoom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Single
     * @param {string} id ID of the Accommodation
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodation: async (id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling accommodationGetAccommodation.');
      }

      const localVarPath = `/api/Accommodation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (idsource !== undefined) {
        localVarQueryParameter['idsource'] = idsource;
      }

      if (availabilitychecklanguage !== undefined) {
        localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (arrival !== undefined) {
        localVarQueryParameter['arrival'] = arrival;
      }

      if (departure !== undefined) {
        localVarQueryParameter['departure'] = departure;
      }

      if (roominfo !== undefined) {
        localVarQueryParameter['roominfo'] = roominfo;
      }

      if (bokfilter !== undefined) {
        localVarQueryParameter['bokfilter'] = bokfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (availabilitycheck !== undefined) {
        localVarQueryParameter['availabilitycheck'] = availabilitycheck;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Single Localized
     * @param {string} id ID of the Accommodation
     * @param {string} [language] Localization Language
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodationLocalized: async (id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling accommodationGetAccommodationLocalized.');
      }

      const localVarPath = `/api/AccommodationLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (idsource !== undefined) {
        localVarQueryParameter['idsource'] = idsource;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (arrival !== undefined) {
        localVarQueryParameter['arrival'] = arrival;
      }

      if (departure !== undefined) {
        localVarQueryParameter['departure'] = departure;
      }

      if (roominfo !== undefined) {
        localVarQueryParameter['roominfo'] = roominfo;
      }

      if (bokfilter !== undefined) {
        localVarQueryParameter['bokfilter'] = bokfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (availabilitycheck !== undefined) {
        localVarQueryParameter['availabilitycheck'] = availabilitycheck;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodations: async (pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Accommodation`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (categoryfilter !== undefined) {
        localVarQueryParameter['categoryfilter'] = categoryfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (featurefilter !== undefined) {
        localVarQueryParameter['featurefilter'] = featurefilter;
      }

      if (featureidfilter !== undefined) {
        localVarQueryParameter['featureidfilter'] = featureidfilter;
      }

      if (themefilter !== undefined) {
        localVarQueryParameter['themefilter'] = themefilter;
      }

      if (badgefilter !== undefined) {
        localVarQueryParameter['badgefilter'] = badgefilter;
      }

      if (idfilter !== undefined) {
        localVarQueryParameter['idfilter'] = idfilter;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (arrival !== undefined) {
        localVarQueryParameter['arrival'] = arrival;
      }

      if (departure !== undefined) {
        localVarQueryParameter['departure'] = departure;
      }

      if (roominfo !== undefined) {
        localVarQueryParameter['roominfo'] = roominfo;
      }

      if (bokfilter !== undefined) {
        localVarQueryParameter['bokfilter'] = bokfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (availabilitychecklanguage !== undefined) {
        localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
      }

      if (availabilitycheck !== undefined) {
        localVarQueryParameter['availabilitycheck'] = availabilitycheck;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation List Localized
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodationsLocalized: async (pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/AccommodationLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (categoryfilter !== undefined) {
        localVarQueryParameter['categoryfilter'] = categoryfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (featurefilter !== undefined) {
        localVarQueryParameter['featurefilter'] = featurefilter;
      }

      if (themefilter !== undefined) {
        localVarQueryParameter['themefilter'] = themefilter;
      }

      if (badgefilter !== undefined) {
        localVarQueryParameter['badgefilter'] = badgefilter;
      }

      if (idfilter !== undefined) {
        localVarQueryParameter['idfilter'] = idfilter;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (arrival !== undefined) {
        localVarQueryParameter['arrival'] = arrival;
      }

      if (departure !== undefined) {
        localVarQueryParameter['departure'] = departure;
      }

      if (roominfo !== undefined) {
        localVarQueryParameter['roominfo'] = roominfo;
      }

      if (bokfilter !== undefined) {
        localVarQueryParameter['bokfilter'] = bokfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (availabilitycheck !== undefined) {
        localVarQueryParameter['availabilitycheck'] = availabilitycheck;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Feature List (LTS Features)
     * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationFeaturesList: async (source, options = {}) => {
      const localVarPath = `/api/AccommodationFeatures`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Feature Single (LTS Features)
     * @param {string} id ID of the AccommodationFeature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationFeaturesSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling accommodationGetAllAccommodationFeaturesSingle.');
      }

      const localVarPath = `/api/AccommodationFeatures/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationTypesList: async (options = {}) => {
      const localVarPath = `/api/AccommodationTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Types Single
     * @param {string} id ID of the AccommodationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationTypessingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling accommodationGetAllAccommodationTypessingle.');
      }

      const localVarPath = `/api/AccommodationTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Accommodation Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationsChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/AccommodationChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Reduced Accommodation List
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetReducedAccosAsync: async (language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options = {}) => {
      const localVarPath = `/api/AccommodationReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (categoryfilter !== undefined) {
        localVarQueryParameter['categoryfilter'] = categoryfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (featurefilter !== undefined) {
        localVarQueryParameter['featurefilter'] = featurefilter;
      }

      if (featureidfilter !== undefined) {
        localVarQueryParameter['featureidfilter'] = featureidfilter;
      }

      if (themefilter !== undefined) {
        localVarQueryParameter['themefilter'] = themefilter;
      }

      if (badgefilter !== undefined) {
        localVarQueryParameter['badgefilter'] = badgefilter;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (suedtirolmobil !== undefined) {
        localVarQueryParameter['suedtirolmobil'] = suedtirolmobil;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
     * @param {string} body Posted Accommodation IDs (Separated by ,)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
     * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; Südtirol Balance) REQUIRED
     * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
     * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
     * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationPostAvailableMSSResponseonlyAccommodations: async (body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options = {}) => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling accommodationPostAvailableMSSResponseonlyAccommodations.');
      }

      const localVarPath = `/api/AvailabilityCheck`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (availabilitychecklanguage !== undefined) {
        localVarQueryParameter['availabilitychecklanguage'] = availabilitychecklanguage;
      }

      if (boardfilter !== undefined) {
        localVarQueryParameter['boardfilter'] = boardfilter;
      }

      if (arrival !== undefined) {
        localVarQueryParameter['arrival'] = arrival;
      }

      if (departure !== undefined) {
        localVarQueryParameter['departure'] = departure;
      }

      if (roominfo !== undefined) {
        localVarQueryParameter['roominfo'] = roominfo;
      }

      if (bokfilter !== undefined) {
        localVarQueryParameter['bokfilter'] = bokfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (detail !== undefined) {
        localVarQueryParameter['detail'] = detail;
      }

      if (withoutmssids !== undefined) {
        localVarQueryParameter['withoutmssids'] = withoutmssids;
      }

      if (withoutlcsids !== undefined) {
        localVarQueryParameter['withoutlcsids'] = withoutlcsids;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization = typeof body !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || "";
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AccommodationApi - functional programming interface
 * @export
 */

const AccommodationApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Accommodation Room Info by AccoID
     * @param {string} accoid Accommodation ID
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Room Info Single
     * @param {string} id AccommodationRoom ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccoRoomInfosById(id, fields, language, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccoRoomInfosById(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Single
     * @param {string} id ID of the Accommodation
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Single Localized
     * @param {string} id ID of the Accommodation
     * @param {string} [language] Localization Language
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation List Localized
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Feature List (LTS Features)
     * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAllAccommodationFeaturesList(source, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationFeaturesList(source, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Feature Single (LTS Features)
     * @param {string} id ID of the AccommodationFeature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAllAccommodationFeaturesSingle(id, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationFeaturesSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAllAccommodationTypesList(options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Types Single
     * @param {string} id ID of the AccommodationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAllAccommodationTypessingle(id, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationTypessingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Accommodation Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Reduced Accommodation List
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
     * @param {string} body Posted Accommodation IDs (Separated by ,)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
     * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; Südtirol Balance) REQUIRED
     * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
     * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
     * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options) {
      const localVarAxiosArgs = await AccommodationApiAxiosParamCreator(configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * AccommodationApi - factory interface
 * @export
 */

const AccommodationApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Accommodation Room Info by AccoID
     * @param {string} accoid Accommodation ID
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options) {
      return AccommodationApiFp(configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Room Info Single
     * @param {string} id AccommodationRoom ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccoRoomInfosById(id, fields, language, options) {
      return AccommodationApiFp(configuration).accommodationGetAccoRoomInfosById(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Single
     * @param {string} id ID of the Accommodation
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options) {
      return AccommodationApiFp(configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Single Localized
     * @param {string} id ID of the Accommodation
     * @param {string} [language] Localization Language
     * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options) {
      return AccommodationApiFp(configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      return AccommodationApiFp(configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation List Localized
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
     * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
     * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options) {
      return AccommodationApiFp(configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Feature List (LTS Features)
     * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationFeaturesList(source, options) {
      return AccommodationApiFp(configuration).accommodationGetAllAccommodationFeaturesList(source, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Feature Single (LTS Features)
     * @param {string} id ID of the AccommodationFeature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationFeaturesSingle(id, options) {
      return AccommodationApiFp(configuration).accommodationGetAllAccommodationFeaturesSingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationTypesList(options) {
      return AccommodationApiFp(configuration).accommodationGetAllAccommodationTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Types Single
     * @param {string} id ID of the AccommodationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationTypessingle(id, options) {
      return AccommodationApiFp(configuration).accommodationGetAllAccommodationTypessingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Accommodation Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return AccommodationApiFp(configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Reduced Accommodation List
     * @param {string} [language] Localization Language
     * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
     * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
      return AccommodationApiFp(configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
     * @param {string} body Posted Accommodation IDs (Separated by ,)
     * @param {string} [availabilitychecklanguage] Language of the Availability Response
     * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
     * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
     * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
     * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
     * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; Südtirol Balance) REQUIRED
     * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
     * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
     * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options) {
      return AccommodationApiFp(configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * AccommodationApi - object-oriented interface
 * @export
 * @class AccommodationApi
 * @extends {BaseAPI}
 */

class accommodation_api_AccommodationApi extends base_BaseAPI {
  /**
   *
   * @summary GET Accommodation Room Info by AccoID
   * @param {string} accoid Accommodation ID
   * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
   * @param {boolean} [getall] Get Rooms from all sources (If an accommodation is bookable on Booking Southtyrol, rooms from this source are returned, setting getall to true returns also LTS Rooms), (default:false)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */
  accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccoRoomInfos(accoid, idsource, getall, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Room Info Single
   * @param {string} id AccommodationRoom ID
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAccoRoomInfosById(id, fields, language, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccoRoomInfosById(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Single
   * @param {string} id ID of the Accommodation
   * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
   * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;de&#x27;)
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
   * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
   * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
   * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
   * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
   * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
   * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccommodation(id, idsource, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Single Localized
   * @param {string} id ID of the Accommodation
   * @param {string} [language] Localization Language
   * @param {string} [idsource] ID Source Filter (possible values:&#x27;lts&#x27;,&#x27;hgv&#x27;), (default:&#x27;lts&#x27;)
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
   * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
   * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
   * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
   * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
   * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
   * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccommodationLocalized(id, language, idsource, boardfilter, arrival, departure, roominfo, bokfilter, source, availabilitycheck, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
   * @param {string} [featurefilter] FeatureFilter refers to predefined Features listed in the property SpecialFeatures (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
   * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
   * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
   * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
   * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
   * @param {string} [availabilitychecklanguage] Language of the Availability Response (possible values: &#x27;de&#x27;,&#x27;it&#x27;,&#x27;en&#x27;), (default:&#x27;en&#x27;)
   * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccommodations(pagenumber, pagesize, seed, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitychecklanguage, availabilitycheck, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation List Localized
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page (If availabilitycheck set, pagesize has no effect all Accommodations are returned), (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [language] Localization Language
   * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
   * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [idfilter] IDFilter (Separator &#x27;,&#x27; List of Accommodation IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Today&#x27;)
   * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED, (default:&#x27;Tomorrow&#x27;)
   * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
   * @param {string} [bokfilter] Booking Channels Filter REQUIRED (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check)), (default:&#x27;hgv&#x27;)
   * @param {string} [source] Source for MSS availability check, (default:&#x27;sinfo&#x27;)
   * @param {boolean} [availabilitycheck] Availability Check enabled/disabled (possible Values: &#x27;true&#x27;, &#x27;false), (default Value: &#x27;false&#x27;) NOT AVAILABLE AS OPEN DATA
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAccommodationsLocalized(pagenumber, pagesize, seed, language, categoryfilter, typefilter, boardfilter, featurefilter, themefilter, badgefilter, idfilter, locfilter, odhtagfilter, odhactive, active, arrival, departure, roominfo, bokfilter, source, availabilitycheck, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Feature List (LTS Features)
   * @param {string} [source] IF source &#x3D; \&quot;lts\&quot; the Features list is returned in XML Format directly from LTS, (default: blank)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAllAccommodationFeaturesList(source, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationFeaturesList(source, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Feature Single (LTS Features)
   * @param {string} id ID of the AccommodationFeature
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAllAccommodationFeaturesSingle(id, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationFeaturesSingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAllAccommodationTypesList(options) {
    return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Types Single
   * @param {string} id ID of the AccommodationType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAllAccommodationTypessingle(id, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationTypessingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Accommodation Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Accos with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return AccommodationApiFp(this.configuration).accommodationGetAllAccommodationsChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Reduced Accommodation List
   * @param {string} [language] Localization Language
   * @param {string} [categoryfilter] Categoryfilter (BITMASK values: 1 &#x3D; (not categorized), 2 &#x3D; (1star), 4 &#x3D; (1flower), 8 &#x3D; (1sun), 14 &#x3D; (1star/1flower/1sun), 16 &#x3D; (2stars), 32 &#x3D; (2flowers), 64 &#x3D; (2suns), 112 &#x3D; (2stars/2flowers/2suns), 128 &#x3D; (3stars), 256 &#x3D; (3flowers), 512 &#x3D; (3suns), 1024 &#x3D; (3sstars), 1920 &#x3D; (3stars/3flowers/3suns/3sstars), 2048 &#x3D; (4stars), 4096 &#x3D; (4flowers), 8192 &#x3D; (4suns), 16384 &#x3D; (4sstars), 30720 &#x3D; (4stars/4flowers/4suns/4sstars), 32768 &#x3D; (5stars), 65536 &#x3D; (5flowers), 131072 &#x3D; (5suns), 229376 &#x3D; (5stars/5flowers/5suns), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [typefilter] Typefilter (BITMASK values: 1 &#x3D; (HotelPension), 2 &#x3D; (BedBreakfast), 4 &#x3D; (Farm), 8 &#x3D; (Camping), 16 &#x3D; (Youth), 32 &#x3D; (Mountain), 64 &#x3D; (Apartment), 128 &#x3D; (Not defined),&#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;0&#x27;)
   * @param {string} [featurefilter] FeatureFilter (BITMASK values: 1 &#x3D; (Group-friendly), 2 &#x3D; (Meeting rooms), 4 &#x3D; (Swimming pool), 8 &#x3D; (Sauna), 16 &#x3D; (Garage), 32 &#x3D; (Pick-up service), 64 &#x3D; (WLAN), 128 &#x3D; (Barrier-free), 256 &#x3D; (Special menus for allergy sufferers), 512 &#x3D; (Pets welcome), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [featureidfilter] Feature Id Filter, filter over ALL Features vailable (Separator &#x27;,&#x27; List of Feature IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [themefilter] Themefilter (BITMASK values: 1 &#x3D; (Gourmet), 2 &#x3D; (At altitude), 4 &#x3D; (Regional wellness offerings), 8 &#x3D; (on the wheels), 16 &#x3D; (With family), 32 &#x3D; (Hiking), 64 &#x3D; (In the vineyards), 128 &#x3D; (Urban vibe), 256 &#x3D; (At the ski resort), 512 &#x3D; (Mediterranean), 1024 &#x3D; (In the Dolomites), 2048 &#x3D; (Alpine), 4096 &#x3D; (Small and charming), 8192 &#x3D; (Huts and mountain inns), 16384 &#x3D; (Rural way of life), 32768 &#x3D; (Balance), 65536 &#x3D; (Christmas markets), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [badgefilter] BadgeFilter (BITMASK values: 1 &#x3D; (Belvita Wellness Hotel), 2 &#x3D; (Familyhotel), 4 &#x3D; (Bikehotel), 8 &#x3D; (Red Rooster Farm), 16 &#x3D; (Barrier free certificated), 32 &#x3D; (Vitalpina Hiking Hotel), 64 &#x3D; (Private Rooms in South Tyrol), 128 &#x3D; (Vinum Hotels), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODHTag Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more ODHTags possible, &#x27;null&#x27; &#x3D; No Filter, available ODHTags reference to &#x27;api/ODHTag?validforentity&#x3D;accommodation&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODHActive Filter (refers to field SmgActive) (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only ODH Active Accommodations, &#x27;false&#x27; only ODH Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {boolean} [active] TIC Active Filter (possible Values: &#x27;null&#x27; Displays all Accommodations, &#x27;true&#x27; only TIC Active Accommodations, &#x27;false&#x27; only TIC Disabled Accommodations, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {boolean} [suedtirolmobil]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
    return AccommodationApiFp(this.configuration).accommodationGetReducedAccosAsync(language, categoryfilter, typefilter, boardfilter, featurefilter, featureidfilter, themefilter, badgefilter, locfilter, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary POST Available Accommodations HGV(Booking Suedtirol MSS) / LTS on posted IDs only Availability Response NOT AVAILABLE AS OPEN DATA
   * @param {string} body Posted Accommodation IDs (Separated by ,)
   * @param {string} [availabilitychecklanguage] Language of the Availability Response
   * @param {string} [boardfilter] Boardfilter (BITMASK values: 0 &#x3D; (all boards), 1 &#x3D; (without board), 2 &#x3D; (breakfast), 4 &#x3D; (half board), 8 &#x3D; (full board), 16 &#x3D; (All inclusive), &#x27;null&#x27; &#x3D; No Filter)
   * @param {string} [arrival] Arrival Date (yyyy-MM-dd) REQUIRED
   * @param {string} [departure] Departure Date (yyyy-MM-dd) REQUIRED
   * @param {string} [roominfo] Roominfo Filter REQUIRED (Splitter for Rooms &#x27;|&#x27; Splitter for Persons Ages &#x27;,&#x27;) (Room Types: 0&#x3D;notprovided, 1&#x3D;room, 2&#x3D;apartment, 4&#x3D;pitch/tent(onlyLTS), 8&#x3D;dorm(onlyLTS)) possible Values Example 1-18,10|1-18 &#x3D; 2 Rooms, Room 1 for 2 person Age 18 and Age 10, Room 2 for 1 Person Age 18), (default:&#x27;1-18,18&#x27;)
   * @param {string} [bokfilter] Booking Channels Filter (Separator &#x27;,&#x27; possible values: hgv &#x3D; (Booking Südtirol), htl &#x3D; (Hotel.de), exp &#x3D; (Expedia), bok &#x3D; (Booking.com), lts &#x3D; (LTS Availability check), (default:hgv)) REQUIRED
   * @param {string} [source] Source of the Requester (possible value: &#x27;sinfo&#x27; &#x3D; Suedtirol.info, &#x27;sbalance&#x27; &#x3D; Südtirol Balance) REQUIRED
   * @param {string} [detail] Include Offer Details (Boolean, 1 &#x3D; full Details)
   * @param {boolean} [withoutmssids] Search over all bookable Accommodations on HGV MSS (No Ids have to be provided as Post Data) (default: false)
   * @param {boolean} [withoutlcsids] Search over all Accommodations on LTS (No Ids have to be provided as Post Data) (default: false)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccommodationApi
   */


  accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options) {
    return AccommodationApiFp(this.configuration).accommodationPostAvailableMSSResponseonlyAccommodations(body, availabilitychecklanguage, boardfilter, arrival, departure, roominfo, bokfilter, source, detail, withoutmssids, withoutlcsids, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/activity-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * ActivityApi - axios parameter creator
 * @export
 */

const ActivityApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Activity List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityFilteredLocalized: async (language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/ActivityLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (activitytype !== undefined) {
        localVarQueryParameter['activitytype'] = activitytype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (distancefilter !== undefined) {
        localVarQueryParameter['distancefilter'] = distancefilter;
      }

      if (altitudefilter !== undefined) {
        localVarQueryParameter['altitudefilter'] = altitudefilter;
      }

      if (durationfilter !== undefined) {
        localVarQueryParameter['durationfilter'] = durationfilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (difficultyfilter !== undefined) {
        localVarQueryParameter['difficultyfilter'] = difficultyfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity List
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityList: async (language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Activity`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (activitytype !== undefined) {
        localVarQueryParameter['activitytype'] = activitytype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (distancefilter !== undefined) {
        localVarQueryParameter['distancefilter'] = distancefilter;
      }

      if (altitudefilter !== undefined) {
        localVarQueryParameter['altitudefilter'] = altitudefilter;
      }

      if (durationfilter !== undefined) {
        localVarQueryParameter['durationfilter'] = durationfilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (difficultyfilter !== undefined) {
        localVarQueryParameter['difficultyfilter'] = difficultyfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityReduced: async (language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options = {}) => {
      const localVarPath = `/api/ActivityReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (activitytype !== undefined) {
        localVarQueryParameter['activitytype'] = activitytype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (distancefilter !== undefined) {
        localVarQueryParameter['distancefilter'] = distancefilter;
      }

      if (altitudefilter !== undefined) {
        localVarQueryParameter['altitudefilter'] = altitudefilter;
      }

      if (durationfilter !== undefined) {
        localVarQueryParameter['durationfilter'] = durationfilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (difficultyfilter !== undefined) {
        localVarQueryParameter['difficultyfilter'] = difficultyfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity Single
     * @param {string} id ID of the Activity
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivitySingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling activityGetActivitySingle.');
      }

      const localVarPath = `/api/Activity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity Single Localized
     * @param {string} id ID of the Activity
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivitySingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling activityGetActivitySingleLocalized.');
      }

      const localVarPath = `/api/ActivityLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/ActivityChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityTypesList: async (options = {}) => {
      const localVarPath = `/api/ActivityTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Activity Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityTypesSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling activityGetAllActivityTypesSingle.');
      }

      const localVarPath = `/api/ActivityTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ActivityApi - functional programming interface
 * @export
 */

const ActivityApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Activity List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity List
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity Single
     * @param {string} id ID of the Activity
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetActivitySingle(id, fields, language, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivitySingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity Single Localized
     * @param {string} id ID of the Activity
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetActivitySingleLocalized(id, language, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivitySingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetAllActivityTypesList(options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Activity Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activityGetAllActivityTypesSingle(id, options) {
      const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityTypesSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * ActivityApi - factory interface
 * @export
 */

const ActivityApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Activity List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      return ActivityApiFp(configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity List
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options) {
      return ActivityApiFp(configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
      return ActivityApiFp(configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity Single
     * @param {string} id ID of the Activity
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivitySingle(id, fields, language, options) {
      return ActivityApiFp(configuration).activityGetActivitySingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity Single Localized
     * @param {string} id ID of the Activity
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetActivitySingleLocalized(id, language, options) {
      return ActivityApiFp(configuration).activityGetActivitySingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return ActivityApiFp(configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityTypesList(options) {
      return ActivityApiFp(configuration).activityGetAllActivityTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Activity Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityGetAllActivityTypesSingle(id, options) {
      return ActivityApiFp(configuration).activityGetAllActivityTypesSingle(id, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */

class activity_api_ActivityApi extends base_BaseAPI {
  /**
   *
   * @summary GET Activity List Localized
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
   * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
   * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
   * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */
  activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
    return ActivityApiFp(this.configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity List
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
   * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
   * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
   * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options) {
    return ActivityApiFp(this.configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity List Reduced
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ActivityTypes
   * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
   * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
   * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
    return ActivityApiFp(this.configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity Single
   * @param {string} id ID of the Activity
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetActivitySingle(id, fields, language, options) {
    return ActivityApiFp(this.configuration).activityGetActivitySingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity Single Localized
   * @param {string} id ID of the Activity
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetActivitySingleLocalized(id, language, options) {
    return ActivityApiFp(this.configuration).activityGetActivitySingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return ActivityApiFp(this.configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetAllActivityTypesList(options) {
    return ActivityApiFp(this.configuration).activityGetAllActivityTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Activity Type Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */


  activityGetAllActivityTypesSingle(id, options) {
    return ActivityApiFp(this.configuration).activityGetAllActivityTypesSingle(id, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/article-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * ArticleApi - axios parameter creator
 * @export
 */

const ArticleApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Article Single
     * @param {string} id ID of the Article
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetActivitySingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling articleGetActivitySingle.');
      }

      const localVarPath = `/api/Article/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article Single Localized
     * @param {string} id ID of the Article
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetActivitySingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling articleGetActivitySingleLocalized.');
      }

      const localVarPath = `/api/ArticleLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/ArticleChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleTypeSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling articleGetAllArticleTypeSingle.');
      }

      const localVarPath = `/api/ArticleTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleTypesList: async (options = {}) => {
      const localVarPath = `/api/ArticleTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
     * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleList: async (pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Article`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (articletype !== undefined) {
        localVarQueryParameter['articletype'] = articletype;
      }

      if (articlesubtype !== undefined) {
        localVarQueryParameter['articlesubtype'] = articlesubtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (langfilter !== undefined) {
        localVarQueryParameter['langfilter'] = langfilter;
      }

      if (sortbyarticledate !== undefined) {
        localVarQueryParameter['sortbyarticledate'] = sortbyarticledate;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleListLocalized: async (language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options = {}) => {
      const localVarPath = `/api/ArticleLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (articletype !== undefined) {
        localVarQueryParameter['articletype'] = articletype;
      }

      if (articlesubtype !== undefined) {
        localVarQueryParameter['articlesubtype'] = articlesubtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Article List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleReducedList: async (language, articletype, articlesubtype, odhtagfilter, active, odhactive, options = {}) => {
      const localVarPath = `/api/ArticleReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (articletype !== undefined) {
        localVarQueryParameter['articletype'] = articletype;
      }

      if (articlesubtype !== undefined) {
        localVarQueryParameter['articlesubtype'] = articlesubtype;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ArticleApi - functional programming interface
 * @export
 */

const ArticleApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Article Single
     * @param {string} id ID of the Article
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetActivitySingle(id, fields, language, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetActivitySingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article Single Localized
     * @param {string} id ID of the Article
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetActivitySingleLocalized(id, language, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetActivitySingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetAllArticleTypeSingle(id, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleTypeSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetAllArticleTypesList(options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
     * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Article List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options) {
      const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * ArticleApi - factory interface
 * @export
 */

const ArticleApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Article Single
     * @param {string} id ID of the Article
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetActivitySingle(id, fields, language, options) {
      return ArticleApiFp(configuration).articleGetActivitySingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article Single Localized
     * @param {string} id ID of the Article
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetActivitySingleLocalized(id, language, options) {
      return ArticleApiFp(configuration).articleGetActivitySingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return ArticleApiFp(configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleTypeSingle(id, options) {
      return ArticleApiFp(configuration).articleGetAllArticleTypeSingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetAllArticleTypesList(options) {
      return ArticleApiFp(configuration).articleGetAllArticleTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
     * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options) {
      return ArticleApiFp(configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options) {
      return ArticleApiFp(configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Article List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options) {
      return ArticleApiFp(configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */

class article_api_ArticleApi extends base_BaseAPI {
  /**
   *
   * @summary GET Article Single
   * @param {string} id ID of the Article
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  articleGetActivitySingle(id, fields, language, options) {
    return ArticleApiFp(this.configuration).articleGetActivitySingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article Single Localized
   * @param {string} id ID of the Article
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetActivitySingleLocalized(id, language, options) {
    return ArticleApiFp(this.configuration).articleGetActivitySingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return ArticleApiFp(this.configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article Types Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetAllArticleTypeSingle(id, options) {
    return ArticleApiFp(this.configuration).articleGetAllArticleTypeSingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetAllArticleTypesList(options) {
    return ArticleApiFp(this.configuration).articleGetAllArticleTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
   * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
   * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
   * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options) {
    return ArticleApiFp(this.configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article List Localized
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
   * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options) {
    return ArticleApiFp(this.configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Article List Reduced
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
   * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
   * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */


  articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options) {
    return ArticleApiFp(this.configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/common-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * CommonApi - axios parameter creator
 * @export
 */

const CommonApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Area Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetAreaSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetAreaSingle.');
      }

      const localVarPath = `/api/Area/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Area List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetAreas: async (elements, fields, language, options = {}) => {
      const localVarPath = `/api/Area`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrict: async (elements, visibleinsearch, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/District`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictLocalized: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/DistrictLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictReduced: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/DistrictReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetDistrictSingle.');
      }

      const localVarPath = `/api/District/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetDistrictSingleLocalized.');
      }

      const localVarPath = `/api/DistrictLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ExperienceArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreaSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetExperienceAreaSingle.');
      }

      const localVarPath = `/api/ExperienceArea/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ExperienceArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreaSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetExperienceAreaSingleLocalized.');
      }

      const localVarPath = `/api/ExperienceAreaLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Experiencearea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreas: async (elements, visibleinsearch, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/ExperienceArea`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ExperienceArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreasLocalized: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/ExperienceAreaLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ExperienceArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreasReduced: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/ExperienceAreaReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET MetaRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetMetaRegionSingle.');
      }

      const localVarPath = `/api/MetaRegion/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET MetaRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetMetaRegionSingleLocalized.');
      }

      const localVarPath = `/api/MetaRegionLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET MetaRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegions: async (elements, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/MetaRegion`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET MetaRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionsLocalized: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/MetaRegionLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET MetaRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionsReduced: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/MetaRegionReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Municipality List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipality: async (elements, visibleinsearch, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/Municipality`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Municipality Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalityLocalized: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/MunicipalityLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Municipality Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalityReduced: async (language, elements, visibleinsearch, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/MunicipalityReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (visibleinsearch !== undefined) {
        localVarQueryParameter['visibleinsearch'] = visibleinsearch;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Municipality Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalitySingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetMunicipalitySingle.');
      }

      const localVarPath = `/api/Municipality/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Municipality Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalitySingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetMunicipalitySingleLocalized.');
      }

      const localVarPath = `/api/MunicipalityLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Region Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetRegionSingle.');
      }

      const localVarPath = `/api/Region/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Region Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetRegionSingleLocalized.');
      }

      const localVarPath = `/api/RegionLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Region List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegions: async (elements, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/Region`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Region Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionsLocalized: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/RegionLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Region Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionsReduced: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/RegionReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiArea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiArea: async (elements, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/SkiArea`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaLocalized: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/SkiAreaLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaReduced: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/SkiAreaReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetSkiAreaSingle.');
      }

      const localVarPath = `/api/SkiArea/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetSkiAreaSingleLocalized.');
      }

      const localVarPath = `/api/SkiAreaLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegion: async (elements, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/SkiRegion`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionLocalized: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/SkiRegionLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionReduced: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/SkiRegionReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetSkiRegionSingle.');
      }

      const localVarPath = `/api/SkiRegion/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET SkiRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetSkiRegionSingleLocalized.');
      }

      const localVarPath = `/api/SkiRegionLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET TourismAssociation List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismverein: async (elements, latitude, longitude, radius, fields, language, options = {}) => {
      const localVarPath = `/api/TourismAssociation`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET TourismAssociation Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinLocalized: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/TourismAssociationLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET TourismAssociation Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinReduced: async (language, elements, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/TourismAssociationReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET TourismAssociation Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetTourismvereinSingle.');
      }

      const localVarPath = `/api/TourismAssociation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET TourismAssociation Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetTourismvereinSingleLocalized.');
      }

      const localVarPath = `/api/TourismAssociationLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Wine Awards List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [wineid] WineId
     * @param {string} [companyid] Company Id
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetWineAwardsList: async (elements, wineid, companyid, fields, language, options = {}) => {
      const localVarPath = `/api/WineAward`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (elements !== undefined) {
        localVarQueryParameter['elements'] = elements;
      }

      if (wineid !== undefined) {
        localVarQueryParameter['wineid'] = wineid;
      }

      if (companyid !== undefined) {
        localVarQueryParameter['companyid'] = companyid;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Wine Award Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetWineAwardsSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling commonGetWineAwardsSingle.');
      }

      const localVarPath = `/api/WineAward/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * CommonApi - functional programming interface
 * @export
 */

const CommonApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Area Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetAreaSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetAreaSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Area List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetAreas(elements, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetAreas(elements, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetDistrictSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetDistrictSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetDistrictSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ExperienceArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetExperienceAreaSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreaSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ExperienceArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetExperienceAreaSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreaSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Experiencearea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ExperienceArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ExperienceArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET MetaRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMetaRegionSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET MetaRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMetaRegionSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET MetaRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET MetaRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET MetaRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Municipality List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Municipality Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Municipality Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Municipality Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMunicipalitySingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalitySingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Municipality Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetMunicipalitySingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetMunicipalitySingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Region Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetRegionSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Region Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetRegionSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Region List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetRegions(elements, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Region Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Region Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetRegionsReduced(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiArea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiAreaSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiAreaSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiAreaSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiRegionSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET SkiRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetSkiRegionSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetSkiRegionSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET TourismAssociation List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET TourismAssociation Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET TourismAssociation Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET TourismAssociation Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetTourismvereinSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET TourismAssociation Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetTourismvereinSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetTourismvereinSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Wine Awards List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [wineid] WineId
     * @param {string} [companyid] Company Id
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetWineAwardsList(elements, wineid, companyid, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Wine Award Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commonGetWineAwardsSingle(id, fields, language, options) {
      const localVarAxiosArgs = await CommonApiAxiosParamCreator(configuration).commonGetWineAwardsSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * CommonApi - factory interface
 * @export
 */

const CommonApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Area Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetAreaSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetAreaSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Area List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetAreas(elements, fields, language, options) {
      return CommonApiFp(configuration).commonGetAreas(elements, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetDistrictSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetDistrictSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetDistrictSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ExperienceArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreaSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetExperienceAreaSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ExperienceArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreaSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetExperienceAreaSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Experiencearea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ExperienceArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ExperienceArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET MetaRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetMetaRegionSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET MetaRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetMetaRegionSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET MetaRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET MetaRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET MetaRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Municipality List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Municipality Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Municipality Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Municipality Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalitySingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetMunicipalitySingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Municipality Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetMunicipalitySingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetMunicipalitySingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Region Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetRegionSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Region Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetRegionSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Region List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegions(elements, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Region Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Region Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetRegionsReduced(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiArea List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiArea Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiArea Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiArea Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetSkiAreaSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiArea Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiAreaSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetSkiAreaSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiRegion List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiRegion Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiRegion Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiRegion Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetSkiRegionSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET SkiRegion Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetSkiRegionSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetSkiRegionSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET TourismAssociation List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options) {
      return CommonApiFp(configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET TourismAssociation Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET TourismAssociation Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options) {
      return CommonApiFp(configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET TourismAssociation Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetTourismvereinSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET TourismAssociation Localized Single
     * @param {string} id ID of the requested data
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetTourismvereinSingleLocalized(id, language, options) {
      return CommonApiFp(configuration).commonGetTourismvereinSingleLocalized(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Wine Awards List
     * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
     * @param {string} [wineid] WineId
     * @param {string} [companyid] Company Id
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetWineAwardsList(elements, wineid, companyid, fields, language, options) {
      return CommonApiFp(configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Wine Award Single
     * @param {string} id ID of the requested data
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commonGetWineAwardsSingle(id, fields, language, options) {
      return CommonApiFp(configuration).commonGetWineAwardsSingle(id, fields, language, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */

class common_api_CommonApi extends base_BaseAPI {
  /**
   *
   * @summary GET Area Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */
  commonGetAreaSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetAreaSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Area List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetAreas(elements, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetAreas(elements, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetDistrict(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetDistrictLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetDistrictReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetDistrictSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetDistrictSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetDistrictSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetDistrictSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ExperienceArea Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetExperienceAreaSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetExperienceAreaSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ExperienceArea Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetExperienceAreaSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetExperienceAreaSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Experiencearea List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetExperienceAreas(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ExperienceArea Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetExperienceAreasLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ExperienceArea Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetExperienceAreasReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET MetaRegion Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMetaRegionSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetMetaRegionSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET MetaRegion Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMetaRegionSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetMetaRegionSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET MetaRegion List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetMetaRegions(elements, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET MetaRegion Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetMetaRegionsLocalized(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET MetaRegion Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetMetaRegionsReduced(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Municipality List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetMunicipality(elements, visibleinsearch, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Municipality Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetMunicipalityLocalized(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Municipality Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [visibleinsearch] Filter only Elements flagged with visibleinsearch: (possible values: &#x27;true&#x27;,&#x27;false&#x27;), (default:&#x27;false&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetMunicipalityReduced(language, elements, visibleinsearch, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Municipality Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMunicipalitySingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetMunicipalitySingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Municipality Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetMunicipalitySingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetMunicipalitySingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Region Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetRegionSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetRegionSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Region Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetRegionSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetRegionSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Region List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetRegions(elements, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetRegions(elements, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Region Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetRegionsLocalized(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Region Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetRegionsReduced(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetRegionsReduced(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiArea List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiArea(elements, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiArea Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetSkiAreaLocalized(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiArea Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetSkiAreaReduced(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiArea Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiAreaSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiAreaSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiArea Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiAreaSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiAreaSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiRegion List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiRegion(elements, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiRegion Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetSkiRegionLocalized(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiRegion Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetSkiRegionReduced(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiRegion Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiRegionSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiRegionSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET SkiRegion Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetSkiRegionSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetSkiRegionSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET TourismAssociation List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetTourismverein(elements, latitude, longitude, radius, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET TourismAssociation Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetTourismvereinLocalized(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET TourismAssociation Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options) {
    return CommonApiFp(this.configuration).commonGetTourismvereinReduced(language, elements, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET TourismAssociation Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetTourismvereinSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetTourismvereinSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET TourismAssociation Localized Single
   * @param {string} id ID of the requested data
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetTourismvereinSingleLocalized(id, language, options) {
    return CommonApiFp(this.configuration).commonGetTourismvereinSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Wine Awards List
   * @param {number} [elements] Elements to retrieve (0 &#x3D; Get All)
   * @param {string} [wineid] WineId
   * @param {string} [companyid] Company Id
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetWineAwardsList(elements, wineid, companyid, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetWineAwardsList(elements, wineid, companyid, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Wine Award Single
   * @param {string} id ID of the requested data
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommonApi
   */


  commonGetWineAwardsSingle(id, fields, language, options) {
    return CommonApiFp(this.configuration).commonGetWineAwardsSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/event-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * EventApi - axios parameter creator
 * @export
 */

const EventApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Event Topic List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetAllEventTopicList: async (options = {}) => {
      const localVarPath = `/api/EventTopics`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Event with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetAllEventsChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/EventChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event Localized Single
     * @param {string} id ID of the Event
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventLocalizedSingle: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling eventGetEventLocalizedSingle.');
      }

      const localVarPath = `/api/EventLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event Single
     * @param {string} id ID of the Event
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling eventGetEventSingle.');
      }

      const localVarPath = `/api/Event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (Filter by datasource &#x27;lts&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [sort] Sorting of Events (&#x27;desc&#x27;: Descending, default, &#x27;asc&#x27;: Ascending)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [langfilter]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEvents: async (pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Event`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (rancfilter !== undefined) {
        localVarQueryParameter['rancfilter'] = rancfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (topicfilter !== undefined) {
        localVarQueryParameter['topicfilter'] = topicfilter;
      }

      if (orgfilter !== undefined) {
        localVarQueryParameter['orgfilter'] = orgfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (begindate !== undefined) {
        localVarQueryParameter['begindate'] = begindate;
      }

      if (enddate !== undefined) {
        localVarQueryParameter['enddate'] = enddate;
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (langfilter !== undefined) {
        localVarQueryParameter['langfilter'] = langfilter;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventsLocalized: async (language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/EventLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (rancfilter !== undefined) {
        localVarQueryParameter['rancfilter'] = rancfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (topicfilter !== undefined) {
        localVarQueryParameter['topicfilter'] = topicfilter;
      }

      if (orgfilter !== undefined) {
        localVarQueryParameter['orgfilter'] = orgfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (begindate !== undefined) {
        localVarQueryParameter['begindate'] = begindate;
      }

      if (enddate !== undefined) {
        localVarQueryParameter['enddate'] = enddate;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [source]
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventsReduced: async (language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options = {}) => {
      const localVarPath = `/api/EventReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (rancfilter !== undefined) {
        localVarQueryParameter['rancfilter'] = rancfilter;
      }

      if (typefilter !== undefined) {
        localVarQueryParameter['typefilter'] = typefilter;
      }

      if (topicfilter !== undefined) {
        localVarQueryParameter['topicfilter'] = topicfilter;
      }

      if (orgfilter !== undefined) {
        localVarQueryParameter['orgfilter'] = orgfilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (begindate !== undefined) {
        localVarQueryParameter['begindate'] = begindate;
      }

      if (enddate !== undefined) {
        localVarQueryParameter['enddate'] = enddate;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Event Topic Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetSingleEventTopicList: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling eventGetSingleEventTopicList.');
      }

      const localVarPath = `/api/EventTopics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * EventApi - functional programming interface
 * @export
 */

const EventApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Event Topic List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetAllEventTopicList(options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetAllEventTopicList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Event with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event Localized Single
     * @param {string} id ID of the Event
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetEventLocalizedSingle(id, language, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetEventLocalizedSingle(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event Single
     * @param {string} id ID of the Event
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetEventSingle(id, fields, language, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetEventSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (Filter by datasource &#x27;lts&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [sort] Sorting of Events (&#x27;desc&#x27;: Descending, default, &#x27;asc&#x27;: Ascending)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [langfilter]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [source]
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Event Topic Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async eventGetSingleEventTopicList(id, options) {
      const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventGetSingleEventTopicList(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * EventApi - factory interface
 * @export
 */

const EventApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Event Topic List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetAllEventTopicList(options) {
      return EventApiFp(configuration).eventGetAllEventTopicList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Event with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return EventApiFp(configuration).eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event Localized Single
     * @param {string} id ID of the Event
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventLocalizedSingle(id, language, options) {
      return EventApiFp(configuration).eventGetEventLocalizedSingle(id, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event Single
     * @param {string} id ID of the Event
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventSingle(id, fields, language, options) {
      return EventApiFp(configuration).eventGetEventSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (Filter by datasource &#x27;lts&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [sort] Sorting of Events (&#x27;desc&#x27;: Descending, default, &#x27;asc&#x27;: Ascending)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [langfilter]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options) {
      return EventApiFp(configuration).eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options) {
      return EventApiFp(configuration).eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
     * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
     * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
     * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [source]
     * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
     * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
     * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options) {
      return EventApiFp(configuration).eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Event Topic Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventGetSingleEventTopicList(id, options) {
      return EventApiFp(configuration).eventGetSingleEventTopicList(id, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */

class event_api_EventApi extends base_BaseAPI {
  /**
   *
   * @summary GET Event Topic List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */
  eventGetAllEventTopicList(options) {
    return EventApiFp(this.configuration).eventGetAllEventTopicList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Event with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return EventApiFp(this.configuration).eventGetAllEventsChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event Localized Single
   * @param {string} id ID of the Event
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetEventLocalizedSingle(id, language, options) {
    return EventApiFp(this.configuration).eventGetEventLocalizedSingle(id, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event Single
   * @param {string} id ID of the Event
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetEventSingle(id, fields, language, options) {
    return EventApiFp(this.configuration).eventGetEventSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
   * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
   * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
   * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
   * @param {string} [source] Source Filter (Filter by datasource &#x27;lts&#x27;)
   * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
   * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
   * @param {string} [sort] Sorting of Events (&#x27;desc&#x27;: Descending, default, &#x27;asc&#x27;: Ascending)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [langfilter]
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options) {
    return EventApiFp(this.configuration).eventGetEvents(pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, source, begindate, enddate, sort, seed, latitude, longitude, radius, fields, langfilter, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Event IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
   * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
   * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
   * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
   * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
   * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options) {
    return EventApiFp(this.configuration).eventGetEventsLocalized(language, pagenumber, pagesize, idlist, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, active, odhactive, begindate, enddate, seed, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event List Reduced
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [rancfilter] Rancfilter (Ranc 0-5 possible)
   * @param {string} [typefilter] Typefilter (Type of Event: not used yet)
   * @param {string} [topicfilter] Topic ID Filter (Filter by Topic ID) BITMASK
   * @param {string} [orgfilter] Organization Filter (Filter by Organizer RID)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;event&#x27;), (default:&#x27;null&#x27;)
   * @param {string} [source]
   * @param {boolean} [active] Active Events Filter (possible Values: &#x27;true&#x27; only Active Events, &#x27;false&#x27; only Disabled Events, (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) Events Filter (Refers to field SmgActive) Events Filter (possible Values: &#x27;true&#x27; only published Events, &#x27;false&#x27; only not published Events, (default:&#x27;null&#x27;)
   * @param {string} [begindate] BeginDate of Events (Format: yyyy-MM-dd)
   * @param {string} [enddate] EndDate of Events (Format: yyyy-MM-dd)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options) {
    return EventApiFp(this.configuration).eventGetEventsReduced(language, locfilter, rancfilter, typefilter, topicfilter, orgfilter, odhtagfilter, source, active, odhactive, begindate, enddate, latitude, longitude, radius, fields, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Event Topic Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventApi
   */


  eventGetSingleEventTopicList(id, options) {
    return EventApiFp(this.configuration).eventGetSingleEventTopicList(id, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/gastronomy-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * GastronomyApi - axios parameter creator
 * @export
 */

const GastronomyApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Gastronomy Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetAllGastronomyChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/GastronomyChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetAllGastronomyTypesList: async (options = {}) => {
      const localVarPath = `/api/GastronomyTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetApiGastronomyTypesById: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling gastronomyGetApiGastronomyTypesById.');
      }

      const localVarPath = `/api/GastronomyTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyList: async (pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Gastronomy`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (dishcodefilter !== undefined) {
        localVarQueryParameter['dishcodefilter'] = dishcodefilter;
      }

      if (ceremonycodefilter !== undefined) {
        localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
      }

      if (categorycodefilter !== undefined) {
        localVarQueryParameter['categorycodefilter'] = categorycodefilter;
      }

      if (facilitycodefilter !== undefined) {
        localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
      }

      if (cuisinecodefilter !== undefined) {
        localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyListLocalized: async (language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/GastronomyLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (dishcodefilter !== undefined) {
        localVarQueryParameter['dishcodefilter'] = dishcodefilter;
      }

      if (ceremonycodefilter !== undefined) {
        localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
      }

      if (categorycodefilter !== undefined) {
        localVarQueryParameter['categorycodefilter'] = categorycodefilter;
      }

      if (facilitycodefilter !== undefined) {
        localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
      }

      if (cuisinecodefilter !== undefined) {
        localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyListReduced: async (language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options = {}) => {
      const localVarPath = `/api/GastronomyReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (dishcodefilter !== undefined) {
        localVarQueryParameter['dishcodefilter'] = dishcodefilter;
      }

      if (ceremonycodefilter !== undefined) {
        localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
      }

      if (categorycodefilter !== undefined) {
        localVarQueryParameter['categorycodefilter'] = categorycodefilter;
      }

      if (facilitycodefilter !== undefined) {
        localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
      }

      if (cuisinecodefilter !== undefined) {
        localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomySingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling gastronomyGetGastronomySingle.');
      }

      const localVarPath = `/api/Gastronomy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Gastronomy Localized Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomySingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling gastronomyGetGastronomySingleLocalized.');
      }

      const localVarPath = `/api/GastronomyLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * GastronomyApi - functional programming interface
 * @export
 */

const GastronomyApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Gastronomy Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetAllGastronomyTypesList(options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetAllGastronomyTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetApiGastronomyTypesById(id, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetApiGastronomyTypesById(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetGastronomySingle(id, fields, language, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomySingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Gastronomy Localized Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gastronomyGetGastronomySingleLocalized(id, language, options) {
      const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomySingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * GastronomyApi - factory interface
 * @export
 */

const GastronomyApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Gastronomy Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return GastronomyApiFp(configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetAllGastronomyTypesList(options) {
      return GastronomyApiFp(configuration).gastronomyGetAllGastronomyTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetApiGastronomyTypesById(id, options) {
      return GastronomyApiFp(configuration).gastronomyGetApiGastronomyTypesById(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      return GastronomyApiFp(configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      return GastronomyApiFp(configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
      return GastronomyApiFp(configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomySingle(id, fields, language, options) {
      return GastronomyApiFp(configuration).gastronomyGetGastronomySingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Gastronomy Localized Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gastronomyGetGastronomySingleLocalized(id, language, options) {
      return GastronomyApiFp(configuration).gastronomyGetGastronomySingleLocalized(id, language, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * GastronomyApi - object-oriented interface
 * @export
 * @class GastronomyApi
 * @extends {BaseAPI}
 */

class gastronomy_api_GastronomyApi extends base_BaseAPI {
  /**
   *
   * @summary GET Gastronomy Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */
  gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetAllGastronomyTypesList(options) {
    return GastronomyApiFp(this.configuration).gastronomyGetAllGastronomyTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Types Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetApiGastronomyTypesById(id, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetApiGastronomyTypesById(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
   * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
   * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
   * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
   * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
   * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
   * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
   * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
   * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
   * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
   * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
   * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Menü), 64 &#x3D; (Degustationsmenü), 128 &#x3D; (Kindermenüs), 256 &#x3D; (Mittagsmenüs)
   * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermenü), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
   * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Café / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (Bäuerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (Törggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzhütte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skihütte)
   * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet für Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkplätze), 8192 &#x3D; (Raucherräume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau Südtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta Führer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis für Südtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
   * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische Küche), 2 &#x3D; (Glutenfreie Küche), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme Küche), 16 &#x3D; (Südtiroler Spezialitäten), 32 &#x3D; (Gourmet Küche), 64 &#x3D; (Italienische Küche), 128 &#x3D; (Internationale Küche), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialitäten), 1024 &#x3D; (Asiatische Küche), 2048 &#x3D; (Wildspezialitäten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Diätküche), 16348 &#x3D; (Grillspezialitäten), 32768 &#x3D; (Ladinische Küche), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kräuterwochen), 16777216 &#x3D; (Kindermenüs), 33554432 &#x3D; (Mittagsmenüs))
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Single
   * @param {string} id ID of the Gastronomy
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetGastronomySingle(id, fields, language, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetGastronomySingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Gastronomy Localized Single
   * @param {string} id ID of the Gastronomy
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GastronomyApi
   */


  gastronomyGetGastronomySingleLocalized(id, language, options) {
    return GastronomyApiFp(this.configuration).gastronomyGetGastronomySingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/json-ldapi.ts



/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * JsonLDApi - axios parameter creator
 * @export
 */

const JsonLDApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
     * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
     * @param {string} id ID of the data to transform, required
     * @param {string} [language] Output Language, standard EN
     * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
     * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
     * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
     * @param {boolean} [showid] Show the @id property in Json LD default value true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jsonLDGetDetailInLD: async (type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options = {}) => {
      // verify required parameter 'type' is not null or undefined
      if (type === null || type === undefined) {
        throw new RequiredError('type', 'Required parameter type was null or undefined when calling jsonLDGetDetailInLD.');
      } // verify required parameter 'id' is not null or undefined


      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling jsonLDGetDetailInLD.');
      }

      const localVarPath = `/api/JsonLD/DetailInLD`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (idtoshow !== undefined) {
        localVarQueryParameter['idtoshow'] = idtoshow;
      }

      if (urltoshow !== undefined) {
        localVarQueryParameter['urltoshow'] = urltoshow;
      }

      if (imageurltoshow !== undefined) {
        localVarQueryParameter['imageurltoshow'] = imageurltoshow;
      }

      if (showid !== undefined) {
        localVarQueryParameter['showid'] = showid;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * JsonLDApi - functional programming interface
 * @export
 */

const JsonLDApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
     * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
     * @param {string} id ID of the data to transform, required
     * @param {string} [language] Output Language, standard EN
     * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
     * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
     * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
     * @param {boolean} [showid] Show the @id property in Json LD default value true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options) {
      const localVarAxiosArgs = await JsonLDApiAxiosParamCreator(configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * JsonLDApi - factory interface
 * @export
 */

const JsonLDApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
     * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
     * @param {string} id ID of the data to transform, required
     * @param {string} [language] Output Language, standard EN
     * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
     * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
     * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
     * @param {boolean} [showid] Show the @id property in Json LD default value true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options) {
      return JsonLDApiFp(configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * JsonLDApi - object-oriented interface
 * @export
 * @class JsonLDApi
 * @extends {BaseAPI}
 */

class json_ldapi_JsonLDApi extends base_BaseAPI {
  /**
   *
   * @summary GET Detail Data in JSON LD Format (Schema.org Datatypes as output)
   * @param {string} type Data Type to transform currently available: (&#x27;accommodation&#x27;, &#x27;gastronomy&#x27;, &#x27;event&#x27;, &#x27;recipe&#x27;, &#x27;poi&#x27;, &#x27;region&#x27;, &#x27;tv&#x27;, &#x27;municipality&#x27;, &#x27;district&#x27;, &#x27;skiarea&#x27;) required
   * @param {string} id ID of the data to transform, required
   * @param {string} [language] Output Language, standard EN
   * @param {string} [idtoshow] ID to show on Json LD @id, not provided Id of ODH api call is taken
   * @param {string} [urltoshow] url to show on Json LD @id, not provided idtoshow is taken, idtoshow not provided url is filled with url of the data
   * @param {string} [imageurltoshow] image url to show on Json LD @image, not provided image url of data is taken
   * @param {boolean} [showid] Show the @id property in Json LD default value true
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JsonLDApi
   */
  jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options) {
    return JsonLDApiFp(this.configuration).jsonLDGetDetailInLD(type, id, language, idtoshow, urltoshow, imageurltoshow, showid, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/location-api.ts



/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * LocationApi - axios parameter creator
 * @export
 */

const LocationApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Location List (Use in locfilter)
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type (&#x27;mta&#x27;,&#x27;reg&#x27;,&#x27;tvs&#x27;,&#x27;mun&#x27;,&#x27;fra&#x27;) Separator &#x27;,&#x27; : &#x27;null&#x27; returns all Location Objects (default)
     * @param {boolean} [showall] Show all Data (true &#x3D; all, false &#x3D; show only data market as visible)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationGetTheLocationList: async (language, type, showall, locfilter, options = {}) => {
      const localVarPath = `/api/Location`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      if (showall !== undefined) {
        localVarQueryParameter['showall'] = showall;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Skiarea List (Use in locfilter as \"ska\")
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationGetTheSkiareaList: async (language, locfilter, options = {}) => {
      const localVarPath = `/api/Location/Skiarea`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * LocationApi - functional programming interface
 * @export
 */

const LocationApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Location List (Use in locfilter)
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type (&#x27;mta&#x27;,&#x27;reg&#x27;,&#x27;tvs&#x27;,&#x27;mun&#x27;,&#x27;fra&#x27;) Separator &#x27;,&#x27; : &#x27;null&#x27; returns all Location Objects (default)
     * @param {boolean} [showall] Show all Data (true &#x3D; all, false &#x3D; show only data market as visible)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locationGetTheLocationList(language, type, showall, locfilter, options) {
      const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).locationGetTheLocationList(language, type, showall, locfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Skiarea List (Use in locfilter as \"ska\")
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locationGetTheSkiareaList(language, locfilter, options) {
      const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).locationGetTheSkiareaList(language, locfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * LocationApi - factory interface
 * @export
 */

const LocationApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Location List (Use in locfilter)
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type (&#x27;mta&#x27;,&#x27;reg&#x27;,&#x27;tvs&#x27;,&#x27;mun&#x27;,&#x27;fra&#x27;) Separator &#x27;,&#x27; : &#x27;null&#x27; returns all Location Objects (default)
     * @param {boolean} [showall] Show all Data (true &#x3D; all, false &#x3D; show only data market as visible)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationGetTheLocationList(language, type, showall, locfilter, options) {
      return LocationApiFp(configuration).locationGetTheLocationList(language, type, showall, locfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Skiarea List (Use in locfilter as \"ska\")
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locationGetTheSkiareaList(language, locfilter, options) {
      return LocationApiFp(configuration).locationGetTheSkiareaList(language, locfilter, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */

class location_api_LocationApi extends base_BaseAPI {
  /**
   *
   * @summary GET Location List (Use in locfilter)
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [type] Type (&#x27;mta&#x27;,&#x27;reg&#x27;,&#x27;tvs&#x27;,&#x27;mun&#x27;,&#x27;fra&#x27;) Separator &#x27;,&#x27; : &#x27;null&#x27; returns all Location Objects (default)
   * @param {boolean} [showall] Show all Data (true &#x3D; all, false &#x3D; show only data market as visible)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  locationGetTheLocationList(language, type, showall, locfilter, options) {
    return LocationApiFp(this.configuration).locationGetTheLocationList(language, type, showall, locfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Skiarea List (Use in locfilter as \"ska\")
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + MetaREGIONID &#x3D; (Filter by MetaRegion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */


  locationGetTheSkiareaList(language, locfilter, options) {
    return LocationApiFp(this.configuration).locationGetTheSkiareaList(language, locfilter, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/login-api.ts



/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * LoginApi - axios parameter creator
 * @export
 */

const LoginApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Login
     * @param {string} grantType
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenPost: async (grantType, username, password, options = {}) => {
      // verify required parameter 'grantType' is not null or undefined
      if (grantType === null || grantType === undefined) {
        throw new RequiredError('grantType', 'Required parameter grantType was null or undefined when calling tokenPost.');
      } // verify required parameter 'username' is not null or undefined


      if (username === null || username === undefined) {
        throw new RequiredError('username', 'Required parameter username was null or undefined when calling tokenPost.');
      } // verify required parameter 'password' is not null or undefined


      if (password === null || password === undefined) {
        throw new RequiredError('password', 'Required parameter password was null or undefined when calling tokenPost.');
      }

      const localVarPath = `/token`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new URLSearchParams();

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams.toString();
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * LoginApi - functional programming interface
 * @export
 */

const LoginApiFp = function (configuration) {
  return {
    /**
     *
     * @summary Login
     * @param {string} grantType
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tokenPost(grantType, username, password, options) {
      const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).tokenPost(grantType, username, password, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * LoginApi - factory interface
 * @export
 */

const LoginApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Login
     * @param {string} grantType
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenPost(grantType, username, password, options) {
      return LoginApiFp(configuration).tokenPost(grantType, username, password, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */

class login_api_LoginApi extends base_BaseAPI {
  /**
   *
   * @summary Login
   * @param {string} grantType
   * @param {string} username
   * @param {string} password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginApi
   */
  tokenPost(grantType, username, password, options) {
    return LoginApiFp(this.configuration).tokenPost(grantType, username, password, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/odhactivity-poi-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * ODHActivityPoiApi - axios parameter creator
 * @export
 */

const ODHActivityPoiApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET ODHActivityPoi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all ODHActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/ODHActivityPoiChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiTypesList: async (options = {}) => {
      const localVarPath = `/api/ODHActivityPoiTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiTypesSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling oDHActivityPoiGetAllODHActivityPoiTypesSingle.');
      }

      const localVarPath = `/api/ODHActivityPoiTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;ArchApp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiList: async (pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/ODHActivityPoi`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (langfilter !== undefined) {
        localVarQueryParameter['langfilter'] = langfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiListLocalized: async (language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/ODHActivityPoiLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (langfilter !== undefined) {
        localVarQueryParameter['langfilter'] = langfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiListReduced: async (language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options = {}) => {
      const localVarPath = `/api/ODHActivityPoiReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (suedtirolmobil !== undefined) {
        localVarQueryParameter['suedtirolmobil'] = suedtirolmobil;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling oDHActivityPoiGetODHActivityPoiSingle.');
      }

      const localVarPath = `/api/ODHActivityPoi/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Single Reduced
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling oDHActivityPoiGetODHActivityPoiSingleLocalized.');
      }

      const localVarPath = `/api/ODHActivityPoiLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ODHActivityPoiApi - functional programming interface
 * @export
 */

const ODHActivityPoiApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET ODHActivityPoi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all ODHActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetAllODHActivityPoiTypesList(options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetAllODHActivityPoiTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;ArchApp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHActivityPoi Single Reduced
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await ODHActivityPoiApiAxiosParamCreator(configuration).oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * ODHActivityPoiApi - factory interface
 * @export
 */

const ODHActivityPoiApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET ODHActivityPoi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all ODHActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiTypesList(options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetAllODHActivityPoiTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi Types Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;ArchApp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
     * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
     * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHActivityPoi Single Reduced
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options) {
      return ODHActivityPoiApiFp(configuration).oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * ODHActivityPoiApi - object-oriented interface
 * @export
 * @class ODHActivityPoiApi
 * @extends {BaseAPI}
 */

class odhactivity_poi_api_ODHActivityPoiApi extends base_BaseAPI {
  /**
   *
   * @summary GET ODHActivityPoi Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all ODHActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */
  oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetAllODHActivityPoiChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetAllODHActivityPoiTypesList(options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetAllODHActivityPoiTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi Types Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetAllODHActivityPoiTypesSingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
   * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
   * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;ArchApp&#x27; (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetODHActivityPoiList(pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi List Localized
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 32 &#x3D; Gastronomy, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
   * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
   * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [langfilter] ODHActivityPoi Langfilter (returns only SmgPois available in the selected Language, Separator &#x27;,&#x27; possible values: &#x27;de,it,en,nl,sc,pl,fr,ru&#x27;, &#x27;null&#x27;: Filter disabled)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetODHActivityPoiListLocalized(language, pagenumber, pagesize, type, subtype, poitype, idlist, locfilter, langfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, seed, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi List Reduced
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [type] Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: 1 &#x3D; Wellness, 2 &#x3D; Winter, 4 &#x3D; Summer, 8 &#x3D; Culture, 16 &#x3D; Other, 64 &#x3D; Mobility, 128 &#x3D; Shops and Services), (default: 255 &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ODHActivityPoiTypes
   * @param {string} [subtype] Subtype of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype reference to ODHActivityPoiTypes)
   * @param {string} [poitype] Additional Type of the ODHActivityPoi (&#x27;null&#x27; &#x3D; Filter disabled, BITMASK Filter, available SubTypes depends on the selected Maintype, SubType reference to ODHActivityPoiTypes)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only ODHActivityPoi with Highlight false, &#x27;true&#x27; &#x3D; only ODHActivityPoi with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [source] Source Filter (possible Values: &#x27;null&#x27; Displays all ODHActivityPoi, &#x27;None&#x27;, &#x27;ActivityData&#x27;, &#x27;PoiData&#x27;, &#x27;GastronomicData&#x27;, &#x27;MuseumData&#x27;, &#x27;Magnolia&#x27;, &#x27;Content&#x27;, &#x27;SuedtirolWein&#x27;, &#x27;Archapp&#x27; (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;smgpoi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {boolean} [suedtirolmobil]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetODHActivityPoiListReduced(language, type, subtype, poitype, locfilter, areafilter, highlight, source, odhtagfilter, odhactive, active, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi Single
   * @param {string} id ID of the Poi
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetODHActivityPoiSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHActivityPoi Single Reduced
   * @param {string} id ID of the Poi
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHActivityPoiApi
   */


  oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options) {
    return ODHActivityPoiApiFp(this.configuration).oDHActivityPoiGetODHActivityPoiSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/odhtag-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * ODHTagApi - axios parameter creator
 * @export
 */

const ODHTagApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET ODHTag Single
     * @param {string} id Id of ODHtag
     * @param {string} [language] Localization Language
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTagSingle: async (id, language, localizationlanguage, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling oDHTagGetODHTagSingle.');
      }

      const localVarPath = `/api/ODHTag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (localizationlanguage !== undefined) {
        localVarQueryParameter['localizationlanguage'] = localizationlanguage;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHTag List
     * @param {string} [language] Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTags: async (language, validforentity, localizationlanguage, options = {}) => {
      const localVarPath = `/api/ODHTag`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (validforentity !== undefined) {
        localVarQueryParameter['validforentity'] = validforentity;
      }

      if (localizationlanguage !== undefined) {
        localVarQueryParameter['localizationlanguage'] = localizationlanguage;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET ODHTag List REDUCED
     * @param {string} language Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTagsReduced: async (language, validforentity, options = {}) => {
      // verify required parameter 'language' is not null or undefined
      if (language === null || language === undefined) {
        throw new RequiredError('language', 'Required parameter language was null or undefined when calling oDHTagGetODHTagsReduced.');
      }

      const localVarPath = `/api/ODHTagReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (validforentity !== undefined) {
        localVarQueryParameter['validforentity'] = validforentity;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ODHTagApi - functional programming interface
 * @export
 */

const ODHTagApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET ODHTag Single
     * @param {string} id Id of ODHtag
     * @param {string} [language] Localization Language
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHTagGetODHTagSingle(id, language, localizationlanguage, options) {
      const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHTag List
     * @param {string} [language] Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHTagGetODHTags(language, validforentity, localizationlanguage, options) {
      const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET ODHTag List REDUCED
     * @param {string} language Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oDHTagGetODHTagsReduced(language, validforentity, options) {
      const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTagsReduced(language, validforentity, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * ODHTagApi - factory interface
 * @export
 */

const ODHTagApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET ODHTag Single
     * @param {string} id Id of ODHtag
     * @param {string} [language] Localization Language
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTagSingle(id, language, localizationlanguage, options) {
      return ODHTagApiFp(configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHTag List
     * @param {string} [language] Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
     * @param {string} [localizationlanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTags(language, validforentity, localizationlanguage, options) {
      return ODHTagApiFp(configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET ODHTag List REDUCED
     * @param {string} language Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oDHTagGetODHTagsReduced(language, validforentity, options) {
      return ODHTagApiFp(configuration).oDHTagGetODHTagsReduced(language, validforentity, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * ODHTagApi - object-oriented interface
 * @export
 * @class ODHTagApi
 * @extends {BaseAPI}
 */

class odhtag_api_ODHTagApi extends base_BaseAPI {
  /**
   *
   * @summary GET ODHTag Single
   * @param {string} id Id of ODHtag
   * @param {string} [language] Localization Language
   * @param {string} [localizationlanguage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHTagApi
   */
  oDHTagGetODHTagSingle(id, language, localizationlanguage, options) {
    return ODHTagApiFp(this.configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHTag List
   * @param {string} [language] Localization Language
   * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
   * @param {string} [localizationlanguage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHTagApi
   */


  oDHTagGetODHTags(language, validforentity, localizationlanguage, options) {
    return ODHTagApiFp(this.configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET ODHTag List REDUCED
   * @param {string} language Localization Language
   * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ODHTagApi
   */


  oDHTagGetODHTagsReduced(language, validforentity, options) {
    return ODHTagApiFp(this.configuration).oDHTagGetODHTagsReduced(language, validforentity, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/poi-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * PoiApi - axios parameter creator
 * @export
 */

const PoiApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Poi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoiTypesList: async (options = {}) => {
      const localVarPath = `/api/PoiTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoiTypesSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling poiGetAllPoiTypesSingle.');
      }

      const localVarPath = `/api/PoiTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoisChanged: async (pagenumber, pagesize, seed, updatefrom, options = {}) => {
      const localVarPath = `/api/PoiChanged`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiFiltered: async (pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Poi`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiLocalized: async (language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options = {}) => {
      const localVarPath = `/api/PoiLocalized`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected poiType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Pois with Highlight false, &#x27;true&#x27; &#x3D; only Pois with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiReduced: async (language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options = {}) => {
      const localVarPath = `/api/PoiReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (poitype !== undefined) {
        localVarQueryParameter['poitype'] = poitype;
      }

      if (subtype !== undefined) {
        localVarQueryParameter['subtype'] = subtype;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (highlight !== undefined) {
        localVarQueryParameter['highlight'] = highlight;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (suedtirolmobil !== undefined) {
        localVarQueryParameter['suedtirolmobil'] = suedtirolmobil;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiSingle: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling poiGetPoiSingle.');
      }

      const localVarPath = `/api/Poi/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Poi Localized Single
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiSingleLocalized: async (id, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling poiGetPoiSingleLocalized.');
      }

      const localVarPath = `/api/PoiLocalized/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * PoiApi - functional programming interface
 * @export
 */

const PoiApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Poi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetAllPoiTypesList(options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetAllPoiTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetAllPoiTypesSingle(id, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetAllPoiTypesSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected poiType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Pois with Highlight false, &#x27;true&#x27; &#x3D; only Pois with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetPoiSingle(id, fields, language, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetPoiSingle(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Poi Localized Single
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async poiGetPoiSingleLocalized(id, language, options) {
      const localVarAxiosArgs = await PoiApiAxiosParamCreator(configuration).poiGetPoiSingleLocalized(id, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * PoiApi - factory interface
 * @export
 */

const PoiApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Poi Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoiTypesList(options) {
      return PoiApiFp(configuration).poiGetAllPoiTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoiTypesSingle(id, options) {
      return PoiApiFp(configuration).poiGetAllPoiTypesSingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options) {
      return PoiApiFp(configuration).poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      return PoiApiFp(configuration).poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
      return PoiApiFp(configuration).poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected poiType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Pois with Highlight false, &#x27;true&#x27; &#x3D; only Pois with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois
     * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {boolean} [suedtirolmobil]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options) {
      return PoiApiFp(configuration).poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi Single
     * @param {string} id ID of the Poi
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiSingle(id, fields, language, options) {
      return PoiApiFp(configuration).poiGetPoiSingle(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Poi Localized Single
     * @param {string} id ID of the Poi
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    poiGetPoiSingleLocalized(id, language, options) {
      return PoiApiFp(configuration).poiGetPoiSingleLocalized(id, language, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * PoiApi - object-oriented interface
 * @export
 * @class PoiApi
 * @extends {BaseAPI}
 */

class poi_api_PoiApi extends base_BaseAPI {
  /**
   *
   * @summary GET Poi Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */
  poiGetAllPoiTypesList(options) {
    return PoiApiFp(this.configuration).poiGetAllPoiTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi Type Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetAllPoiTypesSingle(id, options) {
    return PoiApiFp(this.configuration).poiGetAllPoiTypesSingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi Changed List by Date
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options) {
    return PoiApiFp(this.configuration).poiGetAllPoisChanged(pagenumber, pagesize, seed, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
   * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
    return PoiApiFp(this.configuration).poiGetPoiFiltered(pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi Localized List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page, (default:10)
   * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
   * @param {string} [subtype] Subtype of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, available Subtypes depends on the poitype BITMASK), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs, &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Highlight Filter (Show only Highlights possible values: &#x27;true&#x27; : show only Highlight Pois, &#x27;null&#x27; Filter disabled), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois, (default:&#x27;null&#x27;)
   * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options) {
    return PoiApiFp(this.configuration).poiGetPoiLocalized(language, pagenumber, pagesize, poitype, subtype, idlist, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi List Reduced
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [poitype] Type of the Poi (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK &#x27;Doctors, Pharmacies &#x3D; 1&#x27;,&#x27;Shops &#x3D; 2&#x27;,&#x27;Culture and sights&#x3D; 4&#x27;,&#x27;Nightlife and entertainment &#x3D; 8&#x27;,&#x27;Public institutions &#x3D; 16&#x27;,&#x27;Sports and leisure &#x3D; 32&#x27;,&#x27;Traffic and transport &#x3D; 64&#x27;, &#x27;Service providers&#x27; &#x3D; 128, &#x27;Craft&#x27; &#x3D; 256), (default:&#x27;511&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/PoiTypes
   * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected poiType), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Pois with Highlight false, &#x27;true&#x27; &#x3D; only Pois with Highlight true), (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;poi&#x27;), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Pois Filter (possible Values: &#x27;true&#x27; only Active Pois, &#x27;false&#x27; only Disabled Pois
   * @param {boolean} [odhactive] ODH Active (Published) Pois Filter (Refers to field SmgActive) Pois Filter (possible Values: &#x27;true&#x27; only published Pois, &#x27;false&#x27; only not published Pois, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {boolean} [suedtirolmobil]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options) {
    return PoiApiFp(this.configuration).poiGetPoiReduced(language, poitype, subtype, locfilter, areafilter, highlight, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, suedtirolmobil, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi Single
   * @param {string} id ID of the Poi
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetPoiSingle(id, fields, language, options) {
    return PoiApiFp(this.configuration).poiGetPoiSingle(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Poi Localized Single
   * @param {string} id ID of the Poi
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PoiApi
   */


  poiGetPoiSingleLocalized(id, language, options) {
    return PoiApiFp(this.configuration).poiGetPoiSingleLocalized(id, language, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/venue-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * VenueApi - axios parameter creator
 * @export
 */

const VenueApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Venue Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGeVenueListReduced: async (language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options = {}) => {
      const localVarPath = `/api/VenueReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (capacityfilter !== undefined) {
        localVarQueryParameter['capacityfilter'] = capacityfilter;
      }

      if (roomcountfilter !== undefined) {
        localVarQueryParameter['roomcountfilter'] = roomcountfilter;
      }

      if (categoryfilter !== undefined) {
        localVarQueryParameter['categoryfilter'] = categoryfilter;
      }

      if (featurefilter !== undefined) {
        localVarQueryParameter['featurefilter'] = featurefilter;
      }

      if (setuptypefilter !== undefined) {
        localVarQueryParameter['setuptypefilter'] = setuptypefilter;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Venue List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
     * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGet: async (pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options = {}) => {
      const localVarPath = `/api/Venue`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (capacityfilter !== undefined) {
        localVarQueryParameter['capacityfilter'] = capacityfilter;
      }

      if (roomcountfilter !== undefined) {
        localVarQueryParameter['roomcountfilter'] = roomcountfilter;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (categoryfilter !== undefined) {
        localVarQueryParameter['categoryfilter'] = categoryfilter;
      }

      if (featurefilter !== undefined) {
        localVarQueryParameter['featurefilter'] = featurefilter;
      }

      if (setuptypefilter !== undefined) {
        localVarQueryParameter['setuptypefilter'] = setuptypefilter;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (odhtagfilter !== undefined) {
        localVarQueryParameter['odhtagfilter'] = odhtagfilter;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Venue Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetAllVenueTypesList: async (options = {}) => {
      const localVarPath = `/api/VenueTypes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Venue Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetAllVenueTypesSingle: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling venueGetAllVenueTypesSingle.');
      }

      const localVarPath = `/api/VenueTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Venue Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetApiVenueById: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling venueGetApiVenueById.');
      }

      const localVarPath = `/api/Venue/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * VenueApi - functional programming interface
 * @export
 */

const VenueApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Venue Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options) {
      const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Venue List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
     * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options) {
      const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Venue Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async venueGetAllVenueTypesList(options) {
      const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetAllVenueTypesList(options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Venue Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async venueGetAllVenueTypesSingle(id, options) {
      const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetAllVenueTypesSingle(id, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Venue Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async venueGetApiVenueById(id, fields, language, options) {
      const localVarAxiosArgs = await VenueApiAxiosParamCreator(configuration).venueGetApiVenueById(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * VenueApi - factory interface
 * @export
 */

const VenueApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Venue Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options) {
      return VenueApiFp(configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Venue List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
     * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
     * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
     * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
     * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
     * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
     * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options) {
      return VenueApiFp(configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Venue Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetAllVenueTypesList(options) {
      return VenueApiFp(configuration).venueGetAllVenueTypesList(options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Venue Type Single
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetAllVenueTypesSingle(id, options) {
      return VenueApiFp(configuration).venueGetAllVenueTypesSingle(id, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Venue Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    venueGetApiVenueById(id, fields, language, options) {
      return VenueApiFp(configuration).venueGetApiVenueById(id, fields, language, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * VenueApi - object-oriented interface
 * @export
 * @class VenueApi
 * @extends {BaseAPI}
 */

class venue_api_VenueApi extends base_BaseAPI {
  /**
   *
   * @summary GET Venue Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
   * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
   * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
   * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
   * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
   * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
   * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VenueApi
   */
  venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options) {
    return VenueApiFp(this.configuration).venueGeVenueListReduced(language, source, capacityfilter, roomcountfilter, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, latitude, longitude, radius, updatefrom, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Venue List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
   * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
   * @param {string} [capacityfilter] Capacity Range Filter (Separator &#x27;,&#x27; example Value: 50,100 All Venues with rooms from 50 to 100 people), (default:&#x27;null&#x27;)
   * @param {string} [roomcountfilter] Room Count Range Filter (Separator &#x27;,&#x27; example Value: 2,5 All Venues with 2 to 5 rooms), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Venue IDs), (default:&#x27;null&#x27;)
   * @param {string} [categoryfilter] Venue Category Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:category), (default:&#x27;null&#x27;)
   * @param {string} [featurefilter] Venue Features Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:feature), (default:&#x27;null&#x27;)
   * @param {string} [setuptypefilter] Venue SetupType Filter (BITMASK) (Separator &#x27;,&#x27; List of Venuetype Bitmasks, refer to api/VenueTypes type:seatType), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: mta + METAREGIONID &#x3D; (Filter by Metaregion), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27; &#x3D; disabled)
   * @param {boolean} [active] Active Venue Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Venues
   * @param {boolean} [odhactive] ODH Active (Published) Venue Filter (possible Values: &#x27;true&#x27; only published Venue, &#x27;false&#x27; only not published Venue, (default:&#x27;null&#x27;)
   * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags)(String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/SmgPoi&#x27;), (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VenueApi
   */


  venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options) {
    return VenueApiFp(this.configuration).venueGet(pagenumber, pagesize, source, capacityfilter, roomcountfilter, idlist, categoryfilter, featurefilter, setuptypefilter, locfilter, active, odhactive, odhtagfilter, seed, latitude, longitude, radius, updatefrom, fields, language, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Venue Types List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VenueApi
   */


  venueGetAllVenueTypesList(options) {
    return VenueApiFp(this.configuration).venueGetAllVenueTypesList(options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Venue Type Single
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VenueApi
   */


  venueGetAllVenueTypesSingle(id, options) {
    return VenueApiFp(this.configuration).venueGetAllVenueTypesSingle(id, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Venue Single
   * @param {string} id ID of the Webcam
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VenueApi
   */


  venueGetApiVenueById(id, fields, language, options) {
    return VenueApiFp(this.configuration).venueGetApiVenueById(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/weather-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * WeatherApi - axios parameter creator
 * @export
 */

const WeatherApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Snowreport Data LIVE
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetApiWeatherSnowReport: async (lang, options = {}) => {
      const localVarPath = `/api/Weather/SnowReport`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (lang !== undefined) {
        localVarQueryParameter['lang'] = lang;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET District Weather LIVE (Opendata)
     * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetDistrictWeather: async (locfilter, language, options = {}) => {
      // verify required parameter 'locfilter' is not null or undefined
      if (locfilter === null || locfilter === undefined) {
        throw new RequiredError('locfilter', 'Required parameter locfilter was null or undefined when calling weatherGetDistrictWeather.');
      }

      const localVarPath = `/api/Weather/District`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Measuringpoint SINGLE
     * @param {string} id Measuringpoint ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [table]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetMeasuringPoint: async (id, fields, table, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling weatherGetMeasuringPoint.');
      }

      const localVarPath = `/api/Weather/Measuringpoint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (table !== undefined) {
        localVarQueryParameter['table'] = table;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Measuringpoint LIST (Opendata)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [skiareafilter] Skiarea ID
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetMeasuringPoints: async (idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options = {}) => {
      const localVarPath = `/api/Weather/Measuringpoint`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      if (areafilter !== undefined) {
        localVarQueryParameter['areafilter'] = areafilter;
      }

      if (skiareafilter !== undefined) {
        localVarQueryParameter['skiareafilter'] = skiareafilter;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (searchfilter !== undefined) {
        localVarQueryParameter['searchfilter'] = searchfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Current Realtime Weather LIVE
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetRealtimeWeather: async (language, options = {}) => {
      const localVarPath = `/api/Weather/Realtime`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Snowreport Data LIVE by Skiarea
     * @param {string} skiareaid Skiarea ID
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetSnowReportBase: async (skiareaid, lang, options = {}) => {
      // verify required parameter 'skiareaid' is not null or undefined
      if (skiareaid === null || skiareaid === undefined) {
        throw new RequiredError('skiareaid', 'Required parameter skiareaid was null or undefined when calling weatherGetSnowReportBase.');
      }

      const localVarPath = `/api/Weather/SnowReport/{skiareaid}`.replace(`{${"skiareaid"}}`, encodeURIComponent(String(skiareaid))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (lang !== undefined) {
        localVarQueryParameter['lang'] = lang;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Current Suedtirol Weather LIVE (Opendata)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetWeather: async (language, locfilter, options = {}) => {
      const localVarPath = `/api/Weather`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (locfilter !== undefined) {
        localVarQueryParameter['locfilter'] = locfilter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * WeatherApi - functional programming interface
 * @export
 */

const WeatherApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Snowreport Data LIVE
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetApiWeatherSnowReport(lang, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetApiWeatherSnowReport(lang, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET District Weather LIVE (Opendata)
     * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetDistrictWeather(locfilter, language, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetDistrictWeather(locfilter, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Measuringpoint SINGLE
     * @param {string} id Measuringpoint ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [table]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetMeasuringPoint(id, fields, table, language, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetMeasuringPoint(id, fields, table, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Measuringpoint LIST (Opendata)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [skiareafilter] Skiarea ID
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Current Realtime Weather LIVE
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetRealtimeWeather(language, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetRealtimeWeather(language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Snowreport Data LIVE by Skiarea
     * @param {string} skiareaid Skiarea ID
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetSnowReportBase(skiareaid, lang, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetSnowReportBase(skiareaid, lang, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Current Suedtirol Weather LIVE (Opendata)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async weatherGetWeather(language, locfilter, options) {
      const localVarAxiosArgs = await WeatherApiAxiosParamCreator(configuration).weatherGetWeather(language, locfilter, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * WeatherApi - factory interface
 * @export
 */

const WeatherApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Snowreport Data LIVE
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetApiWeatherSnowReport(lang, options) {
      return WeatherApiFp(configuration).weatherGetApiWeatherSnowReport(lang, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET District Weather LIVE (Opendata)
     * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetDistrictWeather(locfilter, language, options) {
      return WeatherApiFp(configuration).weatherGetDistrictWeather(locfilter, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Measuringpoint SINGLE
     * @param {string} id Measuringpoint ID
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [table]
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetMeasuringPoint(id, fields, table, language, options) {
      return WeatherApiFp(configuration).weatherGetMeasuringPoint(id, fields, table, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Measuringpoint LIST (Opendata)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [skiareafilter] Skiarea ID
     * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
      return WeatherApiFp(configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Current Realtime Weather LIVE
     * @param {string} [language] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetRealtimeWeather(language, options) {
      return WeatherApiFp(configuration).weatherGetRealtimeWeather(language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Snowreport Data LIVE by Skiarea
     * @param {string} skiareaid Skiarea ID
     * @param {string} [lang] Language available de,it,en, default: en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetSnowReportBase(skiareaid, lang, options) {
      return WeatherApiFp(configuration).weatherGetSnowReportBase(skiareaid, lang, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Current Suedtirol Weather LIVE (Opendata)
     * @param {string} [language] Language available de,it,en, default: en
     * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    weatherGetWeather(language, locfilter, options) {
      return WeatherApiFp(configuration).weatherGetWeather(language, locfilter, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * WeatherApi - object-oriented interface
 * @export
 * @class WeatherApi
 * @extends {BaseAPI}
 */

class weather_api_WeatherApi extends base_BaseAPI {
  /**
   *
   * @summary GET Snowreport Data LIVE
   * @param {string} [lang] Language available de,it,en, default: en
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */
  weatherGetApiWeatherSnowReport(lang, options) {
    return WeatherApiFp(this.configuration).weatherGetApiWeatherSnowReport(lang, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET District Weather LIVE (Opendata)
   * @param {string} locfilter Locfilter (possible values: tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), ALSO POSSIBLE Number 1 to 7 for 7 stations total, &#x27;null&#x27; &#x3D; No Filter)
   * @param {string} [language] Language available de,it,en, default: en
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetDistrictWeather(locfilter, language, options) {
    return WeatherApiFp(this.configuration).weatherGetDistrictWeather(locfilter, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Measuringpoint SINGLE
   * @param {string} id Measuringpoint ID
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [table]
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetMeasuringPoint(id, fields, table, language, options) {
    return WeatherApiFp(this.configuration).weatherGetMeasuringPoint(id, fields, table, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Measuringpoint LIST (Opendata)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of ODHActivityPoi IDs), (default:&#x27;null&#x27;)
   * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
   * @param {string} [skiareafilter] Skiarea ID
   * @param {boolean} [odhactive] ODH Active (Published) ODHActivityPoi Filter (Refers to field SmgActive) (possible Values: &#x27;true&#x27; only published ODHActivityPoi, &#x27;false&#x27; only not published ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active ODHActivityPoi Filter (possible Values: &#x27;true&#x27; only active ODHActivityPoi, &#x27;false&#x27; only not active ODHActivityPoi, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
   * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options) {
    return WeatherApiFp(this.configuration).weatherGetMeasuringPoints(idlist, locfilter, areafilter, skiareafilter, odhactive, active, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Current Realtime Weather LIVE
   * @param {string} [language] Language available de,it,en, default: en
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetRealtimeWeather(language, options) {
    return WeatherApiFp(this.configuration).weatherGetRealtimeWeather(language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Snowreport Data LIVE by Skiarea
   * @param {string} skiareaid Skiarea ID
   * @param {string} [lang] Language available de,it,en, default: en
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetSnowReportBase(skiareaid, lang, options) {
    return WeatherApiFp(this.configuration).weatherGetSnowReportBase(skiareaid, lang, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Current Suedtirol Weather LIVE (Opendata)
   * @param {string} [language] Language available de,it,en, default: en
   * @param {string} [locfilter] Locfilter (possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction), &#x27;&#x27; &#x3D; No Filter). IF a Locfilter is set, only Stationdata is provided.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */


  weatherGetWeather(language, locfilter, options) {
    return WeatherApiFp(this.configuration).weatherGetWeather(language, locfilter, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/apis/webcam-info-api.ts




/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
 // Some imports not used depending on template conditions
// @ts-ignore


/**
 * WebcamInfoApi - axios parameter creator
 * @export
 */

const WebcamInfoApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary GET Webcam List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGet: async (pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options = {}) => {
      const localVarPath = `/api/WebcamInfo`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (pagenumber !== undefined) {
        localVarQueryParameter['pagenumber'] = pagenumber;
      }

      if (pagesize !== undefined) {
        localVarQueryParameter['pagesize'] = pagesize;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (idlist !== undefined) {
        localVarQueryParameter['idlist'] = idlist;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (seed !== undefined) {
        localVarQueryParameter['seed'] = seed;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Webcam Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGetApiWebcamInfoById: async (id, fields, language, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling webcamInfoGetApiWebcamInfoById.');
      }

      const localVarPath = `/api/WebcamInfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },

    /**
     *
     * @summary GET Webcam Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGetWebcamListReduced: async (language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options = {}) => {
      const localVarPath = `/api/WebcamInfoReduced`; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {}; // authentication oauth2 required
      // oauth required

      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function' ? await configuration.accessToken("oauth2", [""]) : await configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }

      if (language !== undefined) {
        localVarQueryParameter['language'] = language;
      }

      if (source !== undefined) {
        localVarQueryParameter['source'] = source;
      }

      if (active !== undefined) {
        localVarQueryParameter['active'] = active;
      }

      if (odhactive !== undefined) {
        localVarQueryParameter['odhactive'] = odhactive;
      }

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude;
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude;
      }

      if (radius !== undefined) {
        localVarQueryParameter['radius'] = radius;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (updatefrom !== undefined) {
        localVarQueryParameter['updatefrom'] = updatefrom;
      }

      const query = new URLSearchParams(localVarUrlObj.search);

      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }

      for (const key in options.query) {
        query.set(key, options.query[key]);
      }

      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * WebcamInfoApi - functional programming interface
 * @export
 */

const WebcamInfoApiFp = function (configuration) {
  return {
    /**
     *
     * @summary GET Webcam List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options) {
      const localVarAxiosArgs = await WebcamInfoApiAxiosParamCreator(configuration).webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Webcam Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async webcamInfoGetApiWebcamInfoById(id, fields, language, options) {
      const localVarAxiosArgs = await WebcamInfoApiAxiosParamCreator(configuration).webcamInfoGetApiWebcamInfoById(id, fields, language, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },

    /**
     *
     * @summary GET Webcam Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options) {
      const localVarAxiosArgs = await WebcamInfoApiAxiosParamCreator(configuration).webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options);
      return (axios = axios_default.a, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }

  };
};
/**
 * WebcamInfoApi - factory interface
 * @export
 */

const WebcamInfoApiFactory = function (configuration, basePath, axios) {
  return {
    /**
     *
     * @summary GET Webcam List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options) {
      return WebcamInfoApiFp(configuration).webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Webcam Single
     * @param {string} id ID of the Webcam
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGetApiWebcamInfoById(id, fields, language, options) {
      return WebcamInfoApiFp(configuration).webcamInfoGetApiWebcamInfoById(id, fields, language, options).then(request => request(axios, basePath));
    },

    /**
     *
     * @summary GET Webcam Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options) {
      return WebcamInfoApiFp(configuration).webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options).then(request => request(axios, basePath));
    }

  };
};
/**
 * WebcamInfoApi - object-oriented interface
 * @export
 * @class WebcamInfoApi
 * @extends {BaseAPI}
 */

class webcam_info_api_WebcamInfoApi extends base_BaseAPI {
  /**
   *
   * @summary GET Webcam List
   * @param {number} [pagenumber] Pagenumber, (default:1)
   * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
   * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
   * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Gastronomy IDs), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
   * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, not provided disables Random Sorting, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null &#x3D; disabled)
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebcamInfoApi
   */
  webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options) {
    return WebcamInfoApiFp(this.configuration).webcamInfoGet(pagenumber, pagesize, source, idlist, active, odhactive, seed, latitude, longitude, radius, updatefrom, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Webcam Single
   * @param {string} id ID of the Webcam
   * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebcamInfoApi
   */


  webcamInfoGetApiWebcamInfoById(id, fields, language, options) {
    return WebcamInfoApiFp(this.configuration).webcamInfoGetApiWebcamInfoById(id, fields, language, options).then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary GET Webcam Reduced List
   * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
   * @param {string} [source] Source Filter(String, ), (default:&#x27;null&#x27;)
   * @param {boolean} [active] Active Webcam Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
   * @param {boolean} [odhactive] ODH Active (refers to field SmgActive) (Published) Webcam Filter (possible Values: &#x27;true&#x27; only published Webcam, &#x27;false&#x27; only not published Webcam, (default:&#x27;null&#x27;)
   * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
   * @param {string} [radius] Radius to Search in KM. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
   * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
   * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebcamInfoApi
   */


  webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options) {
    return WebcamInfoApiFp(this.configuration).webcamInfoGetWebcamListReduced(language, source, active, odhactive, latitude, longitude, radius, fields, updatefrom, options).then(request => request(this.axios, this.basePath));
  }

}
// CONCATENATED MODULE: ./src/api/api.ts
/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */















// CONCATENATED MODULE: ./src/api/configuration.ts
class Configuration {
  constructor(param = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.baseOptions = param.baseOptions;
  }

}
// CONCATENATED MODULE: ./src/api/index.ts
/* tslint:disable */

/* eslint-disable */

/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0eb59858-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Paging.vue?vue&type=template&id=356619ac&scoped=true&
var Pagingvue_type_template_id_356619ac_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.totalPages > 1)?_c('div',{staticClass:"paging"},[(_vm.currentPage !== 1)?_c('div',{staticClass:"back",on:{"click":_vm.lastPage}},[_vm._v(" "+_vm._s(_vm.$t('paging.back'))+" ")]):_vm._e(),(_vm.totalPages < 8)?_c('div',_vm._l((_vm.totalPages),function(page){return _c('span',{key:page,staticClass:"item",class:{ 'selected-item': _vm.currentPage === page },on:{"click":function($event){return _vm.goToPage(page)}}},[_vm._v(" "+_vm._s(page)+" ")])}),0):_c('div',[(_vm.currentPage < 4)?_c('div',[_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === 1 },on:{"click":function($event){return _vm.goToPage(1)}}},[_vm._v("1")]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === 2 },on:{"click":function($event){return _vm.goToPage(2)}}},[_vm._v("2")]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === 3 },on:{"click":function($event){return _vm.goToPage(3)}}},[_vm._v("3")]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === 4 },on:{"click":function($event){return _vm.goToPage(4)}}},[_vm._v("4")]),_c('span',{staticClass:"item"},[_vm._v("...")]),_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(_vm.totalPages)}}},[_vm._v(_vm._s(_vm.totalPages))])]):(_vm.currentPage < _vm.totalPages - 2)?_c('div',[_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(1)}}},[_vm._v("1")]),_c('span',{staticClass:"item"},[_vm._v("...")]),_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(_vm.currentPage - 1)}}},[_vm._v(_vm._s(_vm.currentPage - 1))]),_c('span',{staticClass:"item selected-item"},[_vm._v(_vm._s(_vm.currentPage))]),_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(_vm.currentPage + 1)}}},[_vm._v(_vm._s(_vm.currentPage + 1))]),_c('span',{staticClass:"item"},[_vm._v("...")]),_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(_vm.totalPages)}}},[_vm._v(_vm._s(_vm.totalPages))])]):_c('div',[_c('span',{staticClass:"item",on:{"click":function($event){return _vm.goToPage(1)}}},[_vm._v("1")]),_c('span',{staticClass:"item"},[_vm._v("...")]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === _vm.totalPages - 3 },on:{"click":function($event){return _vm.goToPage(_vm.totalPages - 3)}}},[_vm._v(_vm._s(_vm.totalPages - 3))]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === _vm.totalPages - 2 },on:{"click":function($event){return _vm.goToPage(_vm.totalPages - 2)}}},[_vm._v(_vm._s(_vm.totalPages - 2))]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === _vm.totalPages - 1 },on:{"click":function($event){return _vm.goToPage(_vm.totalPages - 1)}}},[_vm._v(_vm._s(_vm.totalPages - 1))]),_c('span',{staticClass:"item",class:{ 'selected-item': _vm.currentPage === _vm.totalPages },on:{"click":function($event){return _vm.goToPage(_vm.totalPages)}}},[_vm._v(_vm._s(_vm.totalPages))])])]),(_vm.currentPage !== _vm.totalPages)?_c('div',{staticClass:"next",on:{"click":_vm.nextPage}},[_vm._v(" "+_vm._s(_vm.$t('paging.next'))+" ")]):_vm._e()]):_vm._e()}
var Pagingvue_type_template_id_356619ac_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/Paging.vue?vue&type=template&id=356619ac&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Paging.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var Pagingvue_type_script_lang_js_ = ({
  name: 'Paging',
  props: {
    currentPage: {
      required: true,
      type: Number
    },
    totalPages: {
      required: true,
      type: Number
    }
  },
  methods: {
    nextPage() {
      this.$emit('next-page');
    },

    lastPage() {
      this.$emit('last-page');
    },

    goToPage(pageNum) {
      this.$emit('go-to-page', pageNum);
    }

  }
});
// CONCATENATED MODULE: ./src/components/Paging.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_Pagingvue_type_script_lang_js_ = (Pagingvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/Paging.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("2570")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = normalizeComponent(
  components_Pagingvue_type_script_lang_js_,
  Pagingvue_type_template_id_356619ac_scoped_true_render,
  Pagingvue_type_template_id_356619ac_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "356619ac",
  null
  ,true
)

/* harmony default export */ var Paging = (component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ItemsList.vue?vue&type=script&lang=js&

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var ItemsListvue_type_script_lang_js_ = ({
  components: {
    Paging: Paging
  },
  props: {
    language: {
      type: String,
      default: 'en'
    },
    contentType: {
      type: String,
      default: 'Gastronomy'
    },
    contentIdList: {
      type: String,
      default: null
    },
    pageSize: {
      type: Number,
      default: 20
    },
    category: {
      type: String,
      default: null
    },
    currentPage: {
      type: Number,
      default: 1
    }
  },

  data() {
    return {
      items: [],
      gastronomyTypes: [],
      activityTypes: [],
      totalPages: 0,
      isLoading: false
    };
  },

  created() {
    if (this.contentType === 'Gastronomy') {
      this.loadGastronomyTypeList();
      this.loadGastronomyList(this.currentPage);
    } else if (this.contentType === 'Activity') {
      this.loadActivityTypeList();
      this.loadActivityList(this.currentPage);
    } else if (this.contentType === 'POI') {
      this.loadPoiList(this.currentPage);
    }
  },

  computed: {
    placeholderImage() {
      if (this.contentType === 'Gastronomy') {
        return __webpack_require__("06d0");
      } else if (this.contentType === 'Activity') {
        return __webpack_require__("aec0");
      } else {
        return __webpack_require__("fab9");
      }
    }

  },
  methods: {
    nextPage() {
      this.items = [];

      if (this.contentType === 'Gastronomy') {
        this.loadGastronomyList(this.currentPage + 1);
      } else if (this.contentType === 'Activity') {
        this.loadActivityList(this.currentPage + 1);
      } else {
        this.loadPoiList(this.currentPage + 1);
      }

      this.$emit('change-current-page', this.currentPage + 1);
    },

    lastPage() {
      this.items = [];

      if (this.contentType === 'Gastronomy') {
        this.loadGastronomyList(this.currentPage - 1);
      } else if (this.contentType === 'Activity') {
        this.loadActivityList(this.currentPage - 1);
      } else {
        this.loadPoiList(this.currentPage - 1);
      }

      this.$emit('change-current-page', this.currentPage - 1);
    },

    goToPage(pageNum) {
      this.items = [];

      if (this.contentType === 'Gastronomy') {
        this.loadGastronomyList(pageNum);
      } else if (this.contentType === 'Activity') {
        this.loadActivityList(pageNum);
      } else {
        this.loadPoiList(pageNum);
      }

      this.$emit('change-current-page', pageNum);
    },

    showDetail(contentId) {
      this.$emit('show-detail', contentId);
    },

    loadActivityTypeList() {
      const activityApi = new activity_api_ActivityApi();
      activityApi.activityGetAllActivityTypesList().then(value => {
        this.activityTypes = value.data;
        console.log(value);
      });
    },

    loadActivityList(pageNum) {
      this.isLoading = true;
      const activityApi = new activity_api_ActivityApi();
      activityApi.activityGetActivityList(null, pageNum, this.pageSize, this.category, null, this.contentIdList, null, null, null, null, null, null, null, null, true, true, null, null, null, null, null, null, null, []).then(value => {
        var _value$data$Items, _value$data, _value$data2, _value$data3;

        this.items = (_value$data$Items = value === null || value === void 0 ? void 0 : (_value$data = value.data) === null || _value$data === void 0 ? void 0 : _value$data.Items) !== null && _value$data$Items !== void 0 ? _value$data$Items : [];
        this.$emit('change-current-page', value === null || value === void 0 ? void 0 : (_value$data2 = value.data) === null || _value$data2 === void 0 ? void 0 : _value$data2.CurrentPage);
        this.totalPages = value === null || value === void 0 ? void 0 : (_value$data3 = value.data) === null || _value$data3 === void 0 ? void 0 : _value$data3.TotalPages;
        console.log(value);
        this.isLoading = false;
      });
    },

    loadGastronomyTypeList() {
      const gastronomyApi = new gastronomy_api_GastronomyApi();
      gastronomyApi.gastronomyGetAllGastronomyTypesList().then(value => {
        this.gastronomyTypes = value.data;
        console.log(value);
      });
    },

    loadGastronomyList(pageNum) {
      this.isLoading = true;
      const gastronomyApi = new gastronomy_api_GastronomyApi();
      gastronomyApi.gastronomyGetGastronomyList(pageNum, this.pageSize, this.contentIdList, null, null, null, this.category, null, null, null, true, true, null, null, null, null, null, null, null, null).then(value => {
        var _value$data$Items2, _value$data4, _value$data5, _value$data6;

        this.items = (_value$data$Items2 = value === null || value === void 0 ? void 0 : (_value$data4 = value.data) === null || _value$data4 === void 0 ? void 0 : _value$data4.Items) !== null && _value$data$Items2 !== void 0 ? _value$data$Items2 : [];
        this.$emit('change-current-page', value === null || value === void 0 ? void 0 : (_value$data5 = value.data) === null || _value$data5 === void 0 ? void 0 : _value$data5.CurrentPage);
        this.totalPages = value === null || value === void 0 ? void 0 : (_value$data6 = value.data) === null || _value$data6 === void 0 ? void 0 : _value$data6.TotalPages;
        console.log(value);
        this.isLoading = false;
      });
    },

    loadPoiList(pageNum) {
      this.isLoading = true;
      const poiApi = new poi_api_PoiApi();
      poiApi.poiGetPoiFiltered(pageNum, this.pageSize, this.category, null, this.contentIdList, null, null, null, null, true, true, null, null, null, null, null, null, null, null, []).then(value => {
        var _value$data$Items3, _value$data7, _value$data8, _value$data9;

        this.items = (_value$data$Items3 = value === null || value === void 0 ? void 0 : (_value$data7 = value.data) === null || _value$data7 === void 0 ? void 0 : _value$data7.Items) !== null && _value$data$Items3 !== void 0 ? _value$data$Items3 : [];
        this.$emit('change-current-page', value === null || value === void 0 ? void 0 : (_value$data8 = value.data) === null || _value$data8 === void 0 ? void 0 : _value$data8.CurrentPage);
        this.totalPages = value === null || value === void 0 ? void 0 : (_value$data9 = value.data) === null || _value$data9 === void 0 ? void 0 : _value$data9.TotalPages;
        console.log(value);
        this.isLoading = false;
      });
    },

    getGastronomyShortInfo(item) {
      var _item$ContactInfos, _item$ContactInfos$th, _item$ContactInfos3, _item$ContactInfos3$e, _item$ContactInfos4, _item$ContactInfos4$e;

      const shortInfo = [];
      shortInfo.push(...this.getGastronomyTypes(item));

      if (item !== null && item !== void 0 && (_item$ContactInfos = item.ContactInfos) !== null && _item$ContactInfos !== void 0 && (_item$ContactInfos$th = _item$ContactInfos[this.language]) !== null && _item$ContactInfos$th !== void 0 && _item$ContactInfos$th.City) {
        var _item$ContactInfos2;

        const location = this.$t('location') + ': ' + ((_item$ContactInfos2 = item.ContactInfos) === null || _item$ContactInfos2 === void 0 ? void 0 : _item$ContactInfos2[this.language].City);
        shortInfo.push(location);
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos3 = item.ContactInfos) !== null && _item$ContactInfos3 !== void 0 && (_item$ContactInfos3$e = _item$ContactInfos3.en) !== null && _item$ContactInfos3$e !== void 0 && _item$ContactInfos3$e.Phonenumber) {
        const telephone = this.$t('phone') + ': ' + item.ContactInfos.en.Phonenumber;
        shortInfo.push(telephone);
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos4 = item.ContactInfos) !== null && _item$ContactInfos4 !== void 0 && (_item$ContactInfos4$e = _item$ContactInfos4.en) !== null && _item$ContactInfos4$e !== void 0 && _item$ContactInfos4$e.Url) {
        const url = this.$t('web') + ': ' + item.ContactInfos.en.Url;
        shortInfo.push(url);
      }

      return shortInfo.filter(info => info != null).join(', ');
    },

    getGastronomyTypes(item) {
      const categoryCodeIds = item.CategoryCodes.map(code => this.gastronomyTypes.find(x => x.Id === code.Id));
      const categories = categoryCodeIds.map(category => {
        if (this.language === 'de') {
          var _category$TypeDesc$de, _category$TypeDesc;

          return (_category$TypeDesc$de = category === null || category === void 0 ? void 0 : (_category$TypeDesc = category.TypeDesc) === null || _category$TypeDesc === void 0 ? void 0 : _category$TypeDesc.de) !== null && _category$TypeDesc$de !== void 0 ? _category$TypeDesc$de : '-';
        } else if (this.language === 'it') {
          var _category$TypeDesc$it, _category$TypeDesc2;

          return (_category$TypeDesc$it = category === null || category === void 0 ? void 0 : (_category$TypeDesc2 = category.TypeDesc) === null || _category$TypeDesc2 === void 0 ? void 0 : _category$TypeDesc2.it) !== null && _category$TypeDesc$it !== void 0 ? _category$TypeDesc$it : '-';
        } else {
          var _category$TypeDesc$en, _category$TypeDesc3;

          return (_category$TypeDesc$en = category === null || category === void 0 ? void 0 : (_category$TypeDesc3 = category.TypeDesc) === null || _category$TypeDesc3 === void 0 ? void 0 : _category$TypeDesc3.en) !== null && _category$TypeDesc$en !== void 0 ? _category$TypeDesc$en : '-';
        }
      });
      return categories;
    },

    getActivityShortInfo(item) {
      var _item$ContactInfos5, _item$ContactInfos5$t, _item$ContactInfos7, _item$ContactInfos7$e, _item$ContactInfos8, _item$ContactInfos8$e;

      const shortInfo = [];
      shortInfo.push(...this.getActivityTypes(item));

      if (item !== null && item !== void 0 && (_item$ContactInfos5 = item.ContactInfos) !== null && _item$ContactInfos5 !== void 0 && (_item$ContactInfos5$t = _item$ContactInfos5[this.language]) !== null && _item$ContactInfos5$t !== void 0 && _item$ContactInfos5$t.City) {
        var _item$ContactInfos6;

        const location = this.$t('location') + ': ' + ((_item$ContactInfos6 = item.ContactInfos) === null || _item$ContactInfos6 === void 0 ? void 0 : _item$ContactInfos6[this.language].City);
        shortInfo.push(location);
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos7 = item.ContactInfos) !== null && _item$ContactInfos7 !== void 0 && (_item$ContactInfos7$e = _item$ContactInfos7.en) !== null && _item$ContactInfos7$e !== void 0 && _item$ContactInfos7$e.Phonenumber) {
        const telephone = this.$t('phone') + ': ' + item.ContactInfos.en.Phonenumber;
        shortInfo.push(telephone);
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos8 = item.ContactInfos) !== null && _item$ContactInfos8 !== void 0 && (_item$ContactInfos8$e = _item$ContactInfos8.en) !== null && _item$ContactInfos8$e !== void 0 && _item$ContactInfos8$e.Url) {
        const url = this.$t('web') + ': ' + item.ContactInfos.en.Url;
        shortInfo.push(url);
      }

      if (item !== null && item !== void 0 && item.Difficulty) {
        const difficulty = 'Difficulty: ' + (item === null || item === void 0 ? void 0 : item.Difficulty);
        shortInfo.push(difficulty);
      }

      return shortInfo.filter(info => info != null).join(', ');
    },

    getActivityTypes(item) {
      let categoryCodeIds = item.ActivityTypes.map(code => this.activityTypes.find(x => x.Id === code.Id));
      categoryCodeIds = categoryCodeIds.filter(function (el) {
        return el != null;
      });
      const categories = categoryCodeIds.map(category => {
        if (this.language === 'de') {
          var _category$TypeDesc$de2, _category$TypeDesc4;

          return (_category$TypeDesc$de2 = category === null || category === void 0 ? void 0 : (_category$TypeDesc4 = category.TypeDesc) === null || _category$TypeDesc4 === void 0 ? void 0 : _category$TypeDesc4.de) !== null && _category$TypeDesc$de2 !== void 0 ? _category$TypeDesc$de2 : '-';
        } else if (this.language === 'it') {
          var _category$TypeDesc$it2, _category$TypeDesc5;

          return (_category$TypeDesc$it2 = category === null || category === void 0 ? void 0 : (_category$TypeDesc5 = category.TypeDesc) === null || _category$TypeDesc5 === void 0 ? void 0 : _category$TypeDesc5.it) !== null && _category$TypeDesc$it2 !== void 0 ? _category$TypeDesc$it2 : '-';
        } else {
          var _category$TypeDesc$en2, _category$TypeDesc6;

          return (_category$TypeDesc$en2 = category === null || category === void 0 ? void 0 : (_category$TypeDesc6 = category.TypeDesc) === null || _category$TypeDesc6 === void 0 ? void 0 : _category$TypeDesc6.en) !== null && _category$TypeDesc$en2 !== void 0 ? _category$TypeDesc$en2 : '-';
        }
      });
      return categories;
    },

    getTitle(item, language) {
      var _item$Detail$language, _item$Detail, _item$Detail$language2;

      return (_item$Detail$language = item === null || item === void 0 ? void 0 : (_item$Detail = item.Detail) === null || _item$Detail === void 0 ? void 0 : (_item$Detail$language2 = _item$Detail[language]) === null || _item$Detail$language2 === void 0 ? void 0 : _item$Detail$language2.Title) !== null && _item$Detail$language !== void 0 ? _item$Detail$language : '';
    },

    getPoiShortInfo(item) {
      var _item$ContactInfos9, _item$ContactInfos9$t, _item$ContactInfos11, _item$ContactInfos11$, _item$ContactInfos12, _item$ContactInfos12$;

      const shortInfo = [];
      shortInfo.push(...this.getPoiTypes(item));

      if (item !== null && item !== void 0 && (_item$ContactInfos9 = item.ContactInfos) !== null && _item$ContactInfos9 !== void 0 && (_item$ContactInfos9$t = _item$ContactInfos9[this.language]) !== null && _item$ContactInfos9$t !== void 0 && _item$ContactInfos9$t.City) {
        var _item$ContactInfos10;

        shortInfo.push(this.$t('location') + ': ' + ((_item$ContactInfos10 = item.ContactInfos) === null || _item$ContactInfos10 === void 0 ? void 0 : _item$ContactInfos10[this.language].City));
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos11 = item.ContactInfos) !== null && _item$ContactInfos11 !== void 0 && (_item$ContactInfos11$ = _item$ContactInfos11.en) !== null && _item$ContactInfos11$ !== void 0 && _item$ContactInfos11$.Phonenumber) {
        shortInfo.push(this.$t('phone') + ': ' + item.ContactInfos.en.Phonenumber);
      }

      if (item !== null && item !== void 0 && (_item$ContactInfos12 = item.ContactInfos) !== null && _item$ContactInfos12 !== void 0 && (_item$ContactInfos12$ = _item$ContactInfos12.en) !== null && _item$ContactInfos12$ !== void 0 && _item$ContactInfos12$.Url) {
        shortInfo.push(this.$t('web') + ': ' + item.ContactInfos.en.Url);
      }

      return shortInfo.filter(info => info != null).join(', ');
    },

    getPoiTypes(item) {
      const poiType = item.AdditionalPoiInfos[this.language].MainType;
      const subType = item.AdditionalPoiInfos[this.language].SubType;
      const categories = [];

      if (poiType !== null) {
        categories.push(poiType);
      }

      if (subType !== null) {
        categories.push(subType);
      }

      return categories;
    }

  }
});
// CONCATENATED MODULE: ./src/components/ItemsList.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_ItemsListvue_type_script_lang_js_ = (ItemsListvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/ItemsList.vue



function ItemsList_injectStyles (context) {
  
  var style0 = __webpack_require__("e6d1")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var ItemsList_component = normalizeComponent(
  components_ItemsListvue_type_script_lang_js_,
  ItemsListvue_type_template_id_91f8f1ca_scoped_true_render,
  ItemsListvue_type_template_id_91f8f1ca_scoped_true_staticRenderFns,
  false,
  ItemsList_injectStyles,
  "91f8f1ca",
  null
  ,true
)

/* harmony default export */ var ItemsList = (ItemsList_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0eb59858-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ItemDetail.vue?vue&type=template&id=8df8e56c&scoped=true&
var ItemDetailvue_type_template_id_8df8e56c_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.isListAvailable)?_c('div',{staticClass:"back-button",on:{"click":function($event){$event.preventDefault();return _vm.close($event)}}},[_c('img',{attrs:{"src":__webpack_require__("b8b6")}}),_c('span',{staticStyle:{"color":"#888888"}},[_vm._v(_vm._s(_vm.$t('back')))])]):_vm._e(),(_vm.item)?_c('div',{staticClass:"item"},[_c('div',{staticClass:"title-container",style:(_vm.titleImage)},[_c('div',{staticClass:"title"},[_c('h1',[_vm._v(_vm._s(_vm.itemDetail.Title))]),(_vm.itemCategories)?_c('div',{staticClass:"props"},[_c('div',[(_vm.item.CategoryCodes.length > 1)?_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('categories'))+":")]):_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('category'))+":")]),_vm._v(" "+_vm._s(_vm.itemCategories)+" ")])]):_vm._e(),(_vm.itemAdditionalPoiInfos)?_c('div',[(_vm.itemAdditionalPoiInfos.MainType)?_c('div',{staticClass:"props"},[_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('category'))+":")]),_vm._v(_vm._s(_vm.itemAdditionalPoiInfos.MainType)+" ")]):_vm._e(),(_vm.itemAdditionalPoiInfos.SubType)?_c('div',{staticClass:"props"},[_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('subcategory'))+":")]),_vm._v(_vm._s(_vm.itemAdditionalPoiInfos.SubType)+" ")]):_vm._e()]):_vm._e()])]),_c('div',{staticClass:"detail-box"},[_c('ul',{staticClass:"props"},[(_vm.item.Difficulty)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("4c48")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('difficulty'))+":")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.Difficulty))])]):_vm._e(),(_vm.item.Altitude)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("cf3f")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('altitude'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.Altitude)+_vm._s(_vm.item.AltitudeUnitofMeasure))])]):_vm._e(),(_vm.item.AltitudeDifference)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("cf3f")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('props.AltitudeDifference'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.AltitudeDifference)+_vm._s(_vm.item.AltitudeUnitofMeasure))])]):_vm._e(),(_vm.item.AltitudeHighestPoint)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("1717")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('props.AltitudeHighestPoint'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.AltitudeHighestPoint)+_vm._s(_vm.item.AltitudeUnitofMeasure))])]):_vm._e(),(_vm.item.AltitudeLowestPoint)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("42c6")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('props.AltitudeLowestPoint'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.AltitudeLowestPoint)+_vm._s(_vm.item.AltitudeUnitofMeasure))])]):_vm._e(),(_vm.item.DistanceDuration)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("7b50")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('props.DistanceDuration'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.DistanceDuration))])]):_vm._e(),(_vm.item.DistanceLength)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("da15")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('props.DistanceLength'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.item.DistanceLength))])]):_vm._e(),(_vm.googleMapsLink)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("8d59")}}),_c('a',{attrs:{"href":_vm.googleMapsLink,"target":"_blank"}},[_vm._v("Google Maps")])]):_vm._e(),(_vm.itemContactInfos.City)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("8d59")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('location'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.itemContactInfos.City))])]):_vm._e(),(_vm.itemContactInfos.Url)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("a349")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('web'))+": ")]),_c('a',{attrs:{"href":_vm.itemContactInfos.Url,"target":"_blank"}},[_vm._v(" "+_vm._s(_vm.itemContactInfos.Url)+" ")])]):_vm._e(),(_vm.itemContactInfos.Phonenumber)?_c('li',[_c('img',{attrs:{"src":__webpack_require__("0e09")}}),_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t('phone'))+": ")]),_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.itemContactInfos.Phonenumber))])]):_vm._e(),(
            _vm.itemOperationSchedule &&
              (_vm.itemOperationSchedule.Type === '1' ||
                _vm.itemOperationSchedule === '2')
          )?_c('li',{staticClass:"info-item"},[_c('img',{attrs:{"src":__webpack_require__("1649")}}),_c('span',{style:([
              _vm.itemOperationSchedule[0].Type === '1'
                ? { color: '#9BC320' }
                : { color: 'red' } ])},[_vm._v(_vm._s(_vm.$t(("scheduleTypes." + (_vm.itemOperationSchedule[0].Type)))))])]):_vm._e()])]),(_vm.itemDetail.BaseText)?_c('div',{staticClass:"text",domProps:{"innerHTML":_vm._s(_vm.itemDetail.BaseText)}}):_vm._e(),(_vm.itemOperationSchedule.length)?_c('div',[_c('div',{staticClass:"subtitle"},[_vm._v(_vm._s(_vm.$t('operationSchedule')))]),_c('div',_vm._l((_vm.itemOperationSchedule),function(schedule,i){return _c('div',{key:i},[(schedule.Type === '1' || schedule.Type === '2')?_c('div',[(schedule.OperationScheduleTime)?_c('ul',_vm._l((schedule.OperationScheduleTime),function(time,j){return _c('div',{key:j,staticClass:"text"},[_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(_vm.$t(("timeCodes." + (time.Timecode)))))]),_vm._v(" von "+_vm._s(time.Start)+" bis "+_vm._s(time.End)+" ("+_vm._s(_vm.getItemScheduleDays(time))+") ")])}),0):_vm._e()]):_vm._e(),(schedule.Type === '3')?_c('div',[_vm._v(" "+_vm._s(_vm._f("dateFormat")(schedule.Start))+" bis "+_vm._s(_vm._f("dateFormat")(schedule.Stop))+" ")]):_vm._e()])}),0)]):_vm._e(),(Object.keys(_vm.itemProps).length)?_c('div',{staticClass:"additional-props-box"},[_c('ul',{staticClass:"props",class:{ single: Object.keys(_vm.itemProps).length === 1 }},_vm._l((_vm.itemProps),function(value,key){return _c('li',{key:key,staticClass:"text"},[_c('span',{staticClass:"prop-key"},[_vm._v(_vm._s(_vm.$t(("props." + key)))+":")]),_vm._v(" "+_vm._s(value === true ? _vm.$t('yes') : value)+" ")])}),0)]):_vm._e(),(_vm.itemCeremonies.length)?_c('div',[_c('div',{staticClass:"subtitle"},[_vm._v(_vm._s(_vm.$t('ceremonies')))]),_c('ul',_vm._l((_vm.itemCeremonies),function(value,i){return _c('li',{key:i,staticClass:"text"},[_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(value.name))]),_vm._v(" (max. "+_vm._s(value.maxSeatingCapacity)+" Personen) ")])}),0)]):_vm._e(),(_vm.itemDishRates.length)?_c('div',[_c('div',{staticClass:"subtitle"},[_vm._v(_vm._s(_vm.$t('dishRates')))]),_c('ul',_vm._l((_vm.itemDishRates),function(value,i){return _c('li',{key:i,staticClass:"text"},[_c('span',{staticClass:"text-dark"},[_vm._v(_vm._s(value.name))]),_vm._v(" (von "+_vm._s(value.minAmount)+" bis "+_vm._s(value.maxAmount)+" "+_vm._s(value.currencyCode)+") ")])}),0)]):_vm._e(),_vm._l((_vm.itemGastronomyTypes),function(type){return _c('div',{key:type.type},[_c('div',{staticStyle:{"text-align":"center","color":"#949494"}},[_vm._v(_vm._s(type.name))]),_c('div',{staticClass:"gastronomyTypes"},_vm._l((type.values),function(value,i){return _c('div',{key:i,staticClass:"category"},[_vm._v(" "+_vm._s(value)+" ")])}),0)])}),(_vm.imageGallery)?_c('div',_vm._l((_vm.imageGallery),function(image,i){return _c('img',{key:i,staticClass:"image",attrs:{"src":image.ImageUrl,"height":"200","width":"200"},on:{"click":function($event){return _vm.openImageDetail(image)}}})}),0):_vm._e(),_c('small',{staticClass:"text"},[_vm._v(" "+_vm._s(_vm.$t('lastChange'))+": "+_vm._s(_vm._f("dateFormat")(_vm.item.LastChange))+" ")])],2):_vm._e(),(_vm.showImage)?_c('image-detail',{attrs:{"imgUrl":_vm.imageUrl,"hasMultipleImgs":_vm.hasMultipleImgs},on:{"close":_vm.closeImageDetail,"next-image":_vm.nextImage,"last-image":_vm.lastImage}}):_vm._e()],1)}
var ItemDetailvue_type_template_id_8df8e56c_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/ItemDetail.vue?vue&type=template&id=8df8e56c&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0eb59858-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ImageDetail.vue?vue&type=template&id=530dccbf&scoped=true&
var ImageDetailvue_type_template_id_530dccbf_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"modal"},[_c('span',{staticClass:"close",on:{"click":_vm.closeImage}},[_vm._v("×")]),_c('div',{staticClass:"modal-content",staticStyle:{"display":"flex","align-items":"center","justify-content":"space-between"},style:(_vm.imageStyle)},[(_vm.hasMultipleImgs)?_c('div',{staticClass:"img-button",on:{"click":_vm.lastImage}},[_c('img',{attrs:{"src":__webpack_require__("b8b6"),"width":"50","height":"50"}})]):_vm._e(),(_vm.hasMultipleImgs)?_c('div',{staticClass:"img-button",on:{"click":_vm.nextImage}},[_c('img',{attrs:{"src":__webpack_require__("ac9e"),"width":"50","height":"50"}})]):_vm._e()])])}
var ImageDetailvue_type_template_id_530dccbf_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/ImageDetail.vue?vue&type=template&id=530dccbf&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ImageDetail.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var ImageDetailvue_type_script_lang_js_ = ({
  name: 'ImageDetail',
  props: {
    imgUrl: {
      type: String
    },
    hasMultipleImgs: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    imageStyle() {
      return {
        backgroundImage: 'url(' + this.imgUrl + ') ',
        backgroundSize: 'contain',
        backgroundPosition: 'center',
        minHeight: '100px',
        backgroundRepeat: 'no-repeat'
      };
    }

  },
  methods: {
    closeImage() {
      this.$emit('close');
    },

    nextImage() {
      this.$emit('next-image');
    },

    lastImage() {
      this.$emit('last-image');
    }

  }
});
// CONCATENATED MODULE: ./src/components/ImageDetail.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_ImageDetailvue_type_script_lang_js_ = (ImageDetailvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/ImageDetail.vue



function ImageDetail_injectStyles (context) {
  
  var style0 = __webpack_require__("2876")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var ImageDetail_component = normalizeComponent(
  components_ImageDetailvue_type_script_lang_js_,
  ImageDetailvue_type_template_id_530dccbf_scoped_true_render,
  ImageDetailvue_type_template_id_530dccbf_scoped_true_staticRenderFns,
  false,
  ImageDetail_injectStyles,
  "530dccbf",
  null
  ,true
)

/* harmony default export */ var ImageDetail = (ImageDetail_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ItemDetail.vue?vue&type=script&lang=js&

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


const GASTRONOMY_TYPES = ['DishCodes', 'CuisineCodes', 'FacilityCodes_CreditCard', 'FacilityCodes_Equipment', 'FacilityCodes_QualitySeals'];
const SCHEDULE_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thuresday', 'Friday', 'Saturday', 'Sunday'];
/* harmony default export */ var ItemDetailvue_type_script_lang_js_ = ({
  components: {
    ImageDetail: ImageDetail
  },
  props: {
    contentId: {
      type: String,
      required: true
    },
    contentType: {
      type: String,
      required: true
    },
    isListAvailable: {
      type: Boolean,
      default: false
    },
    language: {
      type: String,
      default: 'de'
    }
  },

  data() {
    return {
      item: null,
      gastronomyTypes: [],
      showImage: false,
      imageUrl: null,
      selectedImage: null
    };
  },

  computed: {
    titleImage() {
      var _this$item;

      const image = (_this$item = this.item) === null || _this$item === void 0 ? void 0 : _this$item.ImageGallery[0];

      if (image == null) {
        return {};
      } else {
        return {
          backgroundImage: 'url(' + image.ImageUrl + ') ',
          height: '400px',
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        };
      }
    },

    imageGallery() {
      var _this$item2;

      return ((_this$item2 = this.item) === null || _this$item2 === void 0 ? void 0 : _this$item2.ImageGallery) || [];
    },

    hasMultipleImgs() {
      return this.imageGallery.length > 1;
    },

    itemDetail() {
      var _this$item3, _this$item3$Detail;

      return ((_this$item3 = this.item) === null || _this$item3 === void 0 ? void 0 : (_this$item3$Detail = _this$item3.Detail) === null || _this$item3$Detail === void 0 ? void 0 : _this$item3$Detail[this.language]) || {};
    },

    itemContactInfos() {
      var _this$item4, _this$item4$ContactIn;

      return ((_this$item4 = this.item) === null || _this$item4 === void 0 ? void 0 : (_this$item4$ContactIn = _this$item4.ContactInfos) === null || _this$item4$ContactIn === void 0 ? void 0 : _this$item4$ContactIn[this.language]) || {};
    },

    googleMapsLink() {
      var _this$item5, _this$item6;

      return (_this$item5 = this.item) !== null && _this$item5 !== void 0 && _this$item5.Latitude && (_this$item6 = this.item) !== null && _this$item6 !== void 0 && _this$item6.Longitude ? `https://www.google.com/maps/search/?api=1&query=${this.item.Latitude},${this.item.Longitude}` : null;
    },

    itemAdditionalPoiInfos() {
      var _this$item7, _this$item7$Additiona;

      const infos = ((_this$item7 = this.item) === null || _this$item7 === void 0 ? void 0 : (_this$item7$Additiona = _this$item7.AdditionalPoiInfos) === null || _this$item7$Additiona === void 0 ? void 0 : _this$item7$Additiona[this.language]) || {};
      return infos.MainType || infos.SubType ? infos : null;
    },

    itemProps() {
      if (!this.item) {
        return {};
      }

      const showProps = ['IsOpen', 'AltitudeSumUp', 'AltitudeSumDown', 'HasFreeEntrance', 'BikeTransport', 'LiftAvailable', 'RunToValley', 'IsWithLight', 'HasRentals', 'IsPrepared', 'FeetClimb'];
      const props = {};

      for (const key of showProps) {
        if (!!this.item[key] && this.item[key] !== '0.0') {
          props[key] = this.item[key];
        }
      }

      return props;
    },

    itemCategories() {
      var _this$item8, _this$item8$CategoryC;

      return ((_this$item8 = this.item) === null || _this$item8 === void 0 ? void 0 : (_this$item8$CategoryC = _this$item8.CategoryCodes) === null || _this$item8$CategoryC === void 0 ? void 0 : _this$item8$CategoryC.map(c => {
        var _this$gastronomyTypes;

        return (_this$gastronomyTypes = this.gastronomyTypes.find(t => t.Id === c.Id)) === null || _this$gastronomyTypes === void 0 ? void 0 : _this$gastronomyTypes.TypeDesc[this.language];
      }).join(', ')) || '';
    },

    itemCeremonies() {
      var _this$item9, _this$item9$CapacityC;

      return ((_this$item9 = this.item) === null || _this$item9 === void 0 ? void 0 : (_this$item9$CapacityC = _this$item9.CapacityCeremony) === null || _this$item9$CapacityC === void 0 ? void 0 : _this$item9$CapacityC.map(c => {
        var _this$gastronomyTypes2;

        return {
          name: (_this$gastronomyTypes2 = this.gastronomyTypes.find(t => t.Id === c.Id)) === null || _this$gastronomyTypes2 === void 0 ? void 0 : _this$gastronomyTypes2.TypeDesc[this.language],
          maxSeatingCapacity: c.MaxSeatingCapacity
        };
      })) || [];
    },

    itemDishRates() {
      var _this$item10, _this$item10$DishRate;

      return ((_this$item10 = this.item) === null || _this$item10 === void 0 ? void 0 : (_this$item10$DishRate = _this$item10.DishRates) === null || _this$item10$DishRate === void 0 ? void 0 : _this$item10$DishRate.map(c => {
        var _this$gastronomyTypes3;

        return {
          name: (_this$gastronomyTypes3 = this.gastronomyTypes.find(t => t.Id === c.Id)) === null || _this$gastronomyTypes3 === void 0 ? void 0 : _this$gastronomyTypes3.TypeDesc[this.language],
          maxAmount: c.MaxAmount,
          minAmount: c.MinAmount,
          currencyCode: c.CurrencyCode
        };
      })) || [];
    },

    itemGastronomyTypes() {
      const filteredArray = this.gastronomyTypes.filter(t => this.item.Facilities.find(f => t.Id === f.Id));
      return GASTRONOMY_TYPES.map(type => ({
        name: this.$t(`gastronomyTypes.${type}`),
        values: filteredArray.filter(t => t.Type === type).map(t => t.TypeDesc[this.language])
      })).filter(t => t.values.length);
    },

    itemOperationSchedule() {
      return this.item.OperationSchedule.filter(s => {
        const start = new Date(s.Start);
        const stop = new Date(s.Stop);
        const now = new Date();
        return ((s.Type === '1' || s.Type === '2') && s.OperationScheduleTime || s.Type === '3') && now.getTime() <= stop.getTime() && now.getTime() >= start.getTime();
      });
    },

    getItemScheduleDays() {
      return scheduleTime => SCHEDULE_DAYS.map(day => scheduleTime[day] ? this.$t(`scheduleDays.${day}`) : null).filter(day => day != null).join(', ');
    }

  },

  created() {
    if (this.contentType === 'Gastronomy') {
      this.loadGastronomyItem();
      this.loadGastronomyTypeList();
    } else if (this.contentType === 'POI') {
      this.loadPoiItem();
    } else if (this.contentType === 'Activity') {
      this.loadActivityItem();
    }
  },

  filters: {
    dateFormat(dateString) {
      return new Date(dateString).toLocaleDateString();
    }

  },
  methods: {
    loadGastronomyItem() {
      new gastronomy_api_GastronomyApi().gastronomyGetGastronomySingle(this.contentId).then(value => {
        this.item = value.data;
      });
    },

    loadGastronomyTypeList() {
      new gastronomy_api_GastronomyApi().gastronomyGetAllGastronomyTypesList().then(value => {
        this.gastronomyTypes = value.data;
      });
    },

    loadPoiItem() {
      new poi_api_PoiApi().poiGetPoiSingle(this.contentId).then(value => {
        this.item = value.data;
      });
    },

    loadActivityItem() {
      new activity_api_ActivityApi().activityGetActivitySingle(this.contentId).then(value => {
        this.item = value.data;
      });
    },

    close() {
      this.$emit('close');
    },

    openImageDetail(image) {
      this.imageUrl = image.ImageUrl;
      console.log(this.imageUrl);
      this.selectedImage = image;
      this.showImage = true;
    },

    closeImageDetail() {
      this.showImage = false;
    },

    nextImage() {
      const currentIndex = this.imageGallery.indexOf(this.selectedImage);

      if (currentIndex + 1 < this.imageGallery.length) {
        this.selectedImage = this.imageGallery[currentIndex + 1];
        this.imageUrl = this.selectedImage.ImageUrl;
      } else {
        this.selectedImage = this.imageGallery[0];
        this.imageUrl = this.selectedImage.ImageUrl;
      }
    },

    lastImage() {
      const currentIndex = this.imageGallery.indexOf(this.selectedImage);

      if (currentIndex - 1 >= 0) {
        this.selectedImage = this.imageGallery[currentIndex - 1];
        this.imageUrl = this.selectedImage.ImageUrl;
      } else {
        this.selectedImage = this.imageGallery[this.imageGallery.length - 1];
        this.imageUrl = this.selectedImage.ImageUrl;
      }
    }

  }
});
// CONCATENATED MODULE: ./src/components/ItemDetail.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_ItemDetailvue_type_script_lang_js_ = (ItemDetailvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/ItemDetail.vue



function ItemDetail_injectStyles (context) {
  
  var style0 = __webpack_require__("f214")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var ItemDetail_component = normalizeComponent(
  components_ItemDetailvue_type_script_lang_js_,
  ItemDetailvue_type_template_id_8df8e56c_scoped_true_render,
  ItemDetailvue_type_template_id_8df8e56c_scoped_true_staticRenderFns,
  false,
  ItemDetail_injectStyles,
  "8df8e56c",
  null
  ,true
)

/* harmony default export */ var ItemDetail = (ItemDetail_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-i18n/dist/vue-i18n.esm.js
/*!
 * vue-i18n v8.22.2 
 * (c) 2020 kazuya kawaguchi
 * Released under the MIT License.
 */
/*  */

/**
 * constants
 */

var numberFormatKeys = [
  'compactDisplay',
  'currency',
  'currencyDisplay',
  'currencySign',
  'localeMatcher',
  'notation',
  'numberingSystem',
  'signDisplay',
  'style',
  'unit',
  'unitDisplay',
  'useGrouping',
  'minimumIntegerDigits',
  'minimumFractionDigits',
  'maximumFractionDigits',
  'minimumSignificantDigits',
  'maximumSignificantDigits'
];

/**
 * utilities
 */

function warn (msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.warn(err.stack);
    }
  }
}

function error (msg, err) {
  if (typeof console !== 'undefined') {
    console.error('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.error(err.stack);
    }
  }
}

var isArray = Array.isArray;

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function vue_i18n_esm_isBoolean (val) {
  return typeof val === 'boolean'
}

function isString (val) {
  return typeof val === 'string'
}

var vue_i18n_esm_toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return vue_i18n_esm_toString.call(obj) === OBJECT_STRING
}

function isNull (val) {
  return val === null || val === undefined
}

function isFunction (val) {
  return typeof val === 'function'
}

function parseArgs () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var locale = null;
  var params = null;
  if (args.length === 1) {
    if (isObject(args[0]) || isArray(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */
    if (isObject(args[1]) || isArray(args[1])) {
      params = args[1];
    }
  }

  return { locale: locale, params: params }
}

function looseClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

function includes (arr, item) {
  return !!~arr.indexOf(item)
}

var vue_i18n_esm_hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return vue_i18n_esm_hasOwnProperty.call(obj, key)
}

function merge (target) {
  var arguments$1 = arguments;

  var output = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];
    if (source !== undefined && source !== null) {
      var key = (void 0);
      for (key in source) {
        if (hasOwn(source, key)) {
          if (isObject(source[key])) {
            output[key] = merge(output[key], source[key]);
          } else {
            output[key] = source[key];
          }
        }
      }
    }
  }
  return output
}

function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = isArray(a);
      var isArrayB = isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Sanitizes html special characters from input strings. For mitigating risk of XSS attacks.
 * @param rawText The raw input from the user that should be escaped.
 */
function escapeHtml(rawText) {
  return rawText
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;')
}

/**
 * Escapes html tags and special symbols from all provided params which were returned from parseArgs().params.
 * This method performs an in-place operation on the params object.
 *
 * @param {any} params Parameters as provided from `parseArgs().params`.
 *                     May be either an array of strings or a string->any map.
 *
 * @returns The manipulated `params` object.
 */
function escapeParams(params) {
  if(params != null) {
    Object.keys(params).forEach(function (key) {
      if(typeof(params[key]) == 'string') {
        params[key] = escapeHtml(params[key]);
      }
    });
  }
  return params
}

/*  */

function extend (Vue) {
  if (!Vue.prototype.hasOwnProperty('$i18n')) {
    // $FlowFixMe
    Object.defineProperty(Vue.prototype, '$i18n', {
      get: function get () { return this._i18n }
    });
  }

  Vue.prototype.$t = function (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this ].concat( values ))
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this, choice ].concat( values ))
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale)
  };

  Vue.prototype.$d = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).d.apply(ref, [ value ].concat( args ))
  };

  Vue.prototype.$n = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).n.apply(ref, [ value ].concat( args ))
  };
}

/*  */

var mixin = {
  beforeCreate: function beforeCreate () {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            var localeMessages = options.i18n && options.i18n.messages ? options.i18n.messages : {};
            options.__i18n.forEach(function (resource) {
              localeMessages = merge(localeMessages, JSON.parse(resource));
            });
            Object.keys(localeMessages).forEach(function (locale) {
              options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);
            });
          } catch (e) {
            if (false) {}
          }
        }
        this._i18n = options.i18n;
        this._i18nWatcher = this._i18n.watchI18nData();
      } else if (isPlainObject(options.i18n)) {
        var rootI18n = this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n
          ? this.$root.$i18n
          : null;
        // component local i18n
        if (rootI18n) {
          options.i18n.root = this.$root;
          options.i18n.formatter = rootI18n.formatter;
          options.i18n.fallbackLocale = rootI18n.fallbackLocale;
          options.i18n.formatFallbackMessages = rootI18n.formatFallbackMessages;
          options.i18n.silentTranslationWarn = rootI18n.silentTranslationWarn;
          options.i18n.silentFallbackWarn = rootI18n.silentFallbackWarn;
          options.i18n.pluralizationRules = rootI18n.pluralizationRules;
          options.i18n.preserveDirectiveContent = rootI18n.preserveDirectiveContent;
        }

        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            var localeMessages$1 = options.i18n && options.i18n.messages ? options.i18n.messages : {};
            options.__i18n.forEach(function (resource) {
              localeMessages$1 = merge(localeMessages$1, JSON.parse(resource));
            });
            options.i18n.messages = localeMessages$1;
          } catch (e) {
            if (false) {}
          }
        }

        var ref = options.i18n;
        var sharedMessages = ref.sharedMessages;
        if (sharedMessages && isPlainObject(sharedMessages)) {
          options.i18n.messages = merge(options.i18n.messages, sharedMessages);
        }

        this._i18n = new VueI18n(options.i18n);
        this._i18nWatcher = this._i18n.watchI18nData();

        if (options.i18n.sync === undefined || !!options.i18n.sync) {
          this._localeWatcher = this.$i18n.watchLocale();
        }

        if (rootI18n) {
          rootI18n.onComponentInstanceCreated(this._i18n);
        }
      } else {
        if (false) {}
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      // root i18n
      this._i18n = this.$root.$i18n;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      // parent i18n
      this._i18n = options.parent.$i18n;
    }
  },

  beforeMount: function beforeMount () {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else if (isPlainObject(options.i18n)) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else {
        if (false) {}
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);
      this._subscribing = true;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);
      this._subscribing = true;
    }
  },

  beforeDestroy: function beforeDestroy () {
    if (!this._i18n) { return }

    var self = this;
    this.$nextTick(function () {
      if (self._subscribing) {
        self._i18n.unsubscribeDataChanging(self);
        delete self._subscribing;
      }

      if (self._i18nWatcher) {
        self._i18nWatcher();
        self._i18n.destroyVM();
        delete self._i18nWatcher;
      }

      if (self._localeWatcher) {
        self._localeWatcher();
        delete self._localeWatcher;
      }
    });
  }
};

/*  */

var interpolationComponent = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    },
    places: {
      type: [Array, Object]
    }
  },
  render: function render (h, ref) {
    var data = ref.data;
    var parent = ref.parent;
    var props = ref.props;
    var slots = ref.slots;

    var $i18n = parent.$i18n;
    if (!$i18n) {
      if (false) {}
      return
    }

    var path = props.path;
    var locale = props.locale;
    var places = props.places;
    var params = slots();
    var children = $i18n.i(
      path,
      locale,
      onlyHasDefaultPlace(params) || places
        ? useLegacyPlaces(params.default, places)
        : params
    );

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, data, children) : children
  }
};

function onlyHasDefaultPlace (params) {
  var prop;
  for (prop in params) {
    if (prop !== 'default') { return false }
  }
  return Boolean(prop)
}

function useLegacyPlaces (children, places) {
  var params = places ? createParamsFromPlaces(places) : {};

  if (!children) { return params }

  // Filter empty text nodes
  children = children.filter(function (child) {
    return child.tag || child.text.trim() !== ''
  });

  var everyPlace = children.every(vnodeHasPlaceAttribute);
  if (false) {}

  return children.reduce(
    everyPlace ? assignChildPlace : assignChildIndex,
    params
  )
}

function createParamsFromPlaces (places) {
  if (false) {}

  return Array.isArray(places)
    ? places.reduce(assignChildIndex, {})
    : Object.assign({}, places)
}

function assignChildPlace (params, child) {
  if (child.data && child.data.attrs && child.data.attrs.place) {
    params[child.data.attrs.place] = child;
  }
  return params
}

function assignChildIndex (params, child, index) {
  params[index] = child;
  return params
}

function vnodeHasPlaceAttribute (vnode) {
  return Boolean(vnode.data && vnode.data.attrs && vnode.data.attrs.place)
}

/*  */

var numberComponent = {
  name: 'i18n-n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    },
    locale: {
      type: String
    }
  },
  render: function render (h, ref) {
    var props = ref.props;
    var parent = ref.parent;
    var data = ref.data;

    var i18n = parent.$i18n;

    if (!i18n) {
      if (false) {}
      return null
    }

    var key = null;
    var options = null;

    if (isString(props.format)) {
      key = props.format;
    } else if (isObject(props.format)) {
      if (props.format.key) {
        key = props.format.key;
      }

      // Filter out number format options only
      options = Object.keys(props.format).reduce(function (acc, prop) {
        var obj;

        if (includes(numberFormatKeys, prop)) {
          return Object.assign({}, acc, ( obj = {}, obj[prop] = props.format[prop], obj ))
        }
        return acc
      }, null);
    }

    var locale = props.locale || i18n.locale;
    var parts = i18n._ntp(props.value, locale, key, options);

    var values = parts.map(function (part, index) {
      var obj;

      var slot = data.scopedSlots && data.scopedSlots[part.type];
      return slot ? slot(( obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj )) : part.value
    });

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag
      ? h(tag, {
        attrs: data.attrs,
        'class': data['class'],
        staticClass: data.staticClass
      }, values)
      : values
  }
};

/*  */

function bind (el, binding, vnode) {
  if (!assert(el, vnode)) { return }

  t(el, binding, vnode);
}

function update (el, binding, vnode, oldVNode) {
  if (!assert(el, vnode)) { return }

  var i18n = vnode.context.$i18n;
  if (localeEqual(el, vnode) &&
    (looseEqual(binding.value, binding.oldValue) &&
     looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale)))) { return }

  t(el, binding, vnode);
}

function unbind (el, binding, vnode, oldVNode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return
  }

  var i18n = vnode.context.$i18n || {};
  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {
    el.textContent = '';
  }
  el._vt = undefined;
  delete el['_vt'];
  el._locale = undefined;
  delete el['_locale'];
  el._localeMessage = undefined;
  delete el['_localeMessage'];
}

function assert (el, vnode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return false
  }

  if (!vm.$i18n) {
    warn('VueI18n instance does not exists in Vue instance');
    return false
  }

  return true
}

function localeEqual (el, vnode) {
  var vm = vnode.context;
  return el._locale === vm.$i18n.locale
}

function t (el, binding, vnode) {
  var ref$1, ref$2;

  var value = binding.value;

  var ref = parseValue(value);
  var path = ref.path;
  var locale = ref.locale;
  var args = ref.args;
  var choice = ref.choice;
  if (!path && !locale && !args) {
    warn('value type not supported');
    return
  }

  if (!path) {
    warn('`path` is required in v-t directive');
    return
  }

  var vm = vnode.context;
  if (choice != null) {
    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [ path, choice ].concat( makeParams(locale, args) ));
  } else {
    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [ path ].concat( makeParams(locale, args) ));
  }
  el._locale = vm.$i18n.locale;
  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);
}

function parseValue (value) {
  var path;
  var locale;
  var args;
  var choice;

  if (isString(value)) {
    path = value;
  } else if (isPlainObject(value)) {
    path = value.path;
    locale = value.locale;
    args = value.args;
    choice = value.choice;
  }

  return { path: path, locale: locale, args: args, choice: choice }
}

function makeParams (locale, args) {
  var params = [];

  locale && params.push(locale);
  if (args && (Array.isArray(args) || isPlainObject(args))) {
    params.push(args);
  }

  return params
}

var Vue;

function install (_Vue) {
  /* istanbul ignore if */
  if (false) {}
  install.installed = true;

  Vue = _Vue;

  var version = (Vue.version && Number(Vue.version.split('.')[0])) || -1;
  /* istanbul ignore if */
  if (false) {}

  extend(Vue);
  Vue.mixin(mixin);
  Vue.directive('t', { bind: bind, update: update, unbind: unbind });
  Vue.component(interpolationComponent.name, interpolationComponent);
  Vue.component(numberComponent.name, numberComponent);

  // use simple mergeStrategies to prevent i18n instance lose '__proto__'
  var strats = Vue.config.optionMergeStrategies;
  strats.i18n = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };
}

/*  */

var BaseFormatter = function BaseFormatter () {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate (message, values) {
  if (!values) {
    return [message]
  }
  var tokens = this._caches[message];
  if (!tokens) {
    tokens = parse(message);
    this._caches[message] = tokens;
  }
  return compile(tokens, values)
};



var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;

function parse (format) {
  var tokens = [];
  var position = 0;

  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === '{') {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }

      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== '}') {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === '}';

      var type = RE_TOKEN_LIST_VALUE.test(sub)
        ? 'list'
        : isClosed && RE_TOKEN_NAMED_VALUE.test(sub)
          ? 'named'
          : 'unknown';
      tokens.push({ value: sub, type: type });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
      if (format[(position)] !== '{') {
        text += char;
      }
    } else {
      text += char;
    }
  }

  text && tokens.push({ type: 'text', value: text });

  return tokens
}

function compile (tokens, values) {
  var compiled = [];
  var index = 0;

  var mode = Array.isArray(values)
    ? 'list'
    : isObject(values)
      ? 'named'
      : 'unknown';
  if (mode === 'unknown') { return compiled }

  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break
      case 'named':
        if (mode === 'named') {
          compiled.push((values)[token.value]);
        } else {
          if (false) {}
        }
        break
      case 'unknown':
        if (false) {}
        break
    }
    index++;
  }

  return compiled
}

/*  */

/**
 *  Path parser
 *  - Inspired:
 *    Vue.js Path parser
 */

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral (exp) {
  return literalValueRE.test(exp)
}

/**
 * Strip quotes from a string
 */

function stripQuotes (str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27)
    ? str.slice(1, -1)
    : str
}

/**
 * Determine the type of a character in a keypath.
 */

function getPathCharType (ch) {
  if (ch === undefined || ch === null) { return 'eof' }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
      return ch

    case 0x5F: // _
    case 0x24: // $
    case 0x2D: // -
      return 'ident'

    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0:  // No-break space
    case 0xFEFF:  // Byte Order Mark
    case 0x2028:  // Line Separator
    case 0x2029:  // Paragraph Separator
      return 'ws'
  }

  return 'ident'
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */

function formatSubPath (path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) { return false }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed
}

/**
 * Parse a string path into an array of segments
 */

function parse$1 (path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      if (key === undefined) { return false }
      key = formatSubPath(key);
      if (key === false) {
        return false
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote () {
    var nextChar = path[index + 1];
    if ((mode === IN_SINGLE_QUOTE && nextChar === "'") ||
      (mode === IN_DOUBLE_QUOTE && nextChar === '"')) {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined
        ? c
        : newChar;
      if (action() === false) {
        return
      }
    }

    if (mode === AFTER_PATH) {
      return keys
    }
  }
}





var I18nPath = function I18nPath () {
  this._cache = Object.create(null);
};

/**
 * External parse that check for a cache hit first
 */
I18nPath.prototype.parsePath = function parsePath (path) {
  var hit = this._cache[path];
  if (!hit) {
    hit = parse$1(path);
    if (hit) {
      this._cache[path] = hit;
    }
  }
  return hit || []
};

/**
 * Get path value from path string
 */
I18nPath.prototype.getPathValue = function getPathValue (obj, path) {
  if (!isObject(obj)) { return null }

  var paths = this.parsePath(path);
  if (paths.length === 0) {
    return null
  } else {
    var length = paths.length;
    var last = obj;
    var i = 0;
    while (i < length) {
      var value = last[paths[i]];
      if (value === undefined) {
        return null
      }
      last = value;
      i++;
    }

    return last
  }
};

/*  */



var htmlTagMatcher = /<\/?[\w\s="/.':;#-\/]+>/;
var linkKeyMatcher = /(?:@(?:\.[a-z]+)?:(?:[\w\-_|.]+|\([\w\-_|.]+\)))/g;
var linkKeyPrefixMatcher = /^@(?:\.([a-z]+))?:/;
var bracketsMatcher = /[()]/g;
var defaultModifiers = {
  'upper': function (str) { return str.toLocaleUpperCase(); },
  'lower': function (str) { return str.toLocaleLowerCase(); },
  'capitalize': function (str) { return ("" + (str.charAt(0).toLocaleUpperCase()) + (str.substr(1))); }
};

var defaultFormatter = new BaseFormatter();

var VueI18n = function VueI18n (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #290
  /* istanbul ignore if */
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale === false
    ? false
    : options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || {};
  var numberFormats = options.numberFormats || {};

  this._vm = null;
  this._formatter = options.formatter || defaultFormatter;
  this._modifiers = options.modifiers || {};
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined
    ? true
    : !!options.fallbackRoot;
  this._formatFallbackMessages = options.formatFallbackMessages === undefined
    ? false
    : !!options.formatFallbackMessages;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined
    ? false
    : options.silentTranslationWarn;
  this._silentFallbackWarn = options.silentFallbackWarn === undefined
    ? false
    : !!options.silentFallbackWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();
  this._dataListeners = [];
  this._componentInstanceCreatedListener = options.componentInstanceCreatedListener || null;
  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined
    ? false
    : !!options.preserveDirectiveContent;
  this.pluralizationRules = options.pluralizationRules || {};
  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';
  this._postTranslation = options.postTranslation || null;
  this._escapeParameterHtml = options.escapeParameterHtml || false;

  /**
   * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`
   * @param choicesLength {number} an overall amount of available choices
   * @returns a final choice index
  */
  this.getChoiceIndex = function (choice, choicesLength) {
    var thisPrototype = Object.getPrototypeOf(this$1);
    if (thisPrototype && thisPrototype.getChoiceIndex) {
      var prototypeGetChoiceIndex = (thisPrototype.getChoiceIndex);
      return (prototypeGetChoiceIndex).call(this$1, choice, choicesLength)
    }

    // Default (old) getChoiceIndex implementation - english-compatible
    var defaultImpl = function (_choice, _choicesLength) {
      _choice = Math.abs(_choice);

      if (_choicesLength === 2) {
        return _choice
          ? _choice > 1
            ? 1
            : 0
          : 1
      }

      return _choice ? Math.min(_choice, 2) : 0
    };

    if (this$1.locale in this$1.pluralizationRules) {
      return this$1.pluralizationRules[this$1.locale].apply(this$1, [choice, choicesLength])
    } else {
      return defaultImpl(choice, choicesLength)
    }
  };


  this._exist = function (message, key) {
    if (!message || !key) { return false }
    if (!isNull(this$1._path.getPathValue(message, key))) { return true }
    // fallback for flat key
    if (message[key]) { return true }
    return false
  };

  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var prototypeAccessors = { vm: { configurable: true },messages: { configurable: true },dateTimeFormats: { configurable: true },numberFormats: { configurable: true },availableLocales: { configurable: true },locale: { configurable: true },fallbackLocale: { configurable: true },formatFallbackMessages: { configurable: true },missing: { configurable: true },formatter: { configurable: true },silentTranslationWarn: { configurable: true },silentFallbackWarn: { configurable: true },preserveDirectiveContent: { configurable: true },warnHtmlInMessage: { configurable: true },postTranslation: { configurable: true } };

VueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage (locale, level, message) {
  var paths = [];

  var fn = function (level, locale, message, paths) {
    if (isPlainObject(message)) {
      Object.keys(message).forEach(function (key) {
        var val = message[key];
        if (isPlainObject(val)) {
          paths.push(key);
          paths.push('.');
          fn(level, locale, val, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(key);
          fn(level, locale, val, paths);
          paths.pop();
        }
      });
    } else if (isArray(message)) {
      message.forEach(function (item, index) {
        if (isPlainObject(item)) {
          paths.push(("[" + index + "]"));
          paths.push('.');
          fn(level, locale, item, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(("[" + index + "]"));
          fn(level, locale, item, paths);
          paths.pop();
        }
      });
    } else if (isString(message)) {
      var ret = htmlTagMatcher.test(message);
      if (ret) {
        var msg = "Detected HTML in message '" + message + "' of keypath '" + (paths.join('')) + "' at '" + locale + "'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";
        if (level === 'warn') {
          warn(msg);
        } else if (level === 'error') {
          error(msg);
        }
      }
    }
  };

  fn(level, locale, message, paths);
};

VueI18n.prototype._initVM = function _initVM (data) {
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  this._vm = new Vue({ data: data });
  Vue.config.silent = silent;
};

VueI18n.prototype.destroyVM = function destroyVM () {
  this._vm.$destroy();
};

VueI18n.prototype.subscribeDataChanging = function subscribeDataChanging (vm) {
  this._dataListeners.push(vm);
};

VueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging (vm) {
  remove(this._dataListeners, vm);
};

VueI18n.prototype.watchI18nData = function watchI18nData () {
  var self = this;
  return this._vm.$watch('$data', function () {
    var i = self._dataListeners.length;
    while (i--) {
      Vue.nextTick(function () {
        self._dataListeners[i] && self._dataListeners[i].$forceUpdate();
      });
    }
  }, { deep: true })
};

VueI18n.prototype.watchLocale = function watchLocale () {
  /* istanbul ignore if */
  if (!this._sync || !this._root) { return null }
  var target = this._vm;
  return this._root.$i18n.vm.$watch('locale', function (val) {
    target.$set(target, 'locale', val);
    target.$forceUpdate();
  }, { immediate: true })
};

VueI18n.prototype.onComponentInstanceCreated = function onComponentInstanceCreated (newI18n) {
  if (this._componentInstanceCreatedListener) {
    this._componentInstanceCreatedListener(newI18n, this);
  }
};

prototypeAccessors.vm.get = function () { return this._vm };

prototypeAccessors.messages.get = function () { return looseClone(this._getMessages()) };
prototypeAccessors.dateTimeFormats.get = function () { return looseClone(this._getDateTimeFormats()) };
prototypeAccessors.numberFormats.get = function () { return looseClone(this._getNumberFormats()) };
prototypeAccessors.availableLocales.get = function () { return Object.keys(this.messages).sort() };

prototypeAccessors.locale.get = function () { return this._vm.locale };
prototypeAccessors.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

prototypeAccessors.fallbackLocale.get = function () { return this._vm.fallbackLocale };
prototypeAccessors.fallbackLocale.set = function (locale) {
  this._localeChainCache = {};
  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

prototypeAccessors.formatFallbackMessages.get = function () { return this._formatFallbackMessages };
prototypeAccessors.formatFallbackMessages.set = function (fallback) { this._formatFallbackMessages = fallback; };

prototypeAccessors.missing.get = function () { return this._missing };
prototypeAccessors.missing.set = function (handler) { this._missing = handler; };

prototypeAccessors.formatter.get = function () { return this._formatter };
prototypeAccessors.formatter.set = function (formatter) { this._formatter = formatter; };

prototypeAccessors.silentTranslationWarn.get = function () { return this._silentTranslationWarn };
prototypeAccessors.silentTranslationWarn.set = function (silent) { this._silentTranslationWarn = silent; };

prototypeAccessors.silentFallbackWarn.get = function () { return this._silentFallbackWarn };
prototypeAccessors.silentFallbackWarn.set = function (silent) { this._silentFallbackWarn = silent; };

prototypeAccessors.preserveDirectiveContent.get = function () { return this._preserveDirectiveContent };
prototypeAccessors.preserveDirectiveContent.set = function (preserve) { this._preserveDirectiveContent = preserve; };

prototypeAccessors.warnHtmlInMessage.get = function () { return this._warnHtmlInMessage };
prototypeAccessors.warnHtmlInMessage.set = function (level) {
    var this$1 = this;

  var orgLevel = this._warnHtmlInMessage;
  this._warnHtmlInMessage = level;
  if (orgLevel !== level && (level === 'warn' || level === 'error')) {
    var messages = this._getMessages();
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }
};

prototypeAccessors.postTranslation.get = function () { return this._postTranslation };
prototypeAccessors.postTranslation.set = function (handler) { this._postTranslation = handler; };

VueI18n.prototype._getMessages = function _getMessages () { return this._vm.messages };
VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats () { return this._vm.dateTimeFormats };
VueI18n.prototype._getNumberFormats = function _getNumberFormats () { return this._vm.numberFormats };

VueI18n.prototype._warnDefault = function _warnDefault (locale, key, result, vm, values, interpolateMode) {
  if (!isNull(result)) { return result }
  if (this._missing) {
    var missingRet = this._missing.apply(null, [locale, key, vm, values]);
    if (isString(missingRet)) {
      return missingRet
    }
  } else {
    if (false) {}
  }

  if (this._formatFallbackMessages) {
    var parsedArgs = parseArgs.apply(void 0, values);
    return this._render(key, interpolateMode, parsedArgs.params, key)
  } else {
    return key
  }
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot (val) {
  return !val && !isNull(this._root) && this._fallbackRoot
};

VueI18n.prototype._isSilentFallbackWarn = function _isSilentFallbackWarn (key) {
  return this._silentFallbackWarn instanceof RegExp
    ? this._silentFallbackWarn.test(key)
    : this._silentFallbackWarn
};

VueI18n.prototype._isSilentFallback = function _isSilentFallback (locale, key) {
  return this._isSilentFallbackWarn(key) && (this._isFallbackRoot() || locale !== this.fallbackLocale)
};

VueI18n.prototype._isSilentTranslationWarn = function _isSilentTranslationWarn (key) {
  return this._silentTranslationWarn instanceof RegExp
    ? this._silentTranslationWarn.test(key)
    : this._silentTranslationWarn
};

VueI18n.prototype._interpolate = function _interpolate (
  locale,
  message,
  key,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  if (!message) { return null }

  var pathRet = this._path.getPathValue(message, key);
  if (isArray(pathRet) || isPlainObject(pathRet)) { return pathRet }

  var ret;
  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject(message)) {
      ret = message[key];
      if (!(isString(ret) || isFunction(ret))) {
        if (false) {}
        return null
      }
    } else {
      return null
    }
  } else {
    /* istanbul ignore else */
    if (isString(pathRet) || isFunction(pathRet)) {
      ret = pathRet;
    } else {
      if (false) {}
      return null
    }
  }

  // Check for the existence of links within the translated string
  if (isString(ret) && (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0)) {
    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);
  }

  return this._render(ret, interpolateMode, values, key)
};

VueI18n.prototype._link = function _link (
  locale,
  message,
  str,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  var ret = str;

  // Match all the links within the local
  // We are going to replace each of
  // them with its translation
  var matches = ret.match(linkKeyMatcher);
  for (var idx in matches) {
    // ie compatible: filter custom array
    // prototype method
    if (!matches.hasOwnProperty(idx)) {
      continue
    }
    var link = matches[idx];
    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);
    var linkPrefix = linkKeyPrefixMatches[0];
      var formatterName = linkKeyPrefixMatches[1];

    // Remove the leading @:, @.case: and the brackets
    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');

    if (includes(visitedLinkStack, linkPlaceholder)) {
      if (false) {}
      return ret
    }
    visitedLinkStack.push(linkPlaceholder);

    // Translate the link
    var translated = this._interpolate(
      locale, message, linkPlaceholder, host,
      interpolateMode === 'raw' ? 'string' : interpolateMode,
      interpolateMode === 'raw' ? undefined : values,
      visitedLinkStack
    );

    if (this._isFallbackRoot(translated)) {
      if (false) {}
      /* istanbul ignore if */
      if (!this._root) { throw Error('unexpected error') }
      var root = this._root.$i18n;
      translated = root._translate(
        root._getMessages(), root.locale, root.fallbackLocale,
        linkPlaceholder, host, interpolateMode, values
      );
    }
    translated = this._warnDefault(
      locale, linkPlaceholder, translated, host,
      isArray(values) ? values : [values],
      interpolateMode
    );

    if (this._modifiers.hasOwnProperty(formatterName)) {
      translated = this._modifiers[formatterName](translated);
    } else if (defaultModifiers.hasOwnProperty(formatterName)) {
      translated = defaultModifiers[formatterName](translated);
    }

    visitedLinkStack.pop();

    // Replace the link with the translated
    ret = !translated ? ret : ret.replace(link, translated);
  }

  return ret
};

VueI18n.prototype._createMessageContext = function _createMessageContext (values) {
  var _list = isArray(values) ? values : [];
  var _named = isObject(values) ? values : {};
  var list = function (index) { return _list[index]; };
  var named = function (key) { return _named[key]; };
  return {
    list: list,
    named: named
  }
};

VueI18n.prototype._render = function _render (message, interpolateMode, values, path) {
  if (isFunction(message)) {
    return message(this._createMessageContext(values))
  }

  var ret = this._formatter.interpolate(message, values, path);

  // If the custom formatter refuses to work - apply the default one
  if (!ret) {
    ret = defaultFormatter.interpolate(message, values, path);
  }

  // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter
  return interpolateMode === 'string' && !isString(ret) ? ret.join('') : ret
};

VueI18n.prototype._appendItemToChain = function _appendItemToChain (chain, item, blocks) {
  var follow = false;
  if (!includes(chain, item)) {
    follow = true;
    if (item) {
      follow = item[item.length - 1] !== '!';
      item = item.replace(/!/g, '');
      chain.push(item);
      if (blocks && blocks[item]) {
        follow = blocks[item];
      }
    }
  }
  return follow
};

VueI18n.prototype._appendLocaleToChain = function _appendLocaleToChain (chain, locale, blocks) {
  var follow;
  var tokens = locale.split('-');
  do {
    var item = tokens.join('-');
    follow = this._appendItemToChain(chain, item, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && (follow === true))
  return follow
};

VueI18n.prototype._appendBlockToChain = function _appendBlockToChain (chain, block, blocks) {
  var follow = true;
  for (var i = 0; (i < block.length) && (vue_i18n_esm_isBoolean(follow)); i++) {
    var locale = block[i];
    if (isString(locale)) {
      follow = this._appendLocaleToChain(chain, locale, blocks);
    }
  }
  return follow
};

VueI18n.prototype._getLocaleChain = function _getLocaleChain (start, fallbackLocale) {
  if (start === '') { return [] }

  if (!this._localeChainCache) {
    this._localeChainCache = {};
  }

  var chain = this._localeChainCache[start];
  if (!chain) {
    if (!fallbackLocale) {
      fallbackLocale = this.fallbackLocale;
    }
    chain = [];

    // first block defined by start
    var block = [start];

    // while any intervening block found
    while (isArray(block)) {
      block = this._appendBlockToChain(
        chain,
        block,
        fallbackLocale
      );
    }

    // last block defined by default
    var defaults;
    if (isArray(fallbackLocale)) {
      defaults = fallbackLocale;
    } else if (isObject(fallbackLocale)) {
      /* $FlowFixMe */
      if (fallbackLocale['default']) {
        defaults = fallbackLocale['default'];
      } else {
        defaults = null;
      }
    } else {
      defaults = fallbackLocale;
    }

    // convert defaults to array
    if (isString(defaults)) {
      block = [defaults];
    } else {
      block = defaults;
    }
    if (block) {
      this._appendBlockToChain(
        chain,
        block,
        null
      );
    }
    this._localeChainCache[start] = chain;
  }
  return chain
};

VueI18n.prototype._translate = function _translate (
  messages,
  locale,
  fallback,
  key,
  host,
  interpolateMode,
  args
) {
  var chain = this._getLocaleChain(locale, fallback);
  var res;
  for (var i = 0; i < chain.length; i++) {
    var step = chain[i];
    res =
      this._interpolate(step, messages[step], key, host, interpolateMode, args, [key]);
    if (!isNull(res)) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to translate the keypath '" + key + "' with '" + step + "' locale."));
      }
      return res
    }
  }
  return null
};

VueI18n.prototype._t = function _t (key, _locale, messages, host) {
    var ref;

    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];
  if (!key) { return '' }

  var parsedArgs = parseArgs.apply(void 0, values);
  if(this._escapeParameterHtml) {
    parsedArgs.params = escapeParams(parsedArgs.params);
  }

  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(
    messages, locale, this.fallbackLocale, key,
    host, 'string', parsedArgs.params
  );
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).$t.apply(ref, [ key ].concat( values ))
  } else {
    ret = this._warnDefault(locale, key, ret, host, values, 'string');
    if (this._postTranslation && ret !== null && ret !== undefined) {
      ret = this._postTranslation(ret, key);
    }
    return ret
  }
};

VueI18n.prototype.t = function t (key) {
    var ref;

    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];
  return (ref = this)._t.apply(ref, [ key, this.locale, this._getMessages(), null ].concat( values ))
};

VueI18n.prototype._i = function _i (key, locale, messages, host, values) {
  var ret =
    this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.i(key, locale, values)
  } else {
    return this._warnDefault(locale, key, ret, host, [values], 'raw')
  }
};

VueI18n.prototype.i = function i (key, locale, values) {
  /* istanbul ignore if */
  if (!key) { return '' }

  if (!isString(locale)) {
    locale = this.locale;
  }

  return this._i(key, locale, this._getMessages(), null, values)
};

VueI18n.prototype._tc = function _tc (
  key,
  _locale,
  messages,
  host,
  choice
) {
    var ref;

    var values = [], len = arguments.length - 5;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 5 ];
  if (!key) { return '' }
  if (choice === undefined) {
    choice = 1;
  }

  var predefined = { 'count': choice, 'n': choice };
  var parsedArgs = parseArgs.apply(void 0, values);
  parsedArgs.params = Object.assign(predefined, parsedArgs.params);
  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];
  return this.fetchChoice((ref = this)._t.apply(ref, [ key, _locale, messages, host ].concat( values )), choice)
};

VueI18n.prototype.fetchChoice = function fetchChoice (message, choice) {
  /* istanbul ignore if */
  if (!message || !isString(message)) { return null }
  var choices = message.split('|');

  choice = this.getChoiceIndex(choice, choices.length);
  if (!choices[choice]) { return message }
  return choices[choice].trim()
};

VueI18n.prototype.tc = function tc (key, choice) {
    var ref;

    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];
  return (ref = this)._tc.apply(ref, [ key, this.locale, this._getMessages(), null, choice ].concat( values ))
};

VueI18n.prototype._te = function _te (key, locale, messages) {
    var args = [], len = arguments.length - 3;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

  var _locale = parseArgs.apply(void 0, args).locale || locale;
  return this._exist(messages[_locale], key)
};

VueI18n.prototype.te = function te (key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale)
};

VueI18n.prototype.getLocaleMessage = function getLocaleMessage (locale) {
  return looseClone(this._vm.messages[locale] || {})
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, message);
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, merge({}, this._vm.messages[locale] || {}, message));
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat (locale) {
  return looseClone(this._vm.dateTimeFormats[locale] || {})
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, format);
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, merge(this._vm.dateTimeFormats[locale] || {}, format));
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype._clearDateTimeFormat = function _clearDateTimeFormat (locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._dateTimeFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._dateTimeFormatters[id];
  }
};

VueI18n.prototype._localizeDateTime = function _localizeDateTime (
  value,
  locale,
  fallback,
  dateTimeFormats,
  key
) {
  var _locale = locale;
  var formats = dateTimeFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = dateTimeFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' datetime formats from '" + current + "' datetime formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];
    var id = _locale + "__" + key;
    var formatter = this._dateTimeFormatters[id];
    if (!formatter) {
      formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);
    }
    return formatter.format(value)
  }
};

VueI18n.prototype._d = function _d (value, locale, key) {
  /* istanbul ignore if */
  if (false) {}

  if (!key) {
    return new Intl.DateTimeFormat(locale).format(value)
  }

  var ret =
    this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.d(value, key, locale)
  } else {
    return ret || ''
  }
};

VueI18n.prototype.d = function d (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._d(value, locale, key)
};

VueI18n.prototype.getNumberFormat = function getNumberFormat (locale) {
  return looseClone(this._vm.numberFormats[locale] || {})
};

VueI18n.prototype.setNumberFormat = function setNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, format);
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, merge(this._vm.numberFormats[locale] || {}, format));
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype._clearNumberFormat = function _clearNumberFormat (locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._numberFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._numberFormatters[id];
  }
};

VueI18n.prototype._getNumberFormatter = function _getNumberFormatter (
  value,
  locale,
  fallback,
  numberFormats,
  key,
  options
) {
  var _locale = locale;
  var formats = numberFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = numberFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' number formats from '" + current + "' number formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];

    var formatter;
    if (options) {
      // If options specified - create one time number formatter
      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._numberFormatters[id];
      if (!formatter) {
        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);
      }
    }
    return formatter
  }
};

VueI18n.prototype._n = function _n (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (false) {}
    return ''
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.format(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.format(value);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.n(value, Object.assign({}, { key: key, locale: locale }, options))
  } else {
    return ret || ''
  }
};

VueI18n.prototype.n = function n (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }

      // Filter out number format options only
      options = Object.keys(args[0]).reduce(function (acc, key) {
          var obj;

        if (includes(numberFormatKeys, key)) {
          return Object.assign({}, acc, ( obj = {}, obj[key] = args[0][key], obj ))
        }
        return acc
      }, null);
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._n(value, locale, key, options)
};

VueI18n.prototype._ntp = function _ntp (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (false) {}
    return []
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.formatToParts(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.formatToParts(value);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n._ntp(value, locale, key, options)
  } else {
    return ret || []
  }
};

Object.defineProperties( VueI18n.prototype, prototypeAccessors );

var availabilities;
// $FlowFixMe
Object.defineProperty(VueI18n, 'availabilities', {
  get: function get () {
    if (!availabilities) {
      var intlDefined = typeof Intl !== 'undefined';
      availabilities = {
        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',
        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'
      };
    }

    return availabilities
  }
});

VueI18n.install = install;
VueI18n.version = '8.22.2';

/* harmony default export */ var vue_i18n_esm = (VueI18n);

// EXTERNAL MODULE: ./src/assets/locales/en.json
var en = __webpack_require__("0e40");

// EXTERNAL MODULE: ./src/assets/locales/de.json
var de = __webpack_require__("cb40");

// EXTERNAL MODULE: ./src/assets/locales/it.json
var it = __webpack_require__("274c");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=ts&shadow







external_Vue_default.a.use(vue_i18n_esm);
const i18n = new vue_i18n_esm({
  locale: 'de',
  messages: {
    en: en,
    de: de,
    it: it
  }
});
/* harmony default export */ var Appvue_type_script_lang_ts_shadow = (external_Vue_default.a.extend({
  i18n,
  components: {
    ItemsList: ItemsList,
    ItemDetail: ItemDetail
  },
  props: {
    contentType: {
      type: String,
      default: 'Gastronomy'
    },
    contentIdList: {
      type: String,
      default: null
    },
    category: {
      type: String,
      default: null
    },
    language: {
      type: String,
      default: 'en'
    },
    pageSize: {
      type: Number,
      default: 20
    }
  },

  data() {
    return {
      detailContentId: null,
      currentPage: 1
    };
  },

  computed: {
    contentIds() {
      return this.contentIdList !== null ? this.contentIdList.split(',') : [];
    },

    islistAvailable() {
      return this.contentIds.length != 1;
    }

  },
  watch: {
    language: {
      immediate: true,

      handler(value) {
        this.$i18n.locale = value;
      }

    }
  },

  created() {
    if (!this.islistAvailable) {
      this.detailContentId = this.contentIds[0];
    }
  },

  methods: {
    showDetail(detailContentId) {
      this.detailContentId = detailContentId;
    },

    closeDetail() {
      this.detailContentId = null;
    },

    changeCurrentPage(pageNum) {
      this.currentPage = pageNum;
    }

  }
}));
// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=ts&shadow
 /* harmony default export */ var src_Appvue_type_script_lang_ts_shadow = (Appvue_type_script_lang_ts_shadow); 
// CONCATENATED MODULE: ./src/App.vue?shadow



function Appshadow_injectStyles (context) {
  
  var style0 = __webpack_require__("2083")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var Appshadow_component = normalizeComponent(
  src_Appvue_type_script_lang_ts_shadow,
  render,
  staticRenderFns,
  false,
  Appshadow_injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var Appshadow = (Appshadow_component.exports);
// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-wc.js




// runtime shared by every component chunk





window.customElements.define('webcomp-tourism-detail', vue_wc_wrapper(external_Vue_default.a, Appshadow))

/***/ }),

/***/ "5c6c":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "5dee":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#app{font-family:Avenir,Helvetica,Arial,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "5fb2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};


/***/ }),

/***/ "60da":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var objectKeys = __webpack_require__("df75");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var toObject = __webpack_require__("7b0b");
var IndexedObject = __webpack_require__("44ad");

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;


/***/ }),

/***/ "6369":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("ad68");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("f3fcc084", content, shadowRoot)
};

/***/ }),

/***/ "6547":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "69f3":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");
var createNonEnumerableProperty = __webpack_require__("9112");
var objectHas = __webpack_require__("5135");
var shared = __webpack_require__("c6cd");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "6eeb":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var setGlobal = __webpack_require__("ce4e");
var inspectSource = __webpack_require__("8925");
var InternalStateModule = __webpack_require__("69f3");

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var state;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) {
      createNonEnumerableProperty(value, 'name', key);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "7418":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "7839":
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "7983":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("a3c9");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("46d1f438", content, shadowRoot)
};

/***/ }),

/***/ "7a77":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "7aac":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "7b0b":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "7b50":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_distanceduration.440a9a50.svg";

/***/ }),

/***/ "7c73":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var defineProperties = __webpack_require__("37e8");
var enumBugKeys = __webpack_require__("7839");
var hiddenKeys = __webpack_require__("d012");
var html = __webpack_require__("1be4");
var documentCreateElement = __webpack_require__("cc12");
var sharedKey = __webpack_require__("f772");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),

/***/ "7dd0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createIteratorConstructor = __webpack_require__("9ed3");
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var setToStringTag = __webpack_require__("d44e");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");
var Iterators = __webpack_require__("3f8c");
var IteratorsCore = __webpack_require__("ae93");

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "7f9a":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var inspectSource = __webpack_require__("8925");

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "7fd6":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".paging[data-v-356619ac]{display:flex;width:100%;justify-content:center;margin-top:40px;margin-bottom:40px}.item[data-v-356619ac]{padding-right:4px;padding-left:4px}.item[data-v-356619ac]:hover{cursor:pointer}.selected-item[data-v-356619ac]{color:#2980b9}.back[data-v-356619ac]{margin-right:20px}.back[data-v-356619ac]:hover,.next[data-v-356619ac]:hover{cursor:pointer}.next[data-v-356619ac]{margin-left:20px}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "825a":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "83ab":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "83b9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__("d925");
var combineURLs = __webpack_require__("e683");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "8418":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPrimitive = __webpack_require__("c04e");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "861d":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "8875":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// addapted from the document.currentScript polyfill by Adam Miller
// MIT license
// source: https://github.com/amiller-gh/currentScript-polyfill

// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(typeof self !== 'undefined' ? self : this, function () {
  function getCurrentScript () {
    var descriptor = Object.getOwnPropertyDescriptor(document, 'currentScript')
    // for chrome
    if (!descriptor && 'currentScript' in document && document.currentScript) {
      return document.currentScript
    }

    // for other browsers with native support for currentScript
    if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
      return document.currentScript
    }
  
    // IE 8-10 support script readyState
    // IE 11+ & Firefox support stack trace
    try {
      throw new Error();
    }
    catch (err) {
      // Find the second match for the "at" string to get file src url from stack.
      var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig,
        ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig,
        stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),
        scriptLocation = (stackDetails && stackDetails[1]) || false,
        line = (stackDetails && stackDetails[2]) || false,
        currentLocation = document.location.href.replace(document.location.hash, ''),
        pageSource,
        inlineScriptSourceRegExp,
        inlineScriptSource,
        scripts = document.getElementsByTagName('script'); // Live NodeList collection
  
      if (scriptLocation === currentLocation) {
        pageSource = document.documentElement.outerHTML;
        inlineScriptSourceRegExp = new RegExp('(?:[^\\n]+?\\n){0,' + (line - 2) + '}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*', 'i');
        inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();
      }
  
      for (var i = 0; i < scripts.length; i++) {
        // If ready state is interactive, return the script tag
        if (scripts[i].readyState === 'interactive') {
          return scripts[i];
        }
  
        // If src matches, return the script tag
        if (scripts[i].src === scriptLocation) {
          return scripts[i];
        }
  
        // If inline source matches, return the script tag
        if (
          scriptLocation === currentLocation &&
          scripts[i].innerHTML &&
          scripts[i].innerHTML.trim() === inlineScriptSource
        ) {
          return scripts[i];
        }
      }
  
      // If no match, return null
      return null;
    }
  };

  return getCurrentScript
}));


/***/ }),

/***/ "8925":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("c6cd");

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "8aa5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "8bbf":
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),

/***/ "8d59":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_map.e3e40dfd.svg";

/***/ }),

/***/ "8df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__("7a77");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "90e3":
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),

/***/ "9112":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "9263":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpFlags = __webpack_require__("ad6d");
var stickyHelpers = __webpack_require__("9f7f");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "94ca":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "9861":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("e260");
var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var redefine = __webpack_require__("6eeb");
var redefineAll = __webpack_require__("e2cc");
var setToStringTag = __webpack_require__("d44e");
var createIteratorConstructor = __webpack_require__("9ed3");
var InternalStateModule = __webpack_require__("69f3");
var anInstance = __webpack_require__("19aa");
var hasOwn = __webpack_require__("5135");
var bind = __webpack_require__("0366");
var classof = __webpack_require__("f5df");
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var getIterator = __webpack_require__("9a1f");
var getIteratorMethod = __webpack_require__("35a1");
var wellKnownSymbol = __webpack_require__("b622");

var $fetch = getBuiltIn('fetch');
var Headers = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if (
            (first = entryNext.call(entryIterator)).done ||
            (second = entryNext.call(entryIterator)).done ||
            !entryNext.call(entryIterator).done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
  $({ global: true, enumerable: true, forced: true }, {
    fetch: function fetch(input /* , init */) {
      var args = [input];
      var init, body, headers;
      if (arguments.length > 1) {
        init = arguments[1];
        if (isObject(init)) {
          body = init.body;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headers.has('content-type')) {
              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            init = create(init, {
              body: createPropertyDescriptor(0, String(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        args.push(init);
      } return $fetch.apply(this, args);
    }
  });
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "9a1f":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var getIteratorMethod = __webpack_require__("35a1");

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};


/***/ }),

/***/ "9bdd":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var iteratorClose = __webpack_require__("2a62");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    iteratorClose(iterator);
    throw error;
  }
};


/***/ }),

/***/ "9bf2":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");
var anObject = __webpack_require__("825a");
var toPrimitive = __webpack_require__("c04e");

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "9ed3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var setToStringTag = __webpack_require__("d44e");
var Iterators = __webpack_require__("3f8c");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "9f7f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__("d039");

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),

/***/ "a349":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_external-link.bb64ec3c.svg";

/***/ }),

/***/ "a3c9":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".item>div[data-v-8df8e56c]{margin-bottom:1rem}.title[data-v-8df8e56c]{background-color:#e8ecf1;padding:2rem;opacity:.8;max-width:100%;max-height:400px}h2[data-v-8df8e56c]{margin-bottom:2px}.detail-box[data-v-8df8e56c]{border:1px solid #e8ecf1;padding:2rem}.additional-props-box[data-v-8df8e56c]{padding:2rem;background-color:#e8ecf1}.props[data-v-8df8e56c]{list-style:none;padding:0;margin:0;font-style:italic}.props[data-v-8df8e56c]:not(.single){-moz-columns:1;columns:1}@media(min-width:768px){.props[data-v-8df8e56c]:not(.single){-moz-columns:2;columns:2}}@media(min-width:992px){.props[data-v-8df8e56c]:not(.single){-moz-columns:3;columns:3}}.props>li[data-v-8df8e56c]{padding:.2rem 0}.props img[data-v-8df8e56c]{height:16px;width:16px;margin-right:.7em}.props a[data-v-8df8e56c]{color:#2980b9;text-decoration:none}.props .prop-key[data-v-8df8e56c]{color:#888;padding-right:4px}.subtitle[data-v-8df8e56c]{color:#212529;font-size:18px;font-weight:700;padding-top:4px;padding-bottom:4px}.subtype[data-v-8df8e56c]{padding-top:4px}.categories[data-v-8df8e56c],.subtype[data-v-8df8e56c]{padding-bottom:8px}.gastronomyTypes[data-v-8df8e56c]{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center}.category[data-v-8df8e56c]{padding:4px 12px 4px 12px;margin-right:8px;margin-top:8px;height:30px;border:1px solid #e8ecf1;border-radius:30px;opacity:1;text-align:center;align-items:center;display:flex;color:#cfcfcf}ul[data-v-8df8e56c]{-webkit-padding-start:0;padding-inline-start:0;margin:0}.text[data-v-8df8e56c]{color:#949494}.text-dark[data-v-8df8e56c]{color:#2e3131}.image[data-v-8df8e56c]{padding-right:8px;padding-top:8px}.image[data-v-8df8e56c],.title-image[data-v-8df8e56c]{-o-object-fit:cover;object-fit:cover}.title-image[data-v-8df8e56c]{max-height:400px;width:100%}.title-container[data-v-8df8e56c]{display:flex;flex-direction:column;justify-content:flex-end;margin-bottom:0!important;overflow:hidden}.info-item[data-v-8df8e56c]{flex-direction:row}.back-button[data-v-8df8e56c],.info-item[data-v-8df8e56c]{display:flex;align-items:center}.back-button[data-v-8df8e56c]{padding-bottom:4px;cursor:pointer}h1[data-v-8df8e56c]{font-size:36px;overflow-wrap:break-word;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "a691":
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "ac1f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var exec = __webpack_require__("9263");

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "ac9e":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/arrow_right.188ecc3c.svg";

/***/ }),

/***/ "ad68":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".list-item[data-v-91f8f1ca]{display:flex;flex-direction:row;padding:8px 40px 8px 40px;align-items:center}.thumbnail[data-v-91f8f1ca]{min-height:60px;min-width:60px;max-width:60px;max-height:60px;background-color:#e8ecf1;-o-object-fit:cover;object-fit:cover}.info[data-v-91f8f1ca]{display:flex;flex-direction:column;flex-grow:1;padding-left:24px}hr.solid[data-v-91f8f1ca]{border-top:1px solid #e8ecf1;margin:8px 40px 8px 40px}.title[data-v-91f8f1ca]{font-size:18px;font-weight:700}.short-info[data-v-91f8f1ca]{font-size:14px;word-break:break-word;color:#888}.page-title[data-v-91f8f1ca]{font-weight:700;font-size:36px;padding-left:40px;padding-right:40px;width:100%;text-overflow:ellipsis;overflow:hidden}.list[data-v-91f8f1ca]{flex-direction:row;flex-wrap:wrap}.item-container[data-v-91f8f1ca],.list[data-v-91f8f1ca]{display:flex;width:100%}.item-container[data-v-91f8f1ca]{flex-direction:column}.bottom-divider[data-v-91f8f1ca]{width:100%}.bottom-divider2[data-v-91f8f1ca]{visibility:hidden}@media (min-width:768px){.bottom-divider[data-v-91f8f1ca],.item-container[data-v-91f8f1ca]{width:50%}.bottom-divider2[data-v-91f8f1ca]{visibility:visible}}.loading-spinner[data-v-91f8f1ca]{height:50vh;width:100%;display:flex;justify-content:center;align-items:center}.noResult[data-v-91f8f1ca]{margin-left:40px}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "ad6d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__("825a");

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "ae93":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__("e163");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "aec0":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/Activity-Placeholder.653f3c0c.svg";

/***/ }),

/***/ "b50d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var settle = __webpack_require__("467f");
var cookies = __webpack_require__("7aac");
var buildURL = __webpack_require__("30b5");
var buildFullPath = __webpack_require__("83b9");
var parseHeaders = __webpack_require__("c345");
var isURLSameOrigin = __webpack_require__("3934");
var createError = __webpack_require__("2d83");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "b622":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var shared = __webpack_require__("5692");
var has = __webpack_require__("5135");
var uid = __webpack_require__("90e3");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "b8b6":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/arrow_left.42b75e2b.svg";

/***/ }),

/***/ "bc3a":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("cee4");

/***/ }),

/***/ "c04e":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "c345":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "c401":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "c430":
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "c532":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("1d2b");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "c6b6":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "c6cd":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var setGlobal = __webpack_require__("ce4e");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "c8af":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "c8ba":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "ca84":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toIndexedObject = __webpack_require__("fc6a");
var indexOf = __webpack_require__("4d64").indexOf;
var hiddenKeys = __webpack_require__("d012");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "cb40":
/***/ (function(module) {

module.exports = JSON.parse("{\"altitude\":\"Höhe\",\"difficulty\":\"Schwierigkeit\",\"location\":\"Ort\",\"phone\":\"Telefon\",\"web\":\"Web\",\"categories\":\"Kategorien\",\"ceremonies\":\"Veranstaltungen\",\"dishRates\":\"Speisen\",\"operationSchedule\":\"Öffnungszeiten\",\"lastChange\":\"Letzte Aktualisierung\",\"gastronomyTypes\":{\"DishCodes\":\"Speisen\",\"CuisineCodes\":\"Küche\",\"FacilityCodes_CreditCard\":\"Zahlungsmittel\",\"FacilityCodes_Equipment\":\"Ausstattung\",\"FacilityCodes_QualitySeals\":\"Qualitätssiegel\"},\"scheduleTypes\":{\"1\":\"Geöffnet\",\"2\":\"Geschlossen\"},\"timeCodes\":{\"1\":\"Allgemeine Öffnungszeiten\",\"2\":\"Warme Mahlzeiten\",\"3\":\"Pizza\",\"4\":\"Snacks\"},\"scheduleDays\":{\"Monday\":\"Mo\",\"Tuesday\":\"Di\",\"Wednesday\":\"Mi\",\"Thuresday\":\"Do\",\"Friday\":\"Fr\",\"Saturday\":\"Sa\",\"Sunday\":\"So\"},\"mainType\":\"Hauptkategorie\",\"subType\":\"Unterkategorie\",\"altitudeDifference\":\"Höhenunterschied\",\"altitudeHighestPoint\":\"Höchster Punkt\",\"altitudeLowestPoint\":\"Niedrigster Punkt\",\"Gastronomy\":\"Gastronomie\",\"Activity\":\"Aktivitäten\",\"POI\":\"Interessante Orte\",\"props\":{\"AltitudeDifference\":\"Höhendifferenz\",\"AltitudeLowestPoint\":\"Tiefster Punkt\",\"AltitudeHighestPoint\":\"Höchster Punkt\",\"AltitudeSumUp\":\"Höhenmeter aufwärts\",\"AltitudeSumDown\":\"Höhenmeter abwärts\",\"DistanceLength\":\"Länge\",\"DistanceDuration\":\"Dauer\",\"BikeTransport\":\"Fahrradtransport\",\"HasFreeEntrance\":\"Freier Eintritt\",\"LiftAvailable\":\"Lift verfügbar\",\"RunToValley\":\"####\",\"IsWithLight\":\"Beleuchted\",\"HasRentals\":\"Verleih verfügbar\",\"IsPrepared\":\"Prepartiert\",\"FeetClimb\":\"Begehbar\",\"IsOpen\":\"Geöffnet\"},\"yes\":\"Ja\",\"paging\":{\"next\":\"weiter\",\"back\":\"zurück\"},\"noResults\":\"Keine Ergebnisse gefunden\",\"back\":\"Zurück\",\"category\":\"Kategorie\",\"subcategory\":\"Unterkategorie\"}");

/***/ }),

/***/ "cc12":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "ce4e":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "cee4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var bind = __webpack_require__("1d2b");
var Axios = __webpack_require__("0a06");
var mergeConfig = __webpack_require__("4a7b");
var defaults = __webpack_require__("2444");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__("7a77");
axios.CancelToken = __webpack_require__("8df4");
axios.isCancel = __webpack_require__("2e67");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__("0df6");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "cf3f":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_altitudedifference.5f06b2e9.svg";

/***/ }),

/***/ "d012":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "d039":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "d066":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("428f");
var global = __webpack_require__("da84");

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "d1e7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "d2bb":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var aPossiblePrototype = __webpack_require__("3bbe");

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "d44e":
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__("9bf2").f;
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "d784":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__("ac1f");
var redefine = __webpack_require__("6eeb");
var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var regexpExec = __webpack_require__("9263");
var createNonEnumerableProperty = __webpack_require__("9112");

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "d925":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "da15":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/ic_distancelength.f56325fd.svg";

/***/ }),

/***/ "da84":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  (function () { return this; })() || Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "ddb0":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var DOMIterables = __webpack_require__("fdbc");
var ArrayIteratorMethods = __webpack_require__("e260");
var createNonEnumerableProperty = __webpack_require__("9112");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),

/***/ "df75":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "df7c":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "e163":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toObject = __webpack_require__("7b0b");
var sharedKey = __webpack_require__("f772");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "e177":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "e260":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__("fc6a");
var addToUnscopables = __webpack_require__("44d2");
var Iterators = __webpack_require__("3f8c");
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "e2cc":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("6eeb");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "e683":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "e6d1":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemsList_vue_vue_type_style_index_0_id_91f8f1ca_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6369");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemsList_vue_vue_type_style_index_0_id_91f8f1ca_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemsList_vue_vue_type_style_index_0_id_91f8f1ca_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemsList_vue_vue_type_style_index_0_id_91f8f1ca_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemsList_vue_vue_type_style_index_0_id_91f8f1ca_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "e893":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var ownKeys = __webpack_require__("56ef");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "e95a":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var Iterators = __webpack_require__("3f8c");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "f214":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemDetail_vue_vue_type_style_index_0_id_8df8e56c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7983");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemDetail_vue_vue_type_style_index_0_id_8df8e56c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemDetail_vue_vue_type_style_index_0_id_8df8e56c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemDetail_vue_vue_type_style_index_0_id_8df8e56c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ItemDetail_vue_vue_type_style_index_0_id_8df8e56c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "f457":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("5dee");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("fc0952da", content, shadowRoot)
};

/***/ }),

/***/ "f5df":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var classofRaw = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "f6b4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "f772":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("5692");
var uid = __webpack_require__("90e3");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "f8b2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/loading.7b330de3.gif";

/***/ }),

/***/ "fab9":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "img/POI-Placeholder.4bd4602b.svg";

/***/ }),

/***/ "fc6a":
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("44ad");
var requireObjectCoercible = __webpack_require__("1d80");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "fdbc":
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "fdbf":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__("4930");

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';


/***/ })

/******/ });
//# sourceMappingURL=webcomp-tourism-detail.js.map